<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BPUtil</name>
    </assembly>
    <members>
        <member name="T:BPUtil.Keystore">
            <summary>
            Enumerates cryptographic keystores available in Windows.
            </summary>
        </member>
        <member name="F:BPUtil.Keystore.Machine">
            <summary>
            The key is kept at the machine level so that all users can access it (in theory)
            </summary>
        </member>
        <member name="F:BPUtil.Keystore.User">
            <summary>
            The key is kept at the user level so only the user who created the key can access it (in theory).
            </summary>
        </member>
        <member name="T:BPUtil.AsymmetricEncryption">
            <summary>
            <para>Performs asymmetric encryption and decryption using RSACryptoServiceProvider and OAEP padding. This class is thread-safe.</para>
            <para>This class can also be used to generate and export keys for later use.</para>
            <para>Based on testing, the payload size limits are as follows:</para>
            <para>* 1024-bit key: 86-byte payload limit</para>
            <para>* 2048-bit key: 214-byte payload limit</para>
            <para>* 3072-bit key: 342-byte payload limit</para>
            <para>* 4096-bit key: 470-byte payload limit</para>
            <para>This class can also be used to sign and verify using the same keys that are used for encryption and decryption.</para>
            </summary>
        </member>
        <member name="F:BPUtil.AsymmetricEncryption.keySize">
            <summary>
            RSA key size.  Defaults to 4096.  Key size mainly affects speed of key generation, and 4096 takes a couple seconds but is more secure than smaller key sizes. 
            </summary>
        </member>
        <member name="M:BPUtil.AsymmetricEncryption.GenerateNewKeys(System.String@,System.String@)">
            <summary>
            Generates new 4096-bit RSA keys without persisting them in the operating system's keystore.
            </summary>
            <param name="publicKeyBase64">CspBlob containing public key information, base64 encoded. Can be used for encrypting using <see cref="M:BPUtil.AsymmetricEncryption.EncryptWithKey(System.String,System.Byte[])"/>.</param>
            <param name="privateKeyBase64">The private (and public) components of the RSA key, base64 encoded. Can be used for encrypting using <see cref="M:BPUtil.AsymmetricEncryption.EncryptWithKey(System.String,System.Byte[])"/> and decrypting using <see cref="M:BPUtil.AsymmetricEncryption.DecryptWithKey(System.String,System.Byte[])"/>.</param>
        </member>
        <member name="M:BPUtil.AsymmetricEncryption.GenerateNewKeysInKeystore(BPUtil.Keystore,System.String,System.String@)">
            <summary>
            <para>Generates new 4096-bit RSA keys, saving them in a key container in the operating system's keystore. Any existing key container with this name is deleted first.</para>
            <para>The public key is exported via an out string parameter, but the private key information is not exported.</para>
            <para>If you need to export the private key, you shouldn't bother using the operating system's keystore.</para>
            </summary>
            <param name="keystore">Specify which keystore the key should be saved in.</param>
            <param name="keyContainerName">A string which uniquely identifies this encryption key among all other keys in the keystore.  You'll use it again to access the encryption key later.  E.g. "MyKeyForThisSpecificPurpose".</param>
            <param name="publicKeyBase64">CspBlob containing public key information, base64 encoded. Can be used for encrypting using <see cref="M:BPUtil.AsymmetricEncryption.EncryptWithKey(System.String,System.Byte[])"/>.</param>
        </member>
        <member name="M:BPUtil.AsymmetricEncryption.GetKeyFromKeystore(BPUtil.Keystore,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns the RSA key from the specified key container. Behavior if the key does not already exist is configured via argument.
            </summary>
            <param name="keystore">Specify which keystore the key should be loaded from.</param>
            <param name="keyContainerName">A string which uniquely identifies this encryption key among all other keys in the keystore.</param>
            <param name="createIfNoExist">If true, the key is created if it does not exist (can fail and throw exception).  If false, returns null if the key does not exist or is not accessible (not expected to throw).</param>
            <param name="publicOnly">If true, only the public key is returned. If false, the private key is returned.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.AsymmetricEncryption.ConvertKeyBase64ToRSAParameters(System.String)">
            <summary>
            Returns an RSAParameters object containing the key parameters from the given base64 CspBlob.
            </summary>
            <param name="keyBase64">CspBlob containing public or private key information, base64 encoded.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.AsymmetricEncryption.DeletePublicKeyFromKeystore(BPUtil.Keystore,System.String)">
            <summary>
            Deletes the RSA key with the specified key container name, if it exists.
            </summary>
            <param name="keystore">Specify which keystore the key should be deleted from.</param>
            <param name="keyContainerName">A string which uniquely identifies this encryption key among all other keys in the keystore.</param>
        </member>
        <member name="M:BPUtil.AsymmetricEncryption.EncryptWithKey(System.String,System.Byte[])">
            <summary>
            Encrypts the given data using the public key from the given base64-encoded CspBlob.
            </summary>
            <param name="publicKeyBase64">CspBlob containing public key information, base64 encoded, as exported using the <see cref="M:BPUtil.AsymmetricEncryption.GenerateNewKeys(System.String@,System.String@)"/> method. Can also accept the private key because RSA private keys typically include public key information too.</param>
            <param name="data">Data to encrypt.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.AsymmetricEncryption.DecryptWithKey(System.String,System.Byte[])">
            <summary>
            Decrypts the given data using the private key from the given base64-encoded CspBlob.
            </summary>
            <param name="privateKeyBase64">CspBlob containing private key information, as a base64 string, as exported using the <see cref="M:BPUtil.AsymmetricEncryption.GenerateNewKeys(System.String@,System.String@)"/> method.</param>
            <param name="data">Data to decrypt.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.AsymmetricEncryption.EncryptWithKeyFromKeystore(BPUtil.Keystore,System.String,System.Byte[])">
            <summary>
            Encrypts the given data using a public key from the operating system's keystore. If the key does not already exist, a new one is created.
            </summary>
            <param name="keystore">Specify which keystore the key should be loaded from.</param>
            <param name="keyContainerName">A string which uniquely identifies this encryption key among all other keys in the keystore.</param>
            <param name="data">Data to encrypt.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.AsymmetricEncryption.DecryptWithKeyFromKeystore(BPUtil.Keystore,System.String,System.Byte[])">
            <summary>
            Decrypts the given data using a private key from the operating system's keystore. If the key does not already exist, a new one is created.
            </summary>
            <param name="keystore">Specify which keystore the key should be loaded from.</param>
            <param name="keyContainerName">A string which uniquely identifies this encryption key among all other keys in the keystore.</param>
            <param name="data">Data to decrypt.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.AsymmetricEncryption.VerifyWithKey(System.String,System.Byte[],System.Byte[],BPUtil.HashAlgSelector)">
            <summary>
            Verifies the given signature against a hash of the data using the public key from the given base64-encoded CspBlob. Returns true if the signature is verified.
            </summary>
            <param name="publicKeyBase64">CspBlob containing public key information, base64 encoded, as exported using the <see cref="M:BPUtil.AsymmetricEncryption.GenerateNewKeys(System.String@,System.String@)"/> method. Can also accept the private key because RSA private keys typically include public key information too.</param>
            <param name="data">Data to verify.</param>
            <param name="signature">Signature to verify.</param>
            <param name="hashAlg">Hash algorithm to use when hashing the data. Default is SHA256.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.AsymmetricEncryption.SignWithKey(System.String,System.Byte[],BPUtil.HashAlgSelector)">
            <summary>
            Signs a hash of the given data using the private key from the given base64-encoded CspBlob. Returns the signature.
            </summary>
            <param name="privateKeyBase64">CspBlob containing private key information, as a base64 string, as exported using the <see cref="M:BPUtil.AsymmetricEncryption.GenerateNewKeys(System.String@,System.String@)"/> method.</param>
            <param name="data">Data to sign.</param>
            <param name="hashAlg">Hash algorithm to use when hashing the data. Default is SHA256.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.AsymmetricEncryption.VerifyWithKeyFromKeystore(BPUtil.Keystore,System.String,System.Byte[],System.Byte[],BPUtil.HashAlgSelector)">
            <summary>
            Verifies the given signature against a hash of the data using a public key from the operating system's keystore. If the key does not already exist, verification will fail. Returns true if the signature is verified.
            </summary>
            <param name="keystore">Specify which keystore the key should be loaded from.</param>
            <param name="keyContainerName">A string which uniquely identifies this encryption key among all other keys in the keystore.</param>
            <param name="data">Data to verify.</param>
            <param name="signature">Signature to verify.</param>
            <param name="hashAlg">Hash algorithm to use when hashing the data. Default is SHA256.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.AsymmetricEncryption.SignWithKeyFromKeystore(BPUtil.Keystore,System.String,System.Byte[],BPUtil.HashAlgSelector)">
            <summary>
            Signs a hash of the given data using a private key from the operating system's keystore. If the key does not already exist, a new one is created. Returns the signature.
            </summary>
            <param name="keystore">Specify which keystore the key should be loaded from.</param>
            <param name="keyContainerName">A string which uniquely identifies this encryption key among all other keys in the keystore.</param>
            <param name="data">Data to sign.</param>
            <param name="hashAlg">Hash algorithm to use when hashing the data. Default is SHA256.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.AsymmetricEncryption.Hash(System.Byte[],BPUtil.HashAlgSelector)">
            <summary>
            Computes a cryptographic hash value of data using the specified algorithm.
            </summary>
            <param name="data">Data to hash.</param>
            <param name="hashAlg">Hash algorithm to use for hashing the data.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.AsymmetricEncryption.CreateCspParameters(BPUtil.Keystore,System.String)">
            <summary>
            Returns a new CspParameters object configured for the specified keystore and key container name.
            </summary>
            <param name="keystore">Specify which keystore should be used.</param>
            <param name="keyContainerName">A string which uniquely identifies this encryption key among all other keys in the keystore.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.AsymmetricEncryption.GetRsaCspWithKeystore(BPUtil.Keystore,System.String)">
            <summary>
            Creates an RSACryptoServiceProvider with a persistent key using the given keystore and key container name. The key is created if it does not exist.
            </summary>
            <param name="keystore">Specify which keystore should be used.</param>
            <param name="keyContainerName">A string which uniquely identifies this encryption key among all other keys in the keystore.</param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.HashAlgSelector">
            <summary>
            Identifies a hash algorithm for use in AsymmetricEncryption Sign and Verify methods.
            </summary>
        </member>
        <member name="F:BPUtil.HashAlgSelector.SHA256">
            <summary>
            The default hash algorithm, and the only one I have tested.
            </summary>
        </member>
        <member name="T:BPUtil.BackupRotate">
            <summary>
            Contains logic to decide, given a set of backup dates, which dates to keep and which to delete.  The time between kept backups will increase exponentially.  Ideal operation requires consistent backups (e.g. no missed intervals), but the algorithm can also do a decent job of handling the situation where expected backups were not created.
            Behavior is similar to the log2rotate algorithm, but the implementation is simpler.
            </summary>
        </member>
        <member name="F:BPUtil.BackupRotate.BackupInterval">
            <summary>
            Defines the expected backup interval.  The algorithm works best when backup dates are exactly this far apart, but it is not a strict requirement.
            </summary>
        </member>
        <member name="M:BPUtil.BackupRotate.#ctor">
            <summary>
            Constructs a BackupRotate instance with the default backup interval of 1 day.
            </summary>
        </member>
        <member name="M:BPUtil.BackupRotate.#ctor(System.TimeSpan)">
            <summary>
            Constructs a BackupRotate instance with the specified backup interval.
            </summary>
            <param name="BackupInterval">Expected interval between backups. Default is 1 day.</param>
        </member>
        <member name="M:BPUtil.BackupRotate.DetermineBackupsToKeep(System.Collections.Generic.IEnumerable{System.DateTime})">
            <summary>
            Returns an array of dates where the backups should be kept.
            </summary>
            <param name="allBackupsCurrentlyAvailable">A collection of dates with backups available.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.BackupRotate.DetermineBackupsToDelete(System.Collections.Generic.IEnumerable{System.DateTime})">
            <summary>
            Returns an array of dates where the backups should be deleted.
            </summary>
            <param name="allBackupsCurrentlyAvailable">A collection of dates with backups available.</param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.Base64UrlMod">
            <summary>
            A class which provides an alternate form of Base64 encoding and decoding, using only characters which are valid, un-encoded, in URLs.
            </summary>
        </member>
        <member name="M:BPUtil.Base64UrlMod.ToBase64UrlMod(System.Byte[])">
            <summary>
            <para>Returns a modified base64-encoded string using characters which can be used in URLs without URL-encoding.</para>
            <para>The output format is the same as standard Base64 except the characters '+' and '/' are respectively replaced with '-' and '_', while padding characters ('=') are simply removed from the end.</para>
            </summary>
            <param name="data">Data to encode.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Base64UrlMod.ToBase64UrlMod(System.String)">
            <summary>
            <para>Returns a modified base64-encoded string using characters which can be used in URLs without URL-encoding.</para>
            <para>The output format is the same as standard Base64 except the characters '+' and '/' are respectively replaced with '-' and '_', while '=' padding characters ('=') are simply removed from the end.</para>
            </summary>
            <param name="base64">Base64-encoded string</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Base64UrlMod.FromBase64UrlMod(System.String)">
            <summary>
            <para>Decodes a string that was originally encoded via `ToBase64UrlMod`, returning a copy of the original byte array.</para>
            <para>This method can also handle standard Base64 input strings, however with reduced efficiency.</para>
            <para>This method can handle input strings which have had their trailing padding characters removed.</para>
            <para>This method can handle input strings with certain unwanted punctuation or whitespace appended to the start or end.</para>
            </summary>
            <param name="base64UrlMod">A string that was originally encoded via `ToBase64UrlMod`.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Base64UrlMod.Base64UrlModToBase64(System.String)">
            <summary>
            <para>Decodes a string that was originally encoded via `ToBase64UrlMod`, returning a copy in regular Base64 format.</para>
            <para>This method can also handle standard Base64 input strings, however with reduced efficiency.</para>
            <para>This method can handle input strings which have had their trailing padding characters removed.</para>
            <para>This method can handle input strings with certain unwanted punctuation or whitespace appended to the start or end.</para>
            </summary>
            <param name="base64UrlMod">A string that was originally encoded via `ToBase64UrlMod`.</param>
            <returns></returns>
        </member>
        <member name="F:BPUtil.BPQueue`1.DefaultValue">
            <summary>
            A default value of the generic type (typically null or 0)
            </summary>
        </member>
        <member name="P:BPUtil.BPQueue`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:BPUtil.BPQueue`1"/>.
            </summary>
        </member>
        <member name="P:BPUtil.BPQueue`1.IsEmpty">
            <summary>
            Returns true if the <see cref="T:BPUtil.BPQueue`1"/> is empty.
            </summary>
        </member>
        <member name="M:BPUtil.BPQueue`1.Enqueue(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:BPUtil.BPQueue`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:BPUtil.BPQueue`1"/>. The value can be null for reference types.</param>
        </member>
        <member name="M:BPUtil.BPQueue`1.TryDequeue(`0@)">
            <summary>
            Tries to retrieve and remove the object at the beginning of the <see cref="T:BPUtil.BPQueue`1"/>. Returns true if successful.
            </summary>
            <param name="result">When this method returns, if the operation was successful, result contains the object removed. If no object was available to be removed, result contains the default value of the type.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.BPQueue`1.TryPeek(`0@)">
            <summary>
            Tries to retrieve but not remove the object at the beginning of the <see cref="T:BPUtil.BPQueue`1"/>. Returns true if successful.
            </summary>
            <param name="result">When this method returns, if the operation was successful, result contains the object at the front of the queue. If no object was available, result contains the default value of the type.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.BPQueue`1.ReplaceFront(`0)">
            <summary>
            Replaces the object at the beginning of the <see cref="T:BPUtil.BPQueue`1"/> with the specified object. If the queue is empty, Enqueues the item instead.
            </summary>
            <param name="newFront">The new item to add to the front of the queue.</param>
        </member>
        <member name="M:BPUtil.BPQueue`1.ToArray">
            <summary>
            Returns an array containing all the items in the queue, in the order they would have been dequeued in.
            </summary>
            <returns>Returns an array containing all the items in the queue, in the order they would have been dequeued in.</returns>
        </member>
        <member name="M:BPUtil.BPQueue`1.Find(System.Func{`0,System.Boolean})">
            <summary>
            Returns the first item that causes the specified predicate to return true.
            </summary>
            <param name="where">A function to which each item from the queue is passed. The function should return true when the desired item is passed in.</param>
            <returns>Returns the first item that causes the specified predicate to return true.</returns>
        </member>
        <member name="T:BPUtil.CertificateValidation">
            <summary>
            <para>A class which manages<seealso cref="P:System.Net.ServicePointManager.ServerCertificateValidationCallback"/>, providing support for multiple callbacks. If any of the registered callbacks return true, the certificate will be considered valid.</para>
            <para>By default, only valid certificates are considered valid.</para>
            <para>This should be the only class which sets <seealso cref="P:System.Net.ServicePointManager.ServerCertificateValidationCallback"/></para>
            </summary>
        </member>
        <member name="F:BPUtil.CertificateValidation.AlwaysCallAllCallbacks">
            <summary>
            If true, the CertificateValidation class will always call all validation callbacks. If false, it will stop as soon as one returns true.
            </summary>
        </member>
        <member name="M:BPUtil.CertificateValidation.RegisterCallback(System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            <para>Registers a new callback to be called in <see cref="P:System.Net.ServicePointManager.ServerCertificateValidationCallback"/>.</para>
            <para>DO NOT ASSIGN <see cref="P:System.Net.ServicePointManager.ServerCertificateValidationCallback"/> yourself.  This class assigns a special callback method which calls all callbacks registered via <see cref="M:BPUtil.CertificateValidation.RegisterCallback(System.Net.Security.RemoteCertificateValidationCallback)"/>. If any of the registered callbacks returns true, the certificate will be accepted.</para>
            <para>If you want a template for the callback which you can copy, see the <see cref="M:BPUtil.CertificateValidation.DefaultValidationCallback(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)"/> private method in this class.</para>
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:BPUtil.CertificateValidation.DefaultValidationCallback(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Returns true if sslPolicyErrors == SslPolicyErrors.None.
            </summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="sslPolicyErrors"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.CertificateValidation.DoNotValidate_ValidationCallback(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            An example validation callback which simply returns true.  Registering this callback will effectively disable certificate validation.
            </summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="sslPolicyErrors"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.CertificateValidation.Allow_127_0_0_1_ValidationCallback(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            An example validation callback which approves the certificate without looking at it, if the target hostname is exactly "127.0.0.1".
            </summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="sslPolicyErrors"></param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.CompassDirection">
            <summary>
            Enum consisting of all the directions on a 16-point compass rose.
            </summary>
        </member>
        <member name="T:BPUtil.Compass">
            <summary>
            Computes compass-related things.
            </summary>
        </member>
        <member name="M:BPUtil.Compass.GetCompassDirection(System.Int32)">
            <summary>
            Returns the CompassDirection enum value that best describes the absolute bearing (degrees clockwise from True North).
            </summary>
            <param name="absoluteBearingDegrees">Degrees absolute bearing (0 = north, 90 = east, 180 = south, 270 = west)</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Compass.GetCompassDirectionName(BPUtil.CompassDirection)">
            <summary>
            Returns the full text name for the given compass direction, e.g. NNE -> "north-northeast"
            </summary>
            <param name="d">Compass direction to get the name for.</param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.CountdownStopwatch">
            <summary>
            Measures elapsed time against a goal, providing an interface equivalent to a timer that is counting down.  Internally uses a <see cref="T:System.Diagnostics.Stopwatch"/> and provides a similar API.
            </summary>
        </member>
        <member name="F:BPUtil.CountdownStopwatch.TimeToWait">
            <summary>
            The amount of time to wait.  This can be adjusted after constructing the CountdownStopwatch, but for most predictable results, changing it is not recommended.
            </summary>
        </member>
        <member name="M:BPUtil.CountdownStopwatch.#ctor(System.TimeSpan)">
            <summary>
            Constructs a new CountdownStopwatch where Running is false.
            </summary>
            <param name="timeToWait">Time to wait before Finished is true.</param>
        </member>
        <member name="M:BPUtil.CountdownStopwatch.Start">
            <summary>
            Starts or resumes the countdown.
            </summary>
        </member>
        <member name="M:BPUtil.CountdownStopwatch.Restart">
            <summary>
            Stops the countdown, resets the elapsed time to zero, and starts the countdown.
            </summary>
        </member>
        <member name="M:BPUtil.CountdownStopwatch.Stop">
            <summary>
            Stops the countdown, leaving elapsed time frozen.
            </summary>
        </member>
        <member name="M:BPUtil.CountdownStopwatch.Reset">
            <summary>
            Stops the countdown and resets the elapsed time to zero.
            </summary>
        </member>
        <member name="M:BPUtil.CountdownStopwatch.StartNew(System.TimeSpan)">
            <summary>
            Constructs a new CountdownStopwatch, starts it, and returns it.
            </summary>
            <param name="timeToWait">Time to wait before Finished is true.</param>
            <returns></returns>
        </member>
        <member name="P:BPUtil.CountdownStopwatch.IsRunning">
            <summary>
            Gets a value indicating if the countdown is running.  If the countdown is <see cref="P:BPUtil.CountdownStopwatch.Finished"/> or stopped via <see cref="M:BPUtil.CountdownStopwatch.Stop"/> or <see cref="M:BPUtil.CountdownStopwatch.Reset"/> or has not been started, then it is not running.
            </summary>
        </member>
        <member name="P:BPUtil.CountdownStopwatch.Finished">
            <summary>
            Gets a value indicating if the countdown has reached zero.
            </summary>
        </member>
        <member name="P:BPUtil.CountdownStopwatch.Remaining">
            <summary>
            Gets the amount of time remaining before the countdown reaches zero.
            </summary>
        </member>
        <member name="P:BPUtil.CountdownStopwatch.RemainingMilliseconds">
            <summary>
            Gets the amount of time in milliseconds remaining before the countdown reaches zero, rounded up to the millisecond.
            </summary>
        </member>
        <member name="M:BPUtil.CountdownStopwatch.SleepUntilZero">
            <summary>
            Sleeps the current thread until <see cref="P:BPUtil.CountdownStopwatch.Remaining"/> is zero (<see cref="P:BPUtil.CountdownStopwatch.Finished"/> returns true), waking to check status every 100ms in case another thread modifies this CountdownStopwatch.
            </summary>
        </member>
        <member name="T:BPUtil.Encryption">
            <summary>
            Performs AES encryption and Decryption using <see cref="F:System.Security.Cryptography.CipherMode.CBC"/>. This class is thread-safe.
            </summary>
        </member>
        <member name="M:BPUtil.Encryption.#ctor">
            <summary>
            Creates a new Encryption instance with a random Initialization Vector and 256-bit Key
            </summary>
        </member>
        <member name="M:BPUtil.Encryption.#ctor(System.String,System.String)">
            <summary>
            Creates a new Encryption instance with a predefined Key and Initialization Vector
            </summary>
            <param name="key">Encryption Key, Base64-encoded</param>
            <param name="iv">Initialization Vector, Base64-encoded</param>
        </member>
        <member name="M:BPUtil.Encryption.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Creates a new Encryption instance with a predefined Key and Initialization Vector
            </summary>
            <param name="key">Encryption Key</param>
            <param name="iv">Initialization Vector</param>
        </member>
        <member name="M:BPUtil.EnumHelper.GetAllMatchedFlagsStr(System.Enum)">
            <summary>
            Returns a string that lists all the flag values matched by the enum.
            </summary>
            <param name="e">Enum to get flag values for.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.EnumHelper.GetAllMatchedFlags(System.Enum)">
            <summary>
            Returns all the flag values matched by the enum.
            </summary>
            <param name="e">Enum to get flag values for.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.FileUtil.FullControlToUsers(System.String)">
            <summary>
            Allows "Full Control" permission to "Users".
            </summary>
            <param name="filePath">Path of file to set permission on.</param>
        </member>
        <member name="M:BPUtil.FileUtil.DirectoryCopy(System.String,System.String,System.Boolean)">
            <summary>
            Copies a directory and its contents to a new location.
            </summary>
            <param name="sourceDirName">Path to the source directory.</param>
            <param name="destDirName">Path to the destination directory.</param>
            <param name="copySubDirs">If true, subdirectories will be copied recursively.</param>
        </member>
        <member name="M:BPUtil.FileUtil.DirectoryMove(System.String,System.String)">
            <summary>
            Moves a directory and its contents to a new location, overwriting existing content as necessary.
            </summary>
            <param name="sourceDirName">Path to the source directory.</param>
            <param name="destDirName">Path to the destination directory.</param>
        </member>
        <member name="M:BPUtil.FileUtil.FileMove(System.String,System.String)">
            <summary>
            Moves a file to a new location, overwriting existing content as necessary.
            </summary>
            <param name="sourceFileName">Path to the source file.</param>
            <param name="destFileName">Path to the destination file.</param>
        </member>
        <member name="M:BPUtil.FileUtil.GetDriveLetter(System.String)">
            <summary>
            Returns the drive letter, capitalized, from the absolute Windows path ("c:/temp/file.txt" yields "C").  Returns null if a drive letter could not be identified.
            </summary>
            <param name="absolutePath"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.FileUtil.IsDirectory(System.String)">
            <summary>
            Returns true if the specified path refers to an existing directory.  Just call Directory.Exists.  I wrote this method so I would stop looking for it.
            </summary>
            <param name="path">Path to a file or directory which may exist.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.FileUtil.IsFile(System.String)">
            <summary>
            Returns true if the specified path refers to an existing file.  Just call File.Exists.  I wrote this method so I would stop looking for it.
            </summary>
            <param name="path">Path to a file or directory which may exist.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.FileUtil.Exists(System.String)">
            <summary>
            Returns true if a file or directory exists at the specified path.
            </summary>
            <param name="path">Path to a file or directory which may exist.</param>
            <returns></returns>
        </member>
        <member name="P:BPUtil.Forms.MultiSelect.EditMultiSelect.OkWasClicked">
            <summary>
            A boolean indicating if OK was clicked.
            </summary>
        </member>
        <member name="F:BPUtil.Forms.MultiSelect.EditMultiSelect.Items">
            <summary>
            The array of items available for selection.
            </summary>
        </member>
        <member name="P:BPUtil.Forms.MultiSelect.EditMultiSelect.SelectedIndices">
            <summary>
            Gets an array that indicates which item indices are currently selected.
            </summary>
        </member>
        <member name="F:BPUtil.Forms.MultiSelect.EditMultiSelect.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BPUtil.Forms.MultiSelect.EditMultiSelect.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BPUtil.Forms.MultiSelect.EditMultiSelect.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:BPUtil.Forms.MultiSelect.MultiSelectCompact.Items">
            <summary>
            Gets or sets the array of items available for selection.  When setting the array, all current selections will be cleared.
            </summary>
        </member>
        <member name="F:BPUtil.Forms.MultiSelect.MultiSelectCompact._items">
            <summary>
            The array of items available for selection.
            </summary>
        </member>
        <member name="P:BPUtil.Forms.MultiSelect.MultiSelectCompact.SelectedItems">
            <summary>
            Gets an array of items that are currently selected.
            </summary>
        </member>
        <member name="P:BPUtil.Forms.MultiSelect.MultiSelectCompact.SelectedIndices">
            <summary>
            Gets or sets an array indicating which indices are selected. Setting a null value will actually cause a new array of appropriate length to be set instead.
            </summary>
        </member>
        <member name="F:BPUtil.Forms.MultiSelect.MultiSelectCompact._selectedIndices">
            <summary>
            The array indicating which indices are selected.
            </summary>
        </member>
        <member name="E:BPUtil.Forms.MultiSelect.MultiSelectCompact.SelectedItemsChanged">
            <summary>
            Event raised when the selected items have changed.
            </summary>
        </member>
        <member name="M:BPUtil.Forms.MultiSelect.MultiSelectCompact.Initialize``1(System.String,BPUtil.Forms.MultiSelect.MultiSelectListItem{``0}[],System.Boolean[])">
            <summary>
            Initializes the control. Must be called before the user clicks the edit button.
            </summary>
            <param name="text">Title associated with the items. Such as "Recipes" or "Acceptable Colors". This gets assigned to the "Text" property.</param>
            <param name="items">Items to make available for selection. See <see cref="P:BPUtil.Forms.MultiSelect.MultiSelectCompact.Items"/> and <see cref="P:BPUtil.Forms.MultiSelect.MultiSelectCompact.SelectedItems"/>.</param>
            <param name="selectedIndices">An array indicating which indices are selected. See <see cref="P:BPUtil.Forms.MultiSelect.MultiSelectCompact.SelectedIndices"/> and <see cref="P:BPUtil.Forms.MultiSelect.MultiSelectCompact.SelectedItems"/>.</param>
        </member>
        <member name="M:BPUtil.Forms.MultiSelect.MultiSelectCompact.Initialize(System.String,System.Object[],System.Boolean[])">
            <summary>
            Initializes the control. Must be called before the user clicks the edit button.
            </summary>
            <param name="text">Title associated with the items. Such as "Recipes" or "Acceptable Colors". This gets assigned to the "Text" property.</param>
            <param name="items">Items to make available for selection. Each should override ToString(). See <see cref="P:BPUtil.Forms.MultiSelect.MultiSelectCompact.Items"/> and <see cref="P:BPUtil.Forms.MultiSelect.MultiSelectCompact.SelectedItems"/>.</param>
            <param name="selectedIndices">An array indicating which indices are selected. See <see cref="P:BPUtil.Forms.MultiSelect.MultiSelectCompact.SelectedIndices"/> and <see cref="P:BPUtil.Forms.MultiSelect.MultiSelectCompact.SelectedItems"/>.</param>
        </member>
        <member name="F:BPUtil.Forms.MultiSelect.MultiSelectCompact.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:BPUtil.Forms.MultiSelect.MultiSelectCompact.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BPUtil.Forms.MultiSelect.MultiSelectCompact.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:BPUtil.Forms.PasswordPrompt.OK">
            <summary>
            Gets a value indicating if the the OK button was clicked.
            </summary>
        </member>
        <member name="P:BPUtil.Forms.PasswordPrompt.InputPassword">
            <summary>
            Gets the password which was input by the user.
            </summary>
        </member>
        <member name="M:BPUtil.Forms.PasswordPrompt.#ctor(System.String,System.String)">
            <summary>
            Creates a new PasswordPrompt containing a password input field with OK and Cancel buttons.
            </summary>
            <param name="title">Title for the form's title bar.</param>
            <param name="labelText">Label to display above the password input.</param>
        </member>
        <member name="F:BPUtil.Forms.PasswordPrompt.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BPUtil.Forms.PasswordPrompt.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BPUtil.Forms.PasswordPrompt.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:BPUtil.Forms.InputDialog.InputText">
            <summary>
            Gets the text which was input by the user.
            </summary>
        </member>
        <member name="P:BPUtil.Forms.InputDialog.OK">
            <summary>
            Gets a value indicating if the the OK button was clicked.
            </summary>
        </member>
        <member name="M:BPUtil.Forms.InputDialog.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new InputDialog containing a small single-line text input field with OK and Cancel buttons.
            </summary>
            <param name="title">Title for the form's title bar.</param>
            <param name="label">Label to display above the text input.</param>
            <param name="defaultValue">The default value of the input text field.</param>
        </member>
        <member name="F:BPUtil.Forms.InputDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BPUtil.Forms.InputDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BPUtil.Forms.InputDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BPUtil.Forms.TrayIconApplicationContext">
            <summary>
            <para>
            An application context you can use when you want to develop a Windows Forms application that "runs in the system tray" and normally has no form open.
            </para>
            <para>
            Example: Application.Run(new TrayIconApplicationContext(...));
            </para>
            </summary>
        </member>
        <member name="F:BPUtil.Forms.TrayIconApplicationContext.CreateContextMenuAtEveryOpen">
            <summary>
            If true, the context menu will be emptied and the CreateContextMenu event will be raised every time the context menu is opened.
            </summary>
        </member>
        <member name="F:BPUtil.Forms.TrayIconApplicationContext.contextMenuCreated">
            <summary>
            Keeps track of whether the menu has been created or not.
            </summary>
        </member>
        <member name="M:BPUtil.Forms.TrayIconApplicationContext.#ctor(System.Drawing.Icon,System.String,System.Func{BPUtil.Forms.TrayIconApplicationContext,System.Boolean},System.Action)">
            <summary>
            This class should be created and passed into Application.Run( ... )
            </summary>
            <param name="trayIcon">The icon to show in the system tray.  You could load this from a Form by copying code from that form's Designer file.</param>
            <param name="tooltipText">(optional) Text to show upon mouseover of the tray icon.</param>
            <param name="onCreateContextMenu">(optional) A callback which is called when it is time to create the context menu. Return true if you have added an Exit button.  If this callback does not exist or returns false, an Exit item is added to the menu automatically.</param>
            <param name="onDoubleClick">A callback which is called when the tray icon is double-clicked. Enabling this disables single-left-click opening of the context menu.</param>
        </member>
        <member name="M:BPUtil.Forms.TrayIconApplicationContext.notifyIcon_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Shows the context menu upon left mouse click too. http://stackoverflow.com/questions/2208690/invoke-notifyicons-context-menu
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BPUtil.Forms.TrayIconApplicationContext.AddToolStripMenuItem(System.String,System.EventHandler,System.Drawing.Image,System.String)">
            <summary>
            Adds an item to the context menu.
            </summary>
            <param name="text">Text to show for the menu item. E.g. "E&amp;xit".</param>
            <param name="eventHandler">(optional) An event handler to call when the item is clicked.</param>
            <param name="icon">(optional) icon to show for the menu item.</param>
            <param name="tooltipText">(optional) tooltip text to show for the item.</param>
        </member>
        <member name="M:BPUtil.Forms.TrayIconApplicationContext.AddToolStripSeparator">
            <summary>
            Adds a <see cref="T:System.Windows.Forms.ToolStripSeparator"/> to the context menu.
            </summary>
        </member>
        <member name="F:BPUtil.Forms.TrayIconApplicationContext.components">
            <summary>
            A list of components to dispose when the context is disposed.
            </summary>
        </member>
        <member name="F:BPUtil.Forms.TrayIconApplicationContext.notifyIcon">
            <summary>
            The icon that sits in the system tray.
            </summary>
        </member>
        <member name="M:BPUtil.Forms.TrayIconApplicationContext.Dispose(System.Boolean)">
            <summary>
            When the application context is disposed, dispose things like the notify icon.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:BPUtil.Forms.TrayIconApplicationContext.exitItem_Click(System.Object,System.EventArgs)">
            <summary>
            When the exit menu item is clicked, make a call to terminate the ApplicationContext.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BPUtil.Forms.TrayIconApplicationContext.ExitThreadCore">
            <summary>
            If we are presently showing a form, clean it up.
            </summary>
        </member>
        <member name="T:BPUtil.Forms.SelfCenteredForm">
            <summary>
            This extension of Form simply positions itself at the center of its owner, upon being shown. It will be offset by approximately 1 centimeter to down and to the right for each form the owner owns.
            </summary>
        </member>
        <member name="T:BPUtil.Forms.ServiceManager">
            <summary>
            A Windows Form which offers the ability to Install, Uninstall, Start, and Stop the current executable as a Windows Service.
            This form can be extended with additional functionality in the form of `additionalButtons` passed to the constructor.
            </summary>
        </member>
        <member name="M:BPUtil.Forms.ServiceManager.#ctor(System.String,System.String,BPUtil.Forms.ButtonDefinition[],System.Windows.Forms.Control)">
            <summary>
            
            </summary>
            <param name="Title">The title of the form (will appear in the title bar).</param>
            <param name="ServiceName">The name of the Windows Service.</param>
            <param name="additionalButtons">An array of buttons to add to the bottom of the form.  May be null.  You may specify the Text and Click handler for each button.  `null` buttons will still take up space, allowing more control over the layout.</param>
            <param name="additionalControl">An additional Control to add to the bottom of the form, above any additional buttons.</param>
        </member>
        <member name="F:BPUtil.Forms.ServiceManager.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BPUtil.Forms.ServiceManager.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BPUtil.Forms.ServiceManager.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BPUtil.ImageFile">
            <summary>
            This class wraps a FileStream and an Image, serving as an alternative to the Image.FromFile() method.
            This works around a potential issue with Image.FromFile() where the file handles don't get closed properly even if the image is correctly disposed.
            </summary>
        </member>
        <member name="F:BPUtil.ImageFile.stream">
            <summary>
            A reference to the internal FileStream object.  The ImageFile class will dispose this object when the ImageFile is disposed.
            </summary>
        </member>
        <member name="F:BPUtil.ImageFile.img">
            <summary>
            A reference to the internal Image object.  The ImageFile class will dispose this object when the ImageFile is disposed.
            </summary>
        </member>
        <member name="M:BPUtil.ImageFile.#ctor(System.String)">
            <summary>
            Opens an image from a file, properly disposing of the image and file handle when this instance is disposed.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:BPUtil.ImageFile.#ctor(System.Byte[])">
            <summary>
            Opens an image from a byte array containing image file data, properly disposing of the image when this instance is disposed.
            </summary>
            <param name="rawImgFileData"></param>
        </member>
        <member name="M:BPUtil.ImageFile.#ctor(System.Drawing.Image)">
            <summary>
            Wraps an Image, properly disposing of the Image when this instance is disposed.
            </summary>
            <param name="image">The image to wrap.</param>
        </member>
        <member name="P:BPUtil.ImageFile.Width">
            <summary>
            Gets the width, in pixels, of the Image.
            </summary>
        </member>
        <member name="P:BPUtil.ImageFile.Height">
            <summary>
            Gets the height, in pixels, of the Image.
            </summary>
        </member>
        <member name="M:BPUtil.ImageFile.GetThumbnail(System.Int32,System.Int32)">
            <summary>
            <para>Gets a thumbnail of this image using the exact dimensions specified.</para>
            <para>You will be responsible for disposing the returned Bitmap.</para>
            <para>This method differs from the Image class's built-in GetThumbnailImage method in that it converts transparent pixels to white instead of black.</para>
            </summary>
            <param name="width">Width in pixels of the thumbnail.</param>
            <param name="height">Height in pixels of the thumbnail.</param>
            <returns>A thumbnail of the specified image.</returns>
        </member>
        <member name="M:BPUtil.ImageFile.GetThumbnailSmart(System.Int32,System.Int32)">
            <summary>
            <para>Gets a thumbnail of this image with the specified maximum dimensions.  The returned image will be as large as possible while not exceeding the specified dimensions and without enlarging the original image.</para>
            <para>You will be responsible for disposing the returned ImageFile.</para>
            <para>This method differs from the Image class's built-in GetThumbnailImage method in that it converts transparent pixels to white instead of black.</para>
            </summary>
            <param name="width">Maximum width in pixels of the thumbnail.</param>
            <param name="height">Maximum height in pixels of the thumbnail.</param>
            <returns>A thumbnail of the specified image.</returns>
        </member>
        <member name="M:BPUtil.ImageFile.GetThumbnail(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Gets a thumbnail of the specified image.  You will be responsible for disposing the returned Bitmap.
            This method differs from the Image class's built-in GetThumbnailImage method in that it converts transparent pixels to white instead of black.
            </summary>
            <param name="src">Source image to get a thumbnail of.</param>
            <param name="width">Width in pixels of the thumbnail.</param>
            <param name="height">Height in pixels of the thumbnail.</param>
            <returns>A thumbnail of the specified image.</returns>
        </member>
        <member name="M:BPUtil.ImageFile.SaveToFile(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Saves the image to the file using the specified format. Compared to using the native Image.Save() method, this method should provide better exception messages in the event of file write failure.
            </summary>
            <param name="path">File path</param>
            <param name="format">Format to save in</param>
        </member>
        <member name="M:BPUtil.ImageFile.SaveToStream(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Saves the image to the stream using the specified format. Compared to using the native Image.Save() method, this method should provide better exception messages in the event of stream write failure.
            </summary>
            <param name="stream">Stream to save to</param>
            <param name="format">Format to save in</param>
        </member>
        <member name="M:BPUtil.ImageFile.SaveToBytes(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Saves the image to a new byte array using the specified format. Compared to using the native Image.Save() method, this method should provide better exception messages in the event of stream write failure.
            </summary>
            <param name="format">Format to save in</param>
        </member>
        <member name="M:BPUtil.ImageFile.SaveToFileJpeg(System.String,System.Int64)">
            <summary>
            Saves the image to the file using the specified JPEG quality. Compared to using the native Image.Save() method, this method should provide better exception messages in the event of file write failure.
            </summary>
            <param name="path">File path</param>
            <param name="quality">JPEG quality [0-100]</param>
        </member>
        <member name="M:BPUtil.ImageFile.SaveToStreamJpeg(System.IO.Stream,System.Int64)">
            <summary>
            Saves the image to the stream using the specified JPEG quality. Compared to using the native Image.Save() method, this method should provide better exception messages in the event of write failure.
            </summary>
            <param name="stream">Stream to save to.</param>
            <param name="quality">JPEG quality [0-100]</param>
        </member>
        <member name="M:BPUtil.ImageFile.SaveToBytesJpeg(System.Int64)">
            <summary>
            Saves the image to a new byte array using the specified JPEG quality. Compared to using the native Image.Save() method, this method should provide better exception messages in the event of write failure.
            </summary>
            <param name="quality">JPEG quality [0-100]</param>
        </member>
        <member name="F:BPUtil.ImageExtensions.GiveFullControlToAllUsers">
            <summary>
            If true, all output files written by SaveExt() calls will have "Full Control" permission allowed for the "Users" group.
            This may be helpful for allowing these files to be deleted by web applications running as their app pool identity.
            </summary>
        </member>
        <member name="M:BPUtil.ImageExtensions.InitImageWriteRetryLimit">
            <summary>
            Resets the retry count to 0, allowing (more) image write retries for this thread.
            </summary>
        </member>
        <member name="M:BPUtil.ImageExtensions.SaveExt(System.Drawing.Image,System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Saves the image to the file using the specified format. Compared to using the native Image.Save() method, this method should provide better exception messages in the event of file write failure.
            </summary>
            <param name="img">Image instance</param>
            <param name="path">File path</param>
            <param name="format">Format to save in</param>
        </member>
        <member name="M:BPUtil.ImageExtensions.SaveExt(System.Drawing.Image,System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Saves the image to the file using the specified format. Compared to using the native Image.Save() method, this method should provide better exception messages in the event of file write failure.
            </summary>
            <param name="img">Image instance</param>
            <param name="stream">Stream to save to</param>
            <param name="format">Format to save in</param>
        </member>
        <member name="M:BPUtil.ImageExtensions.SaveExtJpeg(System.Drawing.Image,System.String,System.Int64)">
            <summary>
            Saves the image to the file using the specified JPEG quality. Compared to using the native Image.Save() method, this method should provide better exception messages in the event of file write failure.
            </summary>
            <param name="img">Image instance</param>
            <param name="path">File path</param>
            <param name="quality">JPEG quality [0-100]</param>
        </member>
        <member name="M:BPUtil.ImageExtensions.SaveExtJpeg(System.Drawing.Image,System.IO.Stream,System.Int64)">
            <summary>
            Saves the image to the file using the specified JPEG quality. Compared to using the native Image.Save() method, this method should provide better exception messages in the event of file write failure.
            </summary>
            <param name="img">Image instance</param>
            <param name="stream">Stream to write to</param>
            <param name="quality">JPEG quality [0-100]</param>
        </member>
        <member name="M:BPUtil.ImageExtensions.WriteToFile(System.String,System.Byte[])">
            <summary>
            Attempts to write the data to the path (overwriting existing files), with built-in retry logic.
            </summary>
            <param name="path">File path</param>
            <param name="data">Data to write</param>
        </member>
        <member name="T:BPUtil.IntervalSleeper">
            <summary>
            Helper object for running an action on a predefined interval such as "every one minute".
            </summary>
        </member>
        <member name="F:BPUtil.IntervalSleeper.CancellationResponseTimeMilliseconds">
            <summary>
            The maximum number of milliseconds to sleep between checking cancellation tokens.  Very small values may slightly increase CPU usage.
            </summary>
        </member>
        <member name="M:BPUtil.IntervalSleeper.#ctor(System.Int64)">
            <summary>
            Constructs a new IntervalSleeper and starts the internal stopwatch.
            </summary>
            <param name="CancellationResponseTimeMilliseconds">The maximum number of milliseconds to sleep between checking cancellation tokens.  Very small values may slightly increase CPU usage.</param>
        </member>
        <member name="M:BPUtil.IntervalSleeper.SleepUntil(System.Int64)">
            <summary>
            Sleeps the current thread until the internal stopwatch reaches or exceeds the specified number of milliseconds. Restarts the internal stopwatch just before returning.
            </summary>
            <param name="wakeTimeMilliseconds">The millisecond count which the stopwatch should reach before this method returns.</param>
        </member>
        <member name="M:BPUtil.IntervalSleeper.SleepUntil(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Sleeps the current thread until the internal stopwatch reaches or exceeds the specified number of milliseconds. Restarts the internal stopwatch just before returning.
            </summary>
            <param name="wakeTimeMilliseconds">The millisecond count which the stopwatch should reach before this method returns.</param>
            <param name="cancellationToken">A cancellationToken which can make the sleep end early.</param>
        </member>
        <member name="M:BPUtil.IntervalSleeper.SleepUntil(System.Int64,System.Func{System.Boolean})">
            <summary>
            Sleeps the current thread until the internal stopwatch reaches or exceeds the specified number of milliseconds. Restarts the internal stopwatch just before returning.
            </summary>
            <param name="wakeTimeMilliseconds">The millisecond count which the stopwatch should reach before this method returns.</param>
            <param name="returnTrueIfShouldCancel">A function which returns true if the sleep should be ended early. The thread will be woken every 100ms to call this function.</param>
        </member>
        <member name="T:BPUtil.IO.BasicDataStream">
            <summary>
            A stream you can use to wrap another stream to provide convenient Read and Write functions for various common types.
            </summary>
        </member>
        <member name="M:BPUtil.IO.BasicDataStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the BasicDataStream class by wrapping another stream.
            </summary>
            <param name="stream">The original stream to wrap.</param>
            <param name="leaveOpen">If true, the inner stream will not be closed or disposed when the outer stream is.</param>
        </member>
        <member name="M:BPUtil.IO.BasicDataStream.Write(System.Byte[])">
            <summary>
            Writes a block of bytes to the current stream using data read from a buffer. With this overload, the entire buffer will be written.
            </summary>
            <param name="buffer">The buffer to write data from.</param>
        </member>
        <member name="M:BPUtil.IO.BasicDataStream.WriteUtf8(System.String)">
            <summary>
            Writes the string as UTF8 (no byte order mark).
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.IO.BasicDataStream.WriteUtf8_16(System.String)">
            <summary>
            <para>Writes the length of the string as a 16 bit unsigned integer, then writes the string.</para>
            <para>The string will be encoded as UTF8 with no byte order mark.</para>
            <para>Returns the number of bytes written.</para>
            <para>Throws an exception if the byte array is larger than a 16 bit unsigned integer can hold.</para>
            </summary>
            <param name="str">String to write.</param>
            <exception cref="T:System.ArgumentException">If the string is longer than 65535 characters or bytes.</exception>
        </member>
        <member name="M:BPUtil.IO.BasicDataStream.WriteUtf8_32(System.String)">
            <summary>
            <para>Writes the length of the string as a 32 bit unsigned integer, then writes the string.</para>
            <para>The string will be encoded as UTF8 with no byte order mark.</para>
            <para>Returns the number of bytes written.</para>
            </summary>
            <param name="str">String to write.</param>
        </member>
        <member name="M:BPUtil.IO.BasicDataStream.ReadUtf8_16">
            <summary>
            Reads a UTF8 string (no byte order mark) from the stream, assuming the string's length is prepended as a 16 bit unsigned integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.IO.BasicDataStream.ReadUtf8_32">
            <summary>
            Reads a UTF8 string (no byte order mark) from the stream, assuming the string's length is prepended as a 32 bit unsigned integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.IO.BasicDataStream.ReadNBytes(System.Int32)">
            <summary>
            Reads a specific number of bytes from the stream, returning a byte array.  Ordinary stream.Read operations are not guaranteed to read all the requested bytes.
            </summary>
            <param name="length">The number of bytes to read.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.IO.BasicDataStream.ReadNBytesFromNetworkOrder(System.Int32)">
            <summary>
            Reads a specific number of bytes from the stream, returning a byte array.  Ordinary stream.Read operations are not guaranteed to read all the requested bytes.
            </summary>
            <param name="length">The number of bytes to read.</param>
            <returns></returns>
        </member>
        <member name="P:BPUtil.IO.BasicDataStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:BPUtil.IO.BasicDataStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <value></value>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:BPUtil.IO.BasicDataStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <value></value>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="P:BPUtil.IO.BasicDataStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <value></value>
            <returns>A long value representing the length of the stream in bytes.</returns>
            <exception cref="T:System.NotSupportedException">The base stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:BPUtil.IO.BasicDataStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <value></value>
            <returns>The current position within the stream.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The base stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:BPUtil.IO.BasicDataStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        </member>
        <member name="M:BPUtil.IO.BasicDataStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"></see> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The base stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:BPUtil.IO.BasicDataStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.NotSupportedException">The base stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:BPUtil.IO.UnreadableStream.originalStream">
            <summary>
            The underlying stream (which was passed into the constructor).
            </summary>
        </member>
        <member name="F:BPUtil.IO.UnreadableStream.unreadData">
            <summary>
            Queue of unread data buffers.
            </summary>
        </member>
        <member name="P:BPUtil.IO.UnreadableStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:BPUtil.IO.UnreadableStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <value></value>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:BPUtil.IO.UnreadableStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <value></value>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="P:BPUtil.IO.UnreadableStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <value></value>
            <returns>A long value representing the length of the stream in bytes.</returns>
            <exception cref="T:System.NotSupportedException">The base stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:BPUtil.IO.UnreadableStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <value></value>
            <returns>The current position within the stream.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The base stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:BPUtil.IO.UnreadableStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        </member>
        <member name="M:BPUtil.IO.UnreadableStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"></see> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The base stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:BPUtil.IO.UnreadableStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.NotSupportedException">The base stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:BPUtil.IO.UnreadableStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of offset and count is larger than the buffer length. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.NotSupportedException">The base stream does not support reading. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="M:BPUtil.IO.UnreadableStream.Unread(System.Byte[])">
            <summary>
            Virtually un-does a read operation, allowing the next read operation(s) to read this data as if it was still on the stream.
            </summary>
            <param name="buffer">A data buffer.  This class will keep a reference to this data buffer.  DO NOT modify its contents!</param>
        </member>
        <member name="M:BPUtil.IO.UnreadableStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The base stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.ArgumentException">The sum of offset and count is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="M:BPUtil.IO.MemoryDataStream.#ctor(BPUtil.IO.IDataStream,System.Int32)">
            <summary>
            Initializes a new non-resizable instance of the MemoryDataStream class by reading a specified number of bytes from the provided IDataStream.
            </summary>
            <param name="stream">The IDataStream to copy data from for initialization of the MemoryDataStream.</param>
            <param name="length">The number of bytes to read from the IDataStream.  This will be the size of the new MemoryDataStream.</param>
        </member>
        <member name="M:BPUtil.IO.MemoryDataStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new non-resizable instance of the MemoryDataStream class by reading a specified number of bytes from the provided Stream.
            </summary>
            <param name="stream">The Stream to copy data from for initialization of the MemoryDataStream.</param>
            <param name="length">The number of bytes to read from the Stream.  This will be the size of the new MemoryDataStream.</param>
        </member>
        <member name="M:BPUtil.IO.MemoryDataStream.#ctor(System.Byte[])">
            <summary>
            Initializes a new non-resizable instance of the MemoryDataStream class based on the specified byte array.
            </summary>
            <param name="buffer">The array of unsigned bytes from which to create the current stream.</param>
        </member>
        <member name="M:BPUtil.IO.MemoryDataStream.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the MemoryDataStream class with an expandable capacity initialized as specified.
            </summary>
            <param name="capacity">The initial size of the internal array in bytes.</param>
        </member>
        <member name="M:BPUtil.IO.MemoryDataStream.#ctor">
            <summary>
            Initializes a new instance of the MemoryDataStream class with an expandable capacity initialized to zero.
            </summary>
        </member>
        <member name="M:BPUtil.IO.MemoryDataStream.Write(System.Byte[])">
            <summary>
            Writes a block of bytes to the current stream using data read from a buffer. With this overload, the entire buffer will be written.
            </summary>
            <param name="buffer">The buffer to write data from.</param>
        </member>
        <member name="M:BPUtil.IO.MemoryDataStream.WriteUtf8(System.String)">
            <summary>
            Writes the string as UTF8 (no byte order mark).
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.IO.MemoryDataStream.WriteUtf8_16(System.String)">
            <summary>
            <para>Writes the length of the string as a 16 bit unsigned integer, then writes the string.</para>
            <para>The string will be encoded as UTF8 with no byte order mark.</para>
            <para>Returns the number of bytes written.</para>
            <para>Throws an exception if the byte array is larger than a 16 bit unsigned integer can hold.</para>
            </summary>
            <param name="str">String to write.</param>
            <exception cref="T:System.ArgumentException">If the string is longer than 65535 characters or bytes.</exception>
        </member>
        <member name="M:BPUtil.IO.MemoryDataStream.WriteUtf8_32(System.String)">
            <summary>
            <para>Writes the length of the string as a 32 bit unsigned integer, then writes the string.</para>
            <para>The string will be encoded as UTF8 with no byte order mark.</para>
            <para>Returns the number of bytes written.</para>
            </summary>
            <param name="str">String to write.</param>
        </member>
        <member name="M:BPUtil.IO.MemoryDataStream.ReadUtf8_16">
            <summary>
            Reads a UTF8 string (no byte order mark) from the stream, assuming the string's length is prepended as a 16 bit unsigned integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.IO.MemoryDataStream.ReadUtf8_32">
            <summary>
            Reads a UTF8 string (no byte order mark) from the stream, assuming the string's length is prepended as a 32 bit unsigned integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.IO.MemoryDataStream.ReadNBytes(System.Int32)">
            <summary>
            Reads a specific number of bytes from the stream, returning a byte array.  Ordinary stream.Read operations are not guaranteed to read all the requested bytes.
            </summary>
            <param name="length">The number of bytes to read.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.IO.MemoryDataStream.ReadNBytesFromNetworkOrder(System.Int32)">
            <summary>
            Reads a specific number of bytes from the stream, returning a byte array.  Ordinary stream.Read operations are not guaranteed to read all the requested bytes.
            </summary>
            <param name="length">The number of bytes to read.</param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.MVC.ClientException">
            <summary>
            An error that can/should be shown to the client.  E.g. When an action method is called with invalid arguments.
            </summary>
        </member>
        <member name="F:BPUtil.MVC.MvcJson.SerializeObject">
            <summary>
            <para>Converts an object to a JSON string. Must be set by consumers of the MVC utility prior to using <see cref="T:BPUtil.MVC.JsonResult"/> or <see cref="M:BPUtil.MVC.Controller.Json(System.Object)"/>.</para>
            <para>e.g. MvcJson.SerializeObject = JsonConvert.SerializeObject; MvcJson.DeserializeObject = JsonConvert.DeserializeObject;</para>
            </summary>
        </member>
        <member name="F:BPUtil.MVC.MvcJson.DeserializeObject">
            <summary>
            <para>Converts a JSON string to an object. Must be set by consumers of the MVC utility prior to using <see cref="T:BPUtil.MVC.JsonResult"/> or <see cref="M:BPUtil.MVC.Controller.Json(System.Object)"/>.</para>
            <para>e.g. MvcJson.SerializeObject = JsonConvert.SerializeObject; MvcJson.DeserializeObject = JsonConvert.DeserializeObject;</para>
            </summary>
        </member>
        <member name="P:BPUtil.MVC.ActionResult.Body">
            <summary>
            The response body for an HTTP response. This property may be overridden by derived ActionResult types and should not be assumed to be efficient (it may not be simply backed by a field).
            </summary>
        </member>
        <member name="F:BPUtil.MVC.ActionResult.headers">
            <summary>
            A collection of HTTP headers for an HTTP response.
            </summary>
        </member>
        <member name="P:BPUtil.MVC.ActionResult.ContentType">
            <summary>
            Gets or sets the Content-Type header.
            </summary>
        </member>
        <member name="F:BPUtil.MVC.ActionResult.ResponseStatus">
            <summary>
            The HTTP response status consisting of a 3-digit number optionally followed by one space character and a textual "Reason Phrase".  The Reason Phrase may not contain \r or \n characters. e.g. "200 OK" or "404 Not Found"
            </summary>
        </member>
        <member name="F:BPUtil.MVC.ActionResult.Compress">
            <summary>
            If true, the response may be compressed before being transmitted to the client. Very small results, and any results which end up larger once compressed, will not be transmitted in compressed form.
            </summary>
        </member>
        <member name="M:BPUtil.MVC.ActionResult.#ctor(System.String)">
            <summary>
            Constructs a new ActionResult with the specified ContentType.
            </summary>
            <param name="contentType">The Content-Type header for an HTTP response.</param>
        </member>
        <member name="M:BPUtil.MVC.ActionResult.GetHeaderValue(System.String)">
            <summary>
            Returns the value of the specified header, or null if it is not found (the header may also exist with the value null).
            </summary>
            <param name="name">The header name, case-sensitive.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.MVC.ActionResult.AddOrUpdateHeader(System.String,System.String)">
            <summary>
            Adds or updates the value of the specified header.
            </summary>
            <param name="name">The header name, case-sensitive.</param>
            <param name="value">The header value.</param>
        </member>
        <member name="T:BPUtil.MVC.BinaryResult">
            <summary>
            A result where the body is binary data.
            </summary>
        </member>
        <member name="M:BPUtil.MVC.BinaryResult.#ctor(System.Byte[],System.String,System.Boolean)">
            <summary>
            Constructs a BinaryResult
            </summary>
            <param name="data">The data to send in the response.</param>
            <param name="contentType">The Content-Type of the response.</param>
            <param name="compress">If true, the response should be compressed.</param>
        </member>
        <member name="T:BPUtil.MVC.FileDownloadResult">
            <summary>
            A result where the body is a file download ("Content-Type: application/octet-stream").
            </summary>
        </member>
        <member name="M:BPUtil.MVC.FileDownloadResult.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Constructs a FileDownloadResult from a byte array.
            </summary>
            <param name="data">File data.</param>
            <param name="compress">If true, the response should be compressed.</param>
        </member>
        <member name="M:BPUtil.MVC.FileDownloadResult.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a FileDownloadResult from a file path.  This constructor loads the entire file into memory.
            </summary>
            <param name="filePath">File path. The entire file will be loaded into memory.</param>
            <param name="compress">If true, the response should be compressed.</param>
        </member>
        <member name="T:BPUtil.MVC.JpegImageResult">
            <summary>
            A result where the body is a JPEG image.
            </summary>
        </member>
        <member name="T:BPUtil.MVC.PngImageResult">
            <summary>
            A result where the body is a PNG image.
            </summary>
        </member>
        <member name="M:BPUtil.MVC.PngImageResult.#ctor(System.Byte[])">
            <summary>
            Constructs a PngImageResult where the body is a PNG image in a byte array.
            </summary>
            <param name="imgData">PNG image data.</param>
        </member>
        <member name="T:BPUtil.MVC.StringResult">
            <summary>
            A result where the body is a UTF8-encoded string.
            </summary>
        </member>
        <member name="P:BPUtil.MVC.StringResult.BodyStr">
            <summary>
            The string result. This property may be overridden by derived StringResult types and should not be assumed to be efficient (it may not be simply backed by a field).
            </summary>
        </member>
        <member name="M:BPUtil.MVC.StringResult.#ctor(System.String)">
            <summary>
            Constructs a StringResult where the body is a UTF8-encoded string.
            </summary>
            <param name="contentType">The Content-Type of the response.</param>
        </member>
        <member name="M:BPUtil.MVC.StringResult.#ctor(System.String,System.String)">
            <summary>
            Constructs a StringResult where the body is a UTF8-encoded string.
            </summary>
            <param name="str">The string to send in the response.</param>
            <param name="contentType">The Content-Type of the response.</param>
        </member>
        <member name="T:BPUtil.MVC.PlainTextResult">
            <summary>
            A result where the body is a plain text string.
            </summary>
        </member>
        <member name="M:BPUtil.MVC.PlainTextResult.#ctor(System.String)">
            <summary>
            Constructs a PlainTextResult.
            </summary>
            <param name="str">Plain text string</param>
        </member>
        <member name="T:BPUtil.MVC.EmptyResult">
            <summary>
            A result where the body is an empty plain text string.
            </summary>
        </member>
        <member name="M:BPUtil.MVC.EmptyResult.#ctor">
            <summary>
            Constructs an EmptyResult, which is a PlainTextResult with an empty string.
            </summary>
        </member>
        <member name="T:BPUtil.MVC.ErrorResult">
            <summary>
            A result where the body is a plain-text error message and the response status has a custom value.
            </summary>
        </member>
        <member name="M:BPUtil.MVC.ErrorResult.#ctor(System.String,System.String)">
            <summary>
            Constructs an ErrorResult, which is a PlainTextResult with a custom response status.
            </summary>
            <param name="errorMessage">Plain text error message.</param>
            <param name="responseStatus">HTTP response status.</param>
        </member>
        <member name="T:BPUtil.MVC.ErrorHtmlResult">
            <summary>
            A result where the body is an HTML error message and the response status has a custom value.
            </summary>
        </member>
        <member name="M:BPUtil.MVC.ErrorHtmlResult.#ctor(System.String,System.String)">
            <summary>
            Constructs an ErrorHtmlResult, which is an HtmlResult with a custom response status.
            </summary>
            <param name="errorMessageHtml">Error message with HTML markup.</param>
            <param name="responseStatus">HTTP response status.</param>
        </member>
        <member name="T:BPUtil.MVC.HtmlResult">
            <summary>
            A result where the body is HTML text.
            </summary>
        </member>
        <member name="M:BPUtil.MVC.HtmlResult.#ctor(System.String)">
            <summary>
            Constructs an HtmlResult where the body is text containing HTML markup.
            </summary>
            <param name="html">HTML markup.</param>
        </member>
        <member name="T:BPUtil.MVC.JsonResult">
            <summary>
            A result where the body is JSON text.
            </summary>
        </member>
        <member name="P:BPUtil.MVC.JsonResult.BodyObj">
            <summary>
            The object to serialize as JSON.
            </summary>
        </member>
        <member name="M:BPUtil.MVC.JsonResult.#ctor(System.Object)">
            <summary>
            Constructs a JsonResult where the body is text containing JSON markup.
            </summary>
            <param name="obj">Object to serialize as JSON.</param>
        </member>
        <member name="T:BPUtil.MVC.StatusCodeResult">
            <summary>
            A result where the body is a plain-text error message and the response status has a custom value.
            </summary>
        </member>
        <member name="M:BPUtil.MVC.StatusCodeResult.#ctor(System.String)">
            <summary>
            Constructs an ErrorResult, which is a PlainTextResult with a custom response status.
            </summary>
            <param name="responseStatus">HTTP response status.</param>
        </member>
        <member name="F:BPUtil.MVC.ControllerInfo.ControllerType">
            <summary>
            Type type of Controller-derived class represented by this ControllerInfo.
            </summary>
        </member>
        <member name="F:BPUtil.MVC.ControllerInfo.methodMap">
            <summary>
            A map of ActionResult-returning methods available in the controller.
            </summary>
        </member>
        <member name="M:BPUtil.MVC.ControllerInfo.CallMethod(BPUtil.MVC.RequestContext)">
            <summary>
            Calls the method specified by the request context's ActionName. Tries to map arguments from the URL to parameters defined on the method.
            </summary>
            <param name="context">The request context.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.MVC.ControllerInfo.CallActionMethod(BPUtil.MVC.Controller,System.Reflection.MethodInfo)">
            <summary>
            Calls the specified method on the controller, getting arguments from the controller's Context property.
            </summary>
            <param name="controller">A controller instance.</param>
            <param name="mi">Metadata about the method that is to be called.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.MVC.ControllerInfo.ConvertInputParameters(System.Reflection.ParameterInfo[],System.String[])">
            <summary>
            Converts the specified input arguments to the formats demanded by required parameters.
            </summary>
            <param name="requiredParameters"></param>
            <param name="args"></param>
            <exception cref="T:System.ArgumentException">
            <para>
            Throws ArgumentException if:
            </para>
            <list type="bullet">
            <item>Too many arguments were provided.</item>
            <item>Too few arguments were provided.</item>
            <item>Any of the provided arguments cannot be converted to the required type.</item>
            </list>
            </exception>
            <returns></returns>
        </member>
        <member name="M:BPUtil.MVC.ControllerInfo.ConvertStringToType(System.String,System.Type)">
            <summary>
            Converts a string to a specific type.
            </summary>
            <param name="str">The string to convert. Should not be null.</param>
            <param name="t">The type to convert the string to.</param>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if the string cannot be converted to the required type.</exception>
            <returns></returns>
        </member>
        <member name="M:BPUtil.MVC.ControllerInfo.IsActionMethod(System.Reflection.MethodInfo)">
            <summary>
            Returns true if the specified method is public, not static, and has a return value that can be cast to <see cref="T:BPUtil.MVC.ActionResult"/>.
            </summary>
            <param name="mi">Metadata about the method.</param>
            <returns></returns>
        </member>
        <member name="F:BPUtil.MVC.MVCGlobals.RemoteClientsMaySeeExceptionDetails">
            <summary>
            If false, details of exceptions thrown by Controller Action Methods will be suppressed for connections that originate from a remote host.
            </summary>
        </member>
        <member name="T:BPUtil.MVC.MVCMain">
            <summary>
            A class which grants access to functionality similar to ASP.NET MVC, but very lightweight.
            </summary>
        </member>
        <member name="F:BPUtil.MVC.MVCMain.controllerInfoMap">
            <summary>
            A map of Controller type names to ControllerInfo instances.
            </summary>
        </member>
        <member name="P:BPUtil.MVC.MVCMain.Namespace">
            <summary>
            The Namespace containing the controllers for this instance.
            </summary>
        </member>
        <member name="M:BPUtil.MVC.MVCMain.#ctor(System.Reflection.Assembly,System.String,System.Action{BPUtil.MVC.RequestContext,System.Exception})">
            <summary>
            Creates a new API from a namespace.
            </summary>
            <param name="assembly">The assembly where the API controller classes are located. e.g. Assembly.GetExecutingAssembly()</param>
            <param name="namespaceStr">The namespace containing all the API controller classes. e.g. typeof(SomeAPIHandler).Namespace</param>
            <param name="ErrorHandler">A function accepting a RequestContext and an Exception for logging purposes.</param>
        </member>
        <member name="M:BPUtil.MVC.MVCMain.ProcessRequest(BPUtil.SimpleHttp.HttpProcessor,System.String)">
            <summary>
            Processes a request from a client, then returns true. Returns false if the request could not be processed. Exceptions thrown by a controller are caught here.
            </summary>
            <param name="httpProcessor">The HttpProcessor handling this request.</param>
            <param name="requestPath">(Optional) The path requested by the client, with leading '/' removed. (defaults to httpProcessor.requestedPage)</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.MVC.MVCMain.IsController(System.Type)">
            <summary>
            Returns true if the specified type is a controller we can create an instance of.  It must be in <see cref="P:BPUtil.MVC.MVCMain.Namespace"/> (specified in constructor).
            </summary>
            <param name="t">The type which might be a controller we can create an instance of.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.MVC.MVCMain.GenerateErrorPage(BPUtil.MVC.RequestContext,System.Exception)">
            <summary>
            Returns an error page showing details of an exception that was thrown.
            </summary>
            <param name="context"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.MVC.Controller">
            <summary>
            Base class for a Controller roughly equivalent to those available in ASP.NET MVC.
            The controller should define at least one ActionMethod.  An ActionMethod is a public method which returns an <see cref="T:BPUtil.MVC.ActionResult"/> (or a class derived from <see cref="T:BPUtil.MVC.ActionResult"/>).  The controller must not define multiple ActionMethods with the same name.
            </summary>
        </member>
        <member name="P:BPUtil.MVC.Controller.Context">
            <summary>
            The context of this request.
            </summary>
        </member>
        <member name="F:BPUtil.MVC.Controller.ViewData">
            <summary>
            A container which contains data accessible from view pages.
            </summary>
        </member>
        <member name="F:BPUtil.MVC.Controller.ViewBag">
            <summary>
            A wrapper around ViewData which can have key/value pairs added and read as dynamic properties.
            </summary>
        </member>
        <member name="M:BPUtil.MVC.Controller.OnAuthorization(BPUtil.MVC.ActionResult@)">
            <summary>
            When overridden in a derived class, this method may allow or disallow access to the controller.  This is called before the client-specified action method is called.
            </summary>
            <param name="result">If authorization fails, this should be set to an appropriate result such as an HTTP 403 Forbidden response. If null, authorization will be assumed to have succeeded.</param>
        </member>
        <member name="M:BPUtil.MVC.Controller.PreprocessResult(BPUtil.MVC.ActionResult)">
            <summary>
            When overridden in a derived class, this method may modify any ActionResult before it is sent to the client.
            </summary>
        </member>
        <member name="M:BPUtil.MVC.Controller.Binary(System.Byte[],System.String,System.Boolean)">
            <summary>
            Returns a BinaryResult where the body is binary data.
            </summary>
            <param name="data">The data to send in the response.</param>
            <param name="contentType">The Content-Type of the response.</param>
            <param name="compress">If true, the response should be compressed.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.MVC.Controller.FileDownload(System.Byte[],System.Boolean)">
            <summary>
            Returns a FileDownloadResult constructed from a byte array.
            </summary>
            <param name="data">File data.</param>
            <param name="compress">If true, the response should be compressed.</param>
        </member>
        <member name="M:BPUtil.MVC.Controller.FileDownload(System.String,System.Boolean)">
            <summary>
            Returns a FileDownloadResult constructed from a file path.  Loads the entire file into memory. To write a file more efficiently, you should write it yourself using the httpProcessor and then return a null ActionResult.
            </summary>
            <param name="filePath">File path. The entire file will be loaded into memory.</param>
            <param name="compress">If true, the response should be compressed.</param>
        </member>
        <member name="M:BPUtil.MVC.Controller.JpegImage(System.Byte[])">
            <summary>
            Returns a result where the body is a Jpeg image.
            </summary>
            <param name="imgData">Jpeg image data.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.MVC.Controller.PngImage(System.Byte[])">
            <summary>
            Returns a result where the body is a PNG image.
            </summary>
            <param name="imgData">PNG image data.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.MVC.Controller.String(System.String,System.String)">
            <summary>
            Returns a StringResult where the body is a UTF8-encoded string.
            </summary>
            <param name="str">The string to send in the response.</param>
            <param name="contentType">The Content-Type of the response.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.MVC.Controller.PlainText(System.String)">
            <summary>
            Returns a PlainTextResult.
            </summary>
            <param name="str">Plain text string</param>
        </member>
        <member name="M:BPUtil.MVC.Controller.Empty">
            <summary>
            Returns an EmptyResult, which is a PlainTextResult with an empty string.
            </summary>
        </member>
        <member name="M:BPUtil.MVC.Controller.Error(System.String,System.String)">
            <summary>
            Returns an ErrorResult, which is a PlainTextResult with a custom response status.
            </summary>
            <param name="errorMessage">Plain text error message.</param>
            <param name="responseStatus">HTTP response status.</param>
        </member>
        <member name="M:BPUtil.MVC.Controller.ErrorHtml(System.String,System.String)">
            <summary>
            Returns an ErrorHtmlResult, which is an HtmlResult with a custom response status.
            </summary>
            <param name="errorMessageHtml">Error message with HTML markup.</param>
            <param name="responseStatus">HTTP response status.</param>
        </member>
        <member name="M:BPUtil.MVC.Controller.Html(System.String)">
            <summary>
            Returns an HtmlResult where the body is text containing HTML markup.
            </summary>
            <param name="html">HTML markup.</param>
        </member>
        <member name="M:BPUtil.MVC.Controller.Json(System.Object)">
            <summary>
            Returns a JsonResult where the body is text containing JSON markup.
            </summary>
            <param name="obj">Object to be returned as JSON markup.</param>
        </member>
        <member name="M:BPUtil.MVC.Controller.StatusCode(System.String)">
            <summary>
            Returns a StatusCodeResult with a custom response status.
            </summary>
            <param name="responseStatus">HTTP response status.</param>
        </member>
        <member name="M:BPUtil.MVC.Controller.View(System.String)">
            <summary>
            Returns a ViewResult created from the specified text file.  This controller instance's <see cref="F:BPUtil.MVC.Controller.ViewData"/> will be used for view processing.
            </summary>
            <param name="filePath">Path to a text file containing the view content.</param>
        </member>
        <member name="F:BPUtil.MVC.RequestContext.Path">
            <summary>
            The "path" part of the URL.  E.g. for the url "Articles/Science/Moon.html?search=crater" the "path" part is "Articles/Science/Moon.html".
            </summary>
        </member>
        <member name="F:BPUtil.MVC.RequestContext.Query">
            <summary>
            The "query" part of the URL.  E.g. for the url "Articles/Science/Moon.html?search=crater" the "query" part is "search=crater".
            </summary>
        </member>
        <member name="F:BPUtil.MVC.RequestContext.ControllerName">
            <summary>
            Name of the controller as requested.
            </summary>
        </member>
        <member name="P:BPUtil.MVC.RequestContext.ActionName">
            <summary>
            Action method name that was requested.
            </summary>
        </member>
        <member name="P:BPUtil.MVC.RequestContext.ActionArgs">
            <summary>
            Array of arguments (separated by '/' characters in the original path string).
            </summary>
        </member>
        <member name="P:BPUtil.MVC.RequestContext.ResponseHeaders">
            <summary>
            Gets a list of additional headers to include in the response. Getting the list is not thread safe, and using the list is also not thread safe.
            </summary>
        </member>
        <member name="M:BPUtil.MVC.RequestContext.AddResponseHeader(System.String,System.String)">
            <summary>
            Adds a header to the ResponseHeaders list.  This is simply a convenience method.
            </summary>
            <param name="key">Header name.</param>
            <param name="value">Header value.</param>
        </member>
        <member name="M:BPUtil.MVC.RequestContext.AssumeActionNameIsArgumentForIndex">
            <summary>
            Moves ActionName into the ActionArgs array as the new first element, and replaces ActionName with "Index".
            </summary>
        </member>
        <member name="T:BPUtil.MVC.ViewBagContainer">
            <summary>
            A dynamic wrapper around ViewDataContainer. The getter returns null for all keys that are not found.
            </summary>
        </member>
        <member name="T:BPUtil.MVC.ViewDataContainer">
            <summary>
            A thread-safe collection of string key/value pairs.
            </summary>
        </member>
        <member name="M:BPUtil.MVC.ViewDataContainer.Set(System.String,System.String)">
            <summary>
            Sets the specified key/value pair.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value. If null, the key is removed from the collection.</param>
        </member>
        <member name="M:BPUtil.MVC.ViewDataContainer.Get(System.String)">
            <summary>
            <para>Retrieves the value with the specified key.</para>
            <para>
            Returns null if the key is not found, and also if the stored value was null. To differentiate between the cases, use <see cref="M:BPUtil.MVC.ViewDataContainer.TryGet(System.String,System.String@)"/>.
            </para>
            </summary>
            <param name="key">Key</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.MVC.ViewDataContainer.TryGet(System.String,System.String@)">
            <summary>
            Tries to return the value with the specified key. Returns true if successful, false if the key was not found.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <returns>True if the key was found.</returns>
        </member>
        <member name="M:BPUtil.MVC.ViewDataContainer.Delete(System.String)">
            <summary>
            Deletes the specified key (and its value) from the collection, returning true if an item was deleted.
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="T:BPUtil.MVC.ViewResult">
            <summary>
            A result which parses a text file and replaces specially-tagged expressions with strings from the controller's ViewData.
            The tagging format is similar to ASP.NET razor pages where code is prefixed with '@' characters.  Literal '@' characters may be escaped by another '@' character.
            </summary>
        </member>
        <member name="M:BPUtil.MVC.ViewResult.#ctor">
            <summary>
            Constructs an empty ViewResult. You should call ProcessView on this instance.
            </summary>
        </member>
        <member name="M:BPUtil.MVC.ViewResult.#ctor(System.String,BPUtil.MVC.ViewDataContainer)">
            <summary>
            Contructs a ViewResult from the specified file.
            </summary>
            <param name="filePath">Path to a text file containing the view content.</param>
            <param name="ViewData">A ViewDataContainer containing values for expressions found within the view.</param>
        </member>
        <member name="M:BPUtil.MVC.ViewResult.ProcessView(System.String,BPUtil.MVC.ViewDataContainer)">
            <summary>
            Processes the specified text as a view and sets this result body. Do not call this unless the constructor you used says to do so.
            </summary>
            <param name="viewText">The view's text.</param>
            <param name="ViewData">A ViewDataContainer containing values for expressions found within the view.</param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.NativeWin.Admin">
            <summary>
            Provides static methods for determining if the current process is elevated and for starting processes as administrator (elevated).
            </summary>
        </member>
        <member name="M:BPUtil.NativeWin.Admin.IsRunningAsAdmin">
            <summary>
            Returns true if the current process is elevated (running as administrator).
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.NativeWin.Admin.StartSelfAsAdmin(System.String)">
            <summary>
            Attempts to start another instance of the current process as administrator, probably showing a UAC prompt. Returns true if the process starts successfully.
            </summary>
            <param name="args">Optional arguments to pass to the process.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.NativeWin.Admin.StartAsAdmin(System.String,System.String,System.String)">
            <summary>
            Attempts to start a process as administrator, probably showing a UAC prompt. Returns true if the process starts successfully.
            </summary>
            <param name="filePath">Path to the executable.</param>
            <param name="args">Optional arguments to pass to the process.</param>
            <param name="workingDirectory">Optional working directory to start the process with.</param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.NativeWin.AudioController.AudioManager">
            <summary>
            BPUtil got this from https://gist.githubusercontent.com/sverrirs/d099b34b7f72bb4fb386/raw/b6f3cf3735ea5c067221717a70e9518862ff583f/AudioManager.cs
            
            It is not entirely trusted to be stable.
            
            Controls audio using the Windows CoreAudio API
            from: http://stackoverflow.com/questions/14306048/controling-volume-mixer
            and: http://netcoreaudio.codeplex.com/
            </summary>
        </member>
        <member name="M:BPUtil.NativeWin.AudioController.AudioManager.GetMasterVolume">
            <summary>
            Gets the current master volume in scalar values (percentage)
            </summary>
            <returns>-1 in case of an error, if successful the value will be between 0 and 100</returns>
        </member>
        <member name="M:BPUtil.NativeWin.AudioController.AudioManager.GetMasterVolumeMute">
            <summary>
            Gets the mute state of the master volume. 
            While the volume can be muted the <see cref="M:BPUtil.NativeWin.AudioController.AudioManager.GetMasterVolume"/> will still return the pre-muted volume value.
            </summary>
            <returns>false if not muted, true if volume is muted</returns>
        </member>
        <member name="M:BPUtil.NativeWin.AudioController.AudioManager.SetMasterVolume(System.Single)">
            <summary>
            Sets the master volume to a specific level
            </summary>
            <param name="newLevel">Value between 0 and 100 indicating the desired scalar value of the volume</param>
        </member>
        <member name="M:BPUtil.NativeWin.AudioController.AudioManager.StepMasterVolume(System.Single)">
            <summary>
            Increments or decrements the current volume level by the [stepAmount].
            </summary>
            <param name="stepAmount">Value between -100 and 100 indicating the desired step amount. Use negative numbers to decrease
            the volume and positive numbers to increase it.</param>
            <returns>the new volume level assigned, or -1 if failed.</returns>
        </member>
        <member name="M:BPUtil.NativeWin.AudioController.AudioManager.SetMasterVolumeMute(System.Boolean)">
            <summary>
            Mute or unmute the master volume. Returns true if successful.
            </summary>
            <param name="isMuted">true to mute the master volume, false to unmute</param>
        </member>
        <member name="M:BPUtil.NativeWin.AudioController.AudioManager.ToggleMasterVolumeMute">
            <summary>
            Switches between the master volume mute states depending on the current state
            </summary>
            <returns>the current mute state, true if the volume was muted, false if unmuted</returns>
        </member>
        <member name="M:BPUtil.NativeWin.AudioController.IAudioEndpointVolume.GetChannelCount(System.UInt32@)">
            <summary>
            Gets a count of the channels in the audio stream.
            </summary>
            <param name="channelCount">The number of channels.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:BPUtil.NativeWin.AudioController.IAudioEndpointVolume.SetMasterVolumeLevel(System.Single,System.Guid)">
            <summary>
            Sets the master volume level of the audio stream, in decibels.
            </summary>
            <param name="level">The new master volume level in decibels.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:BPUtil.NativeWin.AudioController.IAudioEndpointVolume.SetMasterVolumeLevelScalar(System.Single,System.Guid)">
            <summary>
            Sets the master volume level, expressed as a normalized, audio-tapered value.
            </summary>
            <param name="level">The new master volume level expressed as a normalized value between 0.0 and 1.0.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:BPUtil.NativeWin.AudioController.IAudioEndpointVolume.GetMasterVolumeLevel(System.Single@)">
            <summary>
            Gets the master volume level of the audio stream, in decibels.
            </summary>
            <param name="level">The volume level in decibels.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:BPUtil.NativeWin.AudioController.IAudioEndpointVolume.GetMasterVolumeLevelScalar(System.Single@)">
            <summary>
            Gets the master volume level, expressed as a normalized, audio-tapered value.
            </summary>
            <param name="level">The volume level expressed as a normalized value between 0.0 and 1.0.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:BPUtil.NativeWin.AudioController.IAudioEndpointVolume.SetChannelVolumeLevel(System.UInt32,System.Single,System.Guid)">
            <summary>
            Sets the volume level, in decibels, of the specified channel of the audio stream.
            </summary>
            <param name="channelNumber">The channel number.</param>
            <param name="level">The new volume level in decibels.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:BPUtil.NativeWin.AudioController.IAudioEndpointVolume.SetChannelVolumeLevelScalar(System.UInt32,System.Single,System.Guid)">
            <summary>
            Sets the normalized, audio-tapered volume level of the specified channel in the audio stream.
            </summary>
            <param name="channelNumber">The channel number.</param>
            <param name="level">The new master volume level expressed as a normalized value between 0.0 and 1.0.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:BPUtil.NativeWin.AudioController.IAudioEndpointVolume.GetChannelVolumeLevel(System.UInt32,System.Single@)">
            <summary>
            Gets the volume level, in decibels, of the specified channel in the audio stream.
            </summary>
            <param name="channelNumber">The zero-based channel number.</param>
            <param name="level">The volume level in decibels.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:BPUtil.NativeWin.AudioController.IAudioEndpointVolume.GetChannelVolumeLevelScalar(System.UInt32,System.Single@)">
            <summary>
            Gets the normalized, audio-tapered volume level of the specified channel of the audio stream.
            </summary>
            <param name="channelNumber">The zero-based channel number.</param>
            <param name="level">The volume level expressed as a normalized value between 0.0 and 1.0.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:BPUtil.NativeWin.AudioController.IAudioEndpointVolume.SetMute(System.Boolean,System.Guid)">
            <summary>
            Sets the muting state of the audio stream.
            </summary>
            <param name="isMuted">True to mute the stream, or false to unmute the stream.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:BPUtil.NativeWin.AudioController.IAudioEndpointVolume.GetMute(System.Boolean@)">
            <summary>
            Gets the muting state of the audio stream.
            </summary>
            <param name="isMuted">The muting state. True if the stream is muted, false otherwise.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:BPUtil.NativeWin.AudioController.IAudioEndpointVolume.GetVolumeStepInfo(System.UInt32@,System.UInt32@)">
            <summary>
            Gets information about the current step in the volume range.
            </summary>
            <param name="step">The current zero-based step index.</param>
            <param name="stepCount">The total number of steps in the volume range.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:BPUtil.NativeWin.AudioController.IAudioEndpointVolume.VolumeStepUp(System.Guid)">
            <summary>
            Increases the volume level by one step.
            </summary>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:BPUtil.NativeWin.AudioController.IAudioEndpointVolume.VolumeStepDown(System.Guid)">
            <summary>
            Decreases the volume level by one step.
            </summary>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:BPUtil.NativeWin.AudioController.IAudioEndpointVolume.QueryHardwareSupport(System.UInt32@)">
            <summary>
            Queries the audio endpoint device for its hardware-supported functions.
            </summary>
            <param name="hardwareSupportMask">A hardware support mask that indicates the capabilities of the endpoint.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:BPUtil.NativeWin.AudioController.IAudioEndpointVolume.GetVolumeRange(System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the volume range of the audio stream, in decibels.
            </summary>
            <param name="volumeMin">The minimum volume level in decibels.</param>
            <param name="volumeMax">The maximum volume level in decibels.</param>
            <param name="volumeStep">The volume increment level in decibels.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="T:BPUtil.NativeWin.Impersonator">
            <summary>
            <para>
            FROM https://www.codeproject.com/Articles/10090/A-small-C-Class-for-impersonating-a-User
            </para>
            Impersonation of a user. Allows to execute code under another
            user context.
            Please note that the account that instantiates the Impersonator class
            needs to have the 'Act as part of operating system' privilege set.
            </summary>
            <remarks>	
            This class is based on the information in the Microsoft knowledge base
            article http://support.microsoft.com/default.aspx?scid=kb;en-us;Q306158
            
            Encapsulate an instance into a using-directive like e.g.:
            
            	...
            	using ( new Impersonator( "myUsername", "myDomainname", "myPassword" ) )
            	{
            		...
            		[code that executes under the new context]
            		...
            	}
            	...
            
            Please contact the author Uwe Keim (mailto:uwe.keim@zeta-software.de)
            for questions regarding this class.
            </remarks>
        </member>
        <member name="M:BPUtil.NativeWin.Impersonator.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor. Starts the impersonation with the given credentials.
            Please note that the account that instantiates the Impersonator class
            needs to have the 'Act as part of operating system' privilege set.
            </summary>
            <param name="userName">The name of the user to act as.</param>
            <param name="domainName">The domain name of the user to act as.</param>
            <param name="password">The password of the user to act as.</param>
        </member>
        <member name="M:BPUtil.NativeWin.Impersonator.ImpersonateValidUser(System.String,System.String,System.String)">
            <summary>
            Does the actual impersonation.
            </summary>
            <param name="userName">The name of the user to act as.</param>
            <param name="domain">The domain name of the user to act as.</param>
            <param name="password">The password of the user to act as.</param>
        </member>
        <member name="M:BPUtil.NativeWin.Impersonator.UndoImpersonation">
            <summary>
            Reverts the impersonation.
            </summary>
        </member>
        <member name="T:BPUtil.NativeWin.Mouse">
            <summary>
            Offers mouse-related methods.
            </summary>
        </member>
        <member name="M:BPUtil.NativeWin.Mouse.SetCursorPos(System.Int32,System.Int32)">
            <summary>
            Sets the mouse position to a screen coordinate.
            </summary>
            <param name="x">Screen coordinate X</param>
            <param name="y">Screen coordinate Y</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.NativeWin.Mouse.MoveCursor(System.Int32,System.Int32)">
            <summary>
            Moves the mouse cursor the specified amount. This method is capable of waking a monitor from sleep.
            </summary>
            <param name="dx">X pixel offset from current position.</param>
            <param name="dy">Y pixel offset from current position.</param>
        </member>
        <member name="M:BPUtil.NativeWin.LastInput.GetLastInputAgeMs">
            <summary>
            Returns the approxmate age in milliseconds of the last user input.
            </summary>
            <returns>The approxmate age in milliseconds of the last user input.</returns>
        </member>
        <member name="M:BPUtil.NativeWin.LastInput.GetLastInputTime">
            <summary>
            Returns the approxmate time when the last user input occurred.
            </summary>
            <returns>The approxmate time when the last user input occurred.</returns>
        </member>
        <member name="T:BPUtil.NativeWin.SingleInstance">
            <summary>
            Enforces a single instance.
            </summary>
            <remarks>
            This is where the magic happens.
            Start() tries to create a mutex.
            If it detects that another instance is already using the mutex, then it returns FALSE.
            Otherwise it returns TRUE.
            (Notice that a GUID is used for the mutex name, which is a little better than using the application name.)
            If another instance is detected, then you can use ShowFirstInstance() to show it
            (which will work as long as you override WndProc as shown above).
            ShowFirstInstance() broadcasts a message to all windows.
            The message is WM_SHOWFIRSTINSTANCE.
            (Notice that a GUID is used for WM_SHOWFIRSTINSTANCE.
            That allows you to reuse this code in multiple applications without getting
            strange results when you run them all at the same time.)
            
            From http://www.codeproject.com/KB/cs/SingleInstanceAppMutex.aspx
            
            Modified by bp2008
            </remarks>
        </member>
        <member name="F:BPUtil.NativeWin.SingleInstance.Local">
            <summary>
            If true, this class will allow one instance per desktop session.  If false, only one instance is allowed globally.
            </summary>
        </member>
        <member name="M:BPUtil.NativeWin.SingleInstance.Start">
            <summary>
            Attempts to own a mutex that enforces that this process is the only running instance of this application. Returns true if successful, or false if another process owns the mutex.
            If Start returns true, be sure to call Stop before the application exits.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.NativeWin.SingleInstance.ShowFirstInstance">
            <summary>
            Shows the first running instance of the current application.
            </summary>
        </member>
        <member name="M:BPUtil.NativeWin.SingleInstance.Stop">
            <summary>
            Releases the mutex that enforces that this process is the only running instance of this application.
            </summary>
        </member>
        <member name="M:BPUtil.NativeWin.WinConsole.Initialize(System.Boolean)">
            <summary>
            Un-redirects the console output of a program and allocates a console if necessary. Available only on Windows.
            </summary>
            <param name="alwaysCreateNewConsole">If false, we attempt to attach to a pre-existing console, but fall back to allocating a new one.  If true, we simply allocate the new console.</param>
        </member>
        <member name="M:BPUtil.NativeWin.WinConsole.GetStdHandle(System.UInt32)">
            <summary>
            Gets the handle for the specified standard device (standard input, standard output, or standard error).
            </summary>
            <param name="nStdHandle">The standard device. This parameter can be one of the following values: <see cref="F:BPUtil.NativeWin.WinConsole.STD_INPUT"/>, <see cref="F:BPUtil.NativeWin.WinConsole.STD_OUTPUT"/>, <see cref="F:BPUtil.NativeWin.WinConsole.STD_ERROR"/>.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.NativeWin.WinConsole.SetStdHandle(System.UInt32,System.IntPtr)">
            <summary>
            Sets the handle for the specified standard device (standard input, standard output, or standard error).
            </summary>
            <param name="nStdHandle">The standard device for which the handle is to be set. This parameter can be one of the following values: <see cref="F:BPUtil.NativeWin.WinConsole.STD_INPUT"/>, <see cref="F:BPUtil.NativeWin.WinConsole.STD_OUTPUT"/>, <see cref="F:BPUtil.NativeWin.WinConsole.STD_ERROR"/>.</param>
            <param name="handle">The handle for the standard device.</param>
        </member>
        <member name="F:BPUtil.NativeWin.WinConsole.STD_INPUT">
            <summary>
            Represents the Standard Input Stream.
            </summary>
        </member>
        <member name="F:BPUtil.NativeWin.WinConsole.STD_OUTPUT">
            <summary>
            Represents the Standard Output Stream.
            </summary>
        </member>
        <member name="F:BPUtil.NativeWin.WinConsole.STD_ERROR">
            <summary>
            Represents the Standard Error Stream.
            </summary>
        </member>
        <member name="M:BPUtil.NativeWin.NativeMethods.CreateCompatibleBitmap(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Creates a bitmap compatible with the device that is associated with the specified device context.
            </summary>
            <param name="hdc">A handle to a device context.</param>
            <param name="nWidth">The bitmap width, in pixels.</param>
            <param name="nHeight">The bitmap height, in pixels.</param>
            <returns>If the function succeeds, the return value is a handle to the compatible bitmap (DDB). If the function fails, the return value is <see cref="F:System.IntPtr.Zero"/>.</returns>
        </member>
        <member name="M:BPUtil.NativeWin.NativeMethods.GetDIBits(System.IntPtr,System.IntPtr,System.UInt32,System.UInt32,System.Byte[],BPUtil.NativeWin.NativeMethods.BITMAPINFO@,BPUtil.NativeWin.NativeMethods.DIB_Color_Mode)">
            <summary>
                   Retrieves the bits of the specified compatible bitmap and copies them into a buffer as a DIB using the specified format.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="hbmp">A handle to the bitmap. This must be a compatible bitmap (DDB).</param>
            <param name="uStartScan">The first scan line to retrieve.</param>
            <param name="cScanLines">The number of scan lines to retrieve.</param>
            <param name="lpvBits">A pointer to a buffer to receive the bitmap data. If this parameter is <see cref="F:System.IntPtr.Zero"/>, the function passes the dimensions and format of the bitmap to the <see cref="T:BPUtil.NativeWin.NativeMethods.BITMAPINFO"/> structure pointed to by the <paramref name="lpbi"/> parameter.</param>
            <param name="lpbi">A pointer to a <see cref="T:BPUtil.NativeWin.NativeMethods.BITMAPINFO"/> structure that specifies the desired format for the DIB data.</param>
            <param name="uUsage">The format of the bmiColors member of the <see cref="T:BPUtil.NativeWin.NativeMethods.BITMAPINFO"/> structure. It must be one of the following values.</param>
            <returns>If the lpvBits parameter is non-NULL and the function succeeds, the return value is the number of scan lines copied from the bitmap.
            If the lpvBits parameter is NULL and GetDIBits successfully fills the <see cref="T:BPUtil.NativeWin.NativeMethods.BITMAPINFO"/> structure, the return value is nonzero.
            If the function fails, the return value is zero.
            This function can return the following value: ERROR_INVALID_PARAMETER (87 (0×57))</returns>
        </member>
        <member name="T:BPUtil.NativeWin.NativeMethods.BITMAP">
            <summary>
            The BITMAP structure defines the type, width, height, color format, and bit values of a bitmap.
            </summary>
        </member>
        <member name="F:BPUtil.NativeWin.NativeMethods.BITMAP.bmType">
            <summary>
            The bitmap type. This member must be zero.
            </summary>
        </member>
        <member name="F:BPUtil.NativeWin.NativeMethods.BITMAP.bmWidth">
            <summary>
            The width, in pixels, of the bitmap. The width must be greater than zero.
            </summary>
        </member>
        <member name="F:BPUtil.NativeWin.NativeMethods.BITMAP.bmHeight">
            <summary>
            The height, in pixels, of the bitmap. The height must be greater than zero.
            </summary>
        </member>
        <member name="F:BPUtil.NativeWin.NativeMethods.BITMAP.bmWidthBytes">
            <summary>
            The number of bytes in each scan line. This value must be divisible by 2, because the system assumes that the bit 
            values of a bitmap form an array that is word aligned.
            </summary>
        </member>
        <member name="F:BPUtil.NativeWin.NativeMethods.BITMAP.bmPlanes">
            <summary>
            The count of color planes.
            </summary>
        </member>
        <member name="F:BPUtil.NativeWin.NativeMethods.BITMAP.bmBitsPixel">
            <summary>
            The number of bits required to indicate the color of a pixel.
            </summary>
        </member>
        <member name="F:BPUtil.NativeWin.NativeMethods.BITMAP.bmBits">
            <summary>
            A pointer to the location of the bit values for the bitmap. The bmBits member must be a pointer to an array of 
            character (1-byte) values.
            </summary>
        </member>
        <member name="M:BPUtil.NativeWin.NativeMethods.GetThreadDesktop(System.UInt32)">
            <summary>
            Retrieves a handle to the desktop assigned to the specified thread.
            </summary>
            <param name="dwThread">[in] Handle to the thread for which to return the desktop handle.</param>
            <returns>If the function succeeds, the return value is a handle to the 
            desktop associated with the specified thread. 
            If the function fails, the return value is NULL.</returns>
        </member>
        <member name="M:BPUtil.NativeWin.NativeMethods.SetThreadDesktop(System.IntPtr)">
            <summary>
            Assigns the specified desktop to the calling thread. 
            All subsequent operations on the desktop use the access rights granted to the desktop.
            </summary>
            <param name="hDesktop">[in] Handle to the desktop to be assigned to the calling thread.</param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. </returns>
        </member>
        <member name="M:BPUtil.NativeWin.NativeMethods.OpenInputDesktop(System.UInt32,System.Boolean,System.UInt32)">
            <summary>
            Opens the desktop that receives user input.
            </summary>
            <param name="dwFlags">[in] This parameter can be zero or the following value.</param>
            <param name="fInherit">[in] If this value is TRUE, processes created by this process will inherit the handle.Otherwise, the processes do not inherit this handle.</param>
            <param name="dwDesiredAccess">[in] The access to the desktop.</param>
            <returns>If the function succeeds, the return value is a handle to the desktop that receives user input. When you are finished using the handle, call the CloseDesktop function to close it.
            If the function fails, the return value is NULL. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:BPUtil.NativeWin.NativeMethods.CloseDesktop(System.IntPtr)">
            <summary>
            Closes an open handle to a desktop object.
            </summary>
            <param name="hDesktop">[in] Handle to the desktop to be closed.</param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. </returns>
        </member>
        <member name="F:BPUtil.NativeWin.NativeMethods.WindowShowStyle.Hide">
            <summary>Hides the window and activates another window.</summary>
            <remarks>See SW_HIDE</remarks>
        </member>
        <member name="F:BPUtil.NativeWin.NativeMethods.WindowShowStyle.ShowNormal">
            <summary>Activates and displays a window. If the window is minimized 
            or maximized, the system restores it to its original size and 
            position. An application should specify this flag when displaying 
            the window for the first time.</summary>
            <remarks>See SW_SHOWNORMAL</remarks>
        </member>
        <member name="F:BPUtil.NativeWin.NativeMethods.WindowShowStyle.ShowMinimized">
            <summary>Activates the window and displays it as a minimized window.</summary>
            <remarks>See SW_SHOWMINIMIZED</remarks>
        </member>
        <member name="F:BPUtil.NativeWin.NativeMethods.WindowShowStyle.ShowMaximized">
            <summary>Activates the window and displays it as a maximized window.</summary>
            <remarks>See SW_SHOWMAXIMIZED</remarks>
        </member>
        <member name="F:BPUtil.NativeWin.NativeMethods.WindowShowStyle.Maximize">
            <summary>Maximizes the specified window.</summary>
            <remarks>See SW_MAXIMIZE</remarks>
        </member>
        <member name="F:BPUtil.NativeWin.NativeMethods.WindowShowStyle.ShowNormalNoActivate">
            <summary>Displays a window in its most recent size and position. 
            This value is similar to "ShowNormal", except the window is not 
            actived.</summary>
            <remarks>See SW_SHOWNOACTIVATE</remarks>
        </member>
        <member name="F:BPUtil.NativeWin.NativeMethods.WindowShowStyle.Show">
            <summary>Activates the window and displays it in its current size 
            and position.</summary>
            <remarks>See SW_SHOW</remarks>
        </member>
        <member name="F:BPUtil.NativeWin.NativeMethods.WindowShowStyle.Minimize">
            <summary>Minimizes the specified window and activates the next 
            top-level window in the Z order.</summary>
            <remarks>See SW_MINIMIZE</remarks>
        </member>
        <member name="F:BPUtil.NativeWin.NativeMethods.WindowShowStyle.ShowMinNoActivate">
            <summary>Displays the window as a minimized window. This value is 
            similar to "ShowMinimized", except the window is not activated.</summary>
            <remarks>See SW_SHOWMINNOACTIVE</remarks>
        </member>
        <member name="F:BPUtil.NativeWin.NativeMethods.WindowShowStyle.ShowNoActivate">
            <summary>Displays the window in its current size and position. This 
            value is similar to "Show", except the window is not activated.</summary>
            <remarks>See SW_SHOWNA</remarks>
        </member>
        <member name="F:BPUtil.NativeWin.NativeMethods.WindowShowStyle.Restore">
            <summary>Activates and displays the window. If the window is 
            minimized or maximized, the system restores it to its original size 
            and position. An application should specify this flag when restoring 
            a minimized window.</summary>
            <remarks>See SW_RESTORE</remarks>
        </member>
        <member name="F:BPUtil.NativeWin.NativeMethods.WindowShowStyle.ShowDefault">
            <summary>Sets the show state based on the SW_ value specified in the 
            STARTUPINFO structure passed to the CreateProcess function by the 
            program that started the application.</summary>
            <remarks>See SW_SHOWDEFAULT</remarks>
        </member>
        <member name="F:BPUtil.NativeWin.NativeMethods.WindowShowStyle.ForceMinimized">
            <summary>Windows 2000/XP: Minimizes a window, even if the thread 
            that owns the window is hung. This flag should only be used when 
            minimizing windows from a different thread.</summary>
            <remarks>See SW_FORCEMINIMIZE</remarks>
        </member>
        <member name="M:BPUtil.NativeWin.NativeMethods.SetThreadExecutionState(BPUtil.NativeWin.NativeMethods.ExecutionState)">
            <summary>
            Sets the execution state of the current thread and returns the previous state.
            </summary>
            <param name="esFlags">New executation state.</param>
            <returns></returns>
        </member>
        <member name="F:BPUtil.NativeWin.NativeMethods.ExecutionState.ES_AWAYMODE_REQUIRED">
            <summary>
            Prevent idle-to-sleep
            </summary>
        </member>
        <member name="F:BPUtil.NativeWin.NativeMethods.ExecutionState.ES_CONTINUOUS">
            <summary>
            Allow monitor power down
            </summary>
        </member>
        <member name="F:BPUtil.NativeWin.NativeMethods.ExecutionState.ES_DISPLAY_REQUIRED">
            <summary>
            Prevent monitor power down
            </summary>
        </member>
        <member name="F:BPUtil.NativeWin.NativeMethods.ExecutionState.ES_SYSTEM_REQUIRED">
            <summary>
            Keep system awake
            </summary>
        </member>
        <member name="M:BPUtil.NativeWin.NativeMethods.GetShellWindow">
            <summary>
                Retrieves a handle to the Shell's desktop window.
                <para>
                Go to https://msdn.microsoft.com/en-us/library/windows/desktop/ms633512%28v=vs.85%29.aspx for more
                information
                </para>
            </summary>
            <returns>
                C++ ( Type: HWND )<br />The return value is the handle of the Shell's desktop window. If no Shell process is
                present, the return value is NULL.
            </returns>
        </member>
        <member name="M:BPUtil.NativeWin.NativeMethods.SetForegroundWindow(System.IntPtr)">
            <summary>
                Brings the thread that created the specified window into the foreground and activates the window. Keyboard input is
                directed to the window, and various visual cues are changed for the user. The system assigns a slightly higher
                priority to the thread that created the foreground window than it does to other threads.
                <para>See for https://msdn.microsoft.com/en-us/library/windows/desktop/ms633539%28v=vs.85%29.aspx more information.</para>
            </summary>
            <param name="hWnd">
                C++ ( hWnd [in]. Type: HWND )<br />A handle to the window that should be activated and brought to the foreground.
            </param>
            <returns>
                <c>true</c> or nonzero if the window was brought to the foreground, <c>false</c> or zero If the window was not
                brought to the foreground.
            </returns>
            <remarks>
                The system restricts which processes can set the foreground window. A process can set the foreground window only if
                one of the following conditions is true:
                <list type="bullet">
                <listheader>
                    <term>Conditions</term><description></description>
                </listheader>
                <item>The process is the foreground process.</item>
                <item>The process was started by the foreground process.</item>
                <item>The process received the last input event.</item>
                <item>There is no foreground process.</item>
                <item>The process is being debugged.</item>
                <item>The foreground process is not a Modern Application or the Start Screen.</item>
                <item>The foreground is not locked (see LockSetForegroundWindow).</item>
                <item>The foreground lock time-out has expired (see SPI_GETFOREGROUNDLOCKTIMEOUT in SystemParametersInfo).</item>
                <item>No menus are active.</item>
                </list>
                <para>
                An application cannot force a window to the foreground while the user is working with another window.
                Instead, Windows flashes the taskbar button of the window to notify the user.
                </para>
                <para>
                A process that can set the foreground window can enable another process to set the foreground window by
                calling the AllowSetForegroundWindow function. The process specified by dwProcessId loses the ability to set
                the foreground window the next time the user generates input, unless the input is directed at that process, or
                the next time a process calls AllowSetForegroundWindow, unless that process is specified.
                </para>
                <para>
                The foreground process can disable calls to SetForegroundWindow by calling the LockSetForegroundWindow
                function.
                </para>
            </remarks>
        </member>
        <member name="M:BPUtil.NativeWin.NativeMethods.SwitchToThisWindow(System.IntPtr,System.Boolean)">
            <summary>
            Switches focus to the window specified by the handle.  Optionally switches as though Alt + Tab were used.  One way causes the window to move to the foreground.  The other does not.
            </summary>
            <param name="hWnd"></param>
            <param name="fAltTab"></param>
        </member>
        <member name="T:BPUtil.ObjectCache`2">
            <summary>
            Provides temporary storage of key/value pairs, with configurable limits for cache size and item age.
            All public methods of this class use locking to achieve thread-safety, which could have negative performance implications if used very heavily.
            </summary>
        </member>
        <member name="M:BPUtil.ObjectCache`2.#ctor(System.Int64,System.Double,System.Func{`0,`1,System.Int64})">
            <summary>
            Creates a new ObjectCache for caching string key/value pairs.  The maximum size and age of the cache may be specified.
            </summary>
            <param name="maxCacheSizeBytes">(Optional) Approximate maximum size in bytes of the cache. Default: 2000000 (2 MB).</param>
            <param name="maxCacheAgeMinutes">(Optional) Maximum age in minutes that an item can become before it expires. Default: 10 minutes.</param>
            <param name="getSize">(Optional) A method that returns the size in bytes of the provided key and value objects. If null, the generic ObjectSize.SizeOf method will be used instead. The ObjectCache internally counts some extra bytes consumed by age-related objects and references to the keys and values you provide.</param>
        </member>
        <member name="M:BPUtil.ObjectCache`2.Add(`0,`1)">
            <summary>
            Adds the specified key/value pair if the key does not already exist in the cache. Otherwise, updates the existing item.  If an existing item is updated, its "Created" date is not updated.
            </summary>
            <param name="key">The object to use as dictionary key. `null` is not a valid key.</param>
            <param name="value"></param>
        </member>
        <member name="M:BPUtil.ObjectCache`2.Get(`0)">
            <summary>
            Returns the value that is cached for the given key, or default(TValue).
            </summary>
            <param name="key">The object to use as dictionary key. `null` is not a valid key.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ObjectCache`2.Get(`0,System.Int64@)">
            <summary>
            Returns the value that is cached for the given key, or default(TValue").
            </summary>
            <param name="key">The object to use as dictionary key. `null` is not a valid key.</param>
            <param name="cacheAgeMs">Milliseconds age of the cached value.  Will be 0 if no item was cached.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ObjectCache`2.CalculateItemSize(`0,BPUtil.ObjectCache{`0,`1}.CacheItem)">
            <summary>
            Calculates the amount of memory, in bytes, of storing this item in the ObjectCache.  Accuracy is not 100% guaranteed.
            </summary>
            <param name="key"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.ObjectSize">
            <summary>
            <para>A class which calculates the number of bytes required to store an object in memory.</para>
            <para>Important Notes:</para>
            <para>
            <list type="bullet">
            <item>Returned sizes are approximate. .NET is a complex framework and I do not know all the intricacies.</item>
            <item>It is assumed there are bugs in this class.  Please test this class with your object types before using it in published code.</item>
            <item>When using this with types that have not been accommodated, stack overflows and other exceptions may occur, or the accuracy of the calculated size may be wildly inaccurate.</item>
            <item>This class uses Reflection and is therefore not very fast.</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:BPUtil.ObjectSize.ReferenceSize">
            <summary>
            The size in bytes of an object reference in the current process. (8 or 4)
            </summary>
        </member>
        <member name="M:BPUtil.ObjectSize.SizeOf(System.Object)">
            <summary>
            Returns the size in bytes of this value or reference type instance. Types passed in should be relatively simple.  Exceptions may be thrown if certain unsupported value types are used.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ObjectSize.SizeOfPrimitiveType(System.Type)">
            <summary>
            Returns the size in bytes of a value of a primitive type.
            </summary>
            <param name="t">A primitive type</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ObjectSize.SizeOfValueType(System.Object)">
            <summary>
            Returns the size in bytes of this value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.PasswordReset.AccountInfo">
            <summary>
            Contains a minimal representation of an account for the purposes of resetting its password.
            </summary>
        </member>
        <member name="F:BPUtil.PasswordReset.AccountInfo.Type">
            <summary>
            The type of account represented by this object.
            </summary>
        </member>
        <member name="F:BPUtil.PasswordReset.AccountInfo.Identifier">
            <summary>
            The unique identifier of this account.
            </summary>
        </member>
        <member name="F:BPUtil.PasswordReset.AccountInfo.Password">
            <summary>
            The current password or hash of password.
            </summary>
        </member>
        <member name="F:BPUtil.PasswordReset.AccountInfo.Email">
            <summary>
            The account's email address.
            </summary>
        </member>
        <member name="F:BPUtil.PasswordReset.AccountInfo.DisplayName">
            <summary>
            Display name for the user. ex: "Hello " + displayName + "."
            </summary>
        </member>
        <member name="T:BPUtil.PasswordReset.ExamplePasswordReset">
            <summary>
            Example implementation allowing the stateless password reset system to access accounts from your database.
            </summary>
        </member>
        <member name="T:BPUtil.PasswordReset.PasswordResetRequest">
            <summary>
            An object containing information required to complete a password reset operation.
            </summary>
        </member>
        <member name="F:BPUtil.PasswordReset.PasswordResetRequest.accountIdentifier">
            <summary>
            The unique identifier of the account which needs its password to be changed.
            </summary>
        </member>
        <member name="F:BPUtil.PasswordReset.PasswordResetRequest.accountType">
            <summary>
            An integer representing the account type.
            </summary>
        </member>
        <member name="F:BPUtil.PasswordReset.PasswordResetRequest.secureToken">
            <summary>
            A signature which can be used to validate the request.
            </summary>
        </member>
        <member name="F:BPUtil.PasswordReset.PasswordResetRequest.email">
            <summary>
            Email address to send the reset link to.
            </summary>
        </member>
        <member name="F:BPUtil.PasswordReset.PasswordResetRequest.displayName">
            <summary>
            Display name for the user. ex: "Hello " + displayName + "."
            </summary>
        </member>
        <member name="F:BPUtil.PasswordReset.PasswordResetRequest.tokenExpiration">
            <summary>
            The amount of time after which this token may expire. (actual expiration may occur a little later than this)
            </summary>
        </member>
        <member name="T:BPUtil.PasswordReset.SecureToken">
            <summary>
            Produces secure time-based tokens for "stateless" password reset request verification.
            </summary>
        </member>
        <member name="M:BPUtil.PasswordReset.SecureToken.Initialize(System.String)">
            <summary>
            This must be called prior to using the other class methods, or else they will throw a null reference exception.
            </summary>
            <param name="SignatureFactoryKey">A key you have previously generated and saved by calling `new SignatureFactory()` and retrieving its private key.</param>
        </member>
        <member name="F:BPUtil.PasswordReset.SecureToken.sigFactory">
            <summary>
            Private key for a SignatureFactory to be used to create tokens.
            </summary>
        </member>
        <member name="F:BPUtil.PasswordReset.SecureToken.expirationPrecision">
            <summary>
            Timestamps used in token creation will increment by one on this interval.  E.g. with an interval of 5 minutes, the timestamp will increment only once every 5 minutes.
            </summary>
        </member>
        <member name="F:BPUtil.PasswordReset.SecureToken.expirationMultiplier">
            <summary>
            This number is multiplied by <see cref="F:BPUtil.PasswordReset.SecureToken.expirationPrecision"/> to determine the minimum lifespan of a token.  A token may remain valid for up to one additional <see cref="F:BPUtil.PasswordReset.SecureToken.expirationPrecision"/> interval, depending on the time of token creation.
            </summary>
        </member>
        <member name="F:BPUtil.PasswordReset.SecureToken.timestampDivisor">
            <summary>
            Timestamps are divided by this number to yield a timestamp with reduced precision.
            </summary>
        </member>
        <member name="M:BPUtil.PasswordReset.SecureToken.GetToken(BPUtil.PasswordReset.AccountInfo)">
            <summary>
            Returns a secure token for the specified accountType and accountIdentifier.  The token will expire in 15-20 minutes.
            </summary>
            <param name="account">An AccountInfo representing the account which the user wishes to reset the password for.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.PasswordReset.SecureToken.VerifyToken(BPUtil.PasswordReset.AccountInfo,System.String)">
            <summary>
            Verifies a secure token against the account data. Returns true if the token is valid and un-expired.
            </summary>
            <param name="account">An AccountInfo representing the account which the user wishes to reset the password for.</param>
            <param name="token">The token which was created earlier.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.PasswordReset.SecureToken.GetData(System.Int64,System.String,System.String,System.String)">
            <summary>
            Generates a data string which is to be signed.
            </summary>
            <param name="timestamp">A low-precision timestamp, to facilitate token expiration.</param>
            <param name="accountType">The type of account this is.  Necessary to uniquely identify an account because account identifiers are not unique between account systems.</param>
            <param name="accountIdentifier">The account's unique identifier within its account system (could be a user name or an email address).</param>
            <param name="currentPassword">The account's current password.  Including this in the data string ensures that the signature can't be accidentally used to change the password more than once before the signature expires.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.PasswordReset.SecureToken.GetMinimumTokenLifespan">
            <summary>
            Gets the lower bound of the lifespan of a token. e.g. 15 minutes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.PasswordReset.SecureToken.GetMaximumTokenLifespan">
            <summary>
            Gets the upper bound of the lifespan of a token. e.g. 20 minutes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BPUtil.PasswordReset.StatelessPasswordResetBase">
            <summary>
            <para>A base class providing secure password reset functionality that requires no server-side state to be maintained between steps.</para>
            <para>Accounts without an email address on file will be unable to use this password reset algorithm.  Security is achieved by sending an email containing a link with a specially computed security token.  The user making the request must click this link, thereby verifying to us that they own the email address which was on file for the account.</para>
            <para>The security token is the cryptographic signature of the unique identifier for the account, combined with an imprecise timestamp (e.g. unix timestamp divided by 5 minutes).</para>
            <para>Any server with a matching private key will be able to validate a security token within a short timeframe from its creation, and therefore allow the password to be reset.</para>
            <para>After verifying account ownership, the user will be sent a new password.</para>
            </summary>
        </member>
        <member name="M:BPUtil.PasswordReset.StatelessPasswordResetBase.Initialize(System.String)">
            <summary>
            This must be called prior to using StatelessPasswordResetBase, or else NullReferenceException will be thrown.
            </summary>
            <param name="SignatureFactoryKey">A key you have previously generated and saved by calling `new SignatureFactory()` and retrieving its private key.</param>
        </member>
        <member name="M:BPUtil.PasswordReset.StatelessPasswordResetBase.GetResetRequest(System.String)">
            <summary>
            Gets a PasswordResetRequest object containing data necessary to send a password reset email to the user.  The email should contain a link which should result in the CompletePasswordReset method being called.
            Returns null if the account does not exist, or if it has no email address on file, or if the user is not allowed to change the password.
            </summary>
            <param name="accountIdentifier">The unique identifier for the account (user name or email address, depending on account type).</param>
        </member>
        <member name="M:BPUtil.PasswordReset.StatelessPasswordResetBase.CompletePasswordReset(System.String,System.String,System.String,BPUtil.PasswordReset.PasswordResetRequest@)">
            <summary>
            Completes the password reset as requested and returns the new password.  If the request fails to validate (it may have been tampered with, expired, etc) returns null.
            </summary>
            <param name="type">Account type.</param>
            <param name="accountIdentifier">The unique identifier for the account (user name or email address, depending on account type).</param>
            <param name="token">The token from a reset request.</param>
            <param name="req">Upon success, this is set to a copy of the PasswordResetRequest so that some metadata such as the email address and user display name can be returned.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.PasswordReset.StatelessPasswordResetBase.GetCurrentAccountInfo(System.String)">
            <summary>
            Returns true if the specified user identifier is eligible for password reset.
            </summary>
            <param name="accountIdentifier">Unique identifier for the account. User Name, Email Address, etc.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.PasswordReset.StatelessPasswordResetBase.CommitPasswordChange(System.String,System.String)">
            <summary>
            Assigns a new password to an account. Returns true if successful.  Derived classes should not return false without first sending an error email.
            </summary>
            <param name="accountIdentifier">Unique identifier for the account. User Name, Email Address, etc.</param>
            <param name="newPassword">New password for the account.</param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.Robust">
            <summary>
            Provides methods to conveniently retry unreliable operations (typically file I/O).
            </summary>
        </member>
        <member name="M:BPUtil.Robust.Retry(System.Action,System.Int32[])">
            <summary>
            Runs the specified action. If the action throws an exception, this method sleeps for a time and runs the action again. Sleep time is defined by the [delays] arguments, and the maximum number of retries is defined by the number of [delays] arguments.
            </summary>
            <param name="action">Action to run.</param>
            <param name="delays">
            <para>
            After failing to run an action, we sleep the thread for this many milliseconds. Each int from this array is used one time.
            </para>
            <para>
            Example: Given a [delays] array of [5,10,20], the Retry method will wait 5ms after the first failure, 10ms after the second failure, 20ms after the third failure, and if the action fails a fourth time, the exception is simply rethrown.
            </para>
            </param>
        </member>
        <member name="M:BPUtil.Robust.RetryPeriodic(System.Action,System.Int32,System.Int32)">
            <summary>
            Runs the specified action. If the action throws an exception, this method sleeps for a time and runs the action again. Sleep time is defined by the [sleepTimeMs] argument, and the maximum number of retries is defined by the [maxRetries] argument.
            </summary>
            <param name="action">Action to run.</param>
            <param name="sleepTimeMs">Time in milliseconds to sleep after the action fails.</param>
            <param name="maxRetries">Maximum number of times to retry.</param>
        </member>
        <member name="M:BPUtil.Robust.Retry(System.Action,System.Func{System.Boolean},System.Int32[])">
            <summary>
            Runs the specified action. If the result is unacceptable or if the action throws an exception, this method sleeps for a time and runs the action again. Sleep time is defined by the [delays] arguments, and the maximum number of retries is defined by the number of [delays] arguments.
            </summary>
            <param name="action">Action to run.</param>
            <param name="until">Function that should return true when the desired result is achieved. If this method returns false, the action may be run again.</param>
            <param name="delays">
            <para>
            After failing to run an action, we sleep the thread for this many milliseconds. Each int from this array is used one time.
            </para>
            <para>
            Example: Given a [delays] array of [5,10,20], the Retry method will wait 5ms after the first failure, 10ms after the second failure, 20ms after the third failure, and if the action fails a fourth time, the exception is simply rethrown.
            </para>
            </param>
        </member>
        <member name="M:BPUtil.Robust.Retry``1(System.Func{``0},System.Func{``0,System.Boolean},System.Int32[])">
            <summary>
            Runs the specified function which returns a value. If the result is unacceptable or if the action throws an exception, this method sleeps for a time and runs the action again. Sleep time is defined by the [delays] arguments, and the maximum number of retries is defined by the number of [delays] arguments.
            </summary>
            <param name="func">Function to run.</param>
            <param name="until">Function that should return true when the desired result is achieved. If this method returns false, the function may be run again.</param>
            <param name="delays">
            <para>
            After failing to run an action, we sleep the thread for this many milliseconds. Each int from this array is used one time.
            </para>
            <para>
            Example: Given a [delays] array of [5,10,20], the Retry method will wait 5ms after the first failure, 10ms after the second failure, 20ms after the third failure, and if the action fails a fourth time, the exception is simply rethrown.
            </para>
            </param>
        </member>
        <member name="T:BPUtil.SevenZip">
            <summary>
            Simple wrapper for 7za.exe (7zip command-line app).  Does not report progress.
            </summary>
        </member>
        <member name="M:BPUtil.SevenZip.Extract(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Extract the contents of an archive. If there is an error, an exception will be thrown.
            </summary>
            <param name="sevenZipCommandLineExePath">Path of 7za.exe.</param>
            <param name="archivePath">Path to a 7zip-compatible archive (*.7z for example).</param>
            <param name="outputDirectory">Path to a directory into which to extract the contents of the archive.</param>
            <param name="threads">Number of threads the 7zip executable is allowed to use.</param>
            <exception cref="T:System.Exception">Thrown if any of the input paths are invalid or if 7za.exe returns a nonzero result.</exception>
            <param name="lowPriority">If true, the 7zip process will be assigned BelowNormal priority.</param>
        </member>
        <member name="M:BPUtil.SevenZip.ListFiles(System.String,System.String,System.Boolean)">
            <summary>
            Lists the files in an archive.
            </summary>
            <param name="sevenZipCommandLineExePath">Path of 7za.exe.</param>
            <param name="archivePath">Path to a 7zip-compatible archive (*.7z for example).</param>
            <param name="lowPriority">If true, the 7zip process will be assigned BelowNormal priority.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SevenZip.Create7zArchive(System.String,System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new archive from the given input path. If there is an error, an exception will be thrown.
            </summary>
            <param name="sevenZipCommandLineExePath">Path of 7za.exe.</param>
            <param name="archivePath">Path to a 7zip archive (*.7z).</param>
            <param name="sourcePath">Path of a file or directory to put into the new archive.</param>
            <param name="threads">Number of threads the 7zip executable is allowed to use.</param>
            <param name="lowPriority">If true, the 7zip process will be assigned BelowNormal priority.</param>
            <param name="createNew">If true, an exception will be thrown if the archive already exists. If false, items may be added to an existing archive.</param>
        </member>
        <member name="T:BPUtil.SevenZipFileData">
            <summary>
            Data about a file in an archive.
            </summary>
        </member>
        <member name="T:BPUtil.SignatureFactory">
            <summary>
            Performs sign and verify tasks using ECDsaCng. This class is thread-safe.
            </summary>
        </member>
        <member name="M:BPUtil.SignatureFactory.#ctor">
            <summary>
            Creates a new SignatureFactory with a random key.
            </summary>
        </member>
        <member name="M:BPUtil.SignatureFactory.#ctor(System.String)">
            <summary>
            Creates a new SignatureFactory from the specified key.
            </summary>
            <param name="key">Base64 string previously exported from a SignatureFactory.</param>
        </member>
        <member name="M:BPUtil.SignatureFactory.Sign(System.Byte[])">
            <summary>
            Signs a hash of the specified data and returns the signature.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SignatureFactory.Verify(System.Byte[],System.Byte[])">
            <summary>
            Verifies a signature.
            </summary>
            <param name="data">The data that was signed.</param>
            <param name="signature">The signature data to be verified.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SignatureFactory.Sign(System.String)">
            <summary>
            Computes a cryptographic signature of a string.
            Later, the signature can be provided along with the data string to the <see cref="M:BPUtil.SignatureFactory.Verify(System.String,System.String)"/> method to verify that the data string has not been tampered with.
            Returns a string in <see cref="T:BPUtil.Base64UrlMod"/> format.
            </summary>
            <param name="data">A string to sign.</param>
            <returns>Returns a string in <see cref="T:BPUtil.Base64UrlMod"/> format.</returns>
        </member>
        <member name="M:BPUtil.SignatureFactory.Verify(System.String,System.String)">
            <summary>
            Verifies that the signature matches the data string. If the data and/or signature have been tampered with, this method will return false.
            </summary>
            <param name="data">The string to verify the signature of.</param>
            <param name="signature">The signature used for verification.  (Base64 or <see cref="T:BPUtil.Base64UrlMod"/> format)</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SignatureFactory.ExportPrivateKey">
            <summary>
            Returns the private key in base64 format so it can be reused in future SignatureFactory instances.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BPUtil.SimpleHttp.ICertificateSelector">
            <summary>
            Selects an SSL certificate.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.ICertificateSelector.GetCertificate(System.String)">
            <summary>
            Returns an X509Certificate or null.
            </summary>
            <param name="serverName">The server name as indicated by ServerNameIndication. May be null or empty. May be omitted if the configured certificate resolver is known to ignore this value.</param>
            <returns>an X509Certificate or null</returns>
        </member>
        <member name="F:BPUtil.SimpleHttp.ServerNameCertificateSelector.allCertsByDomain">
            <summary>
            Dictionary which maps lower-case domain names to certificates. To specify a default certificate, use <see cref="F:System.String.Empty"/> as the key.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.ServerNameCertificateSelector.GetCertificate(System.String)">
            <summary>
            Returns an X509Certificate appropriate for the specified serverName, or null.
            </summary>
            <param name="serverName">The server name as indicated by ServerNameIndication. May be null or empty.</param>
            <returns>an X509Certificate or null</returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.ServerNameCertificateSelector.SetCertificate(System.String,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Sets the certificate for the specified server name.
            </summary>
            <param name="serverName">The domain name of the server.  The lower-case form of this will be used as the dictionary key.  To specify a default certificate, use <see cref="F:System.String.Empty"/> as the serverName.  Null is treated as empty string.</param>
            <param name="cert">The certificate.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.SimpleCertificateSelector.GetCertificate(System.String)">
            <summary>
            Returns an X509Certificate or null.
            </summary>
            <param name="serverName">ignored</param>
            <returns>an X509Certificate or null</returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.SimpleCertificateSelector.FromCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Returns a SimpleCertificateSelector or null, depending on the certificate provided.
            </summary>
            <param name="cert">A certificate or null.</param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.SimpleHttp.TLS.Implementation.FragmentStream">
            <summary>
            A read-only stream which provides to the reader a view of TLS fragment payloads.  This class buffers one entire TLS fragment at a time (maximum size of one fragment is 16384 + 5 = 16389 bytes).  Fragmentation is supported, however it is up to the caller to provide fragments and handle interleaving.  The first fragment received locks this instance to accept only fragments of that type.  If a fragment is provided that is not the same type as the first fragment, an exception is thrown.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.TLS.Implementation.FragmentStream.#ctor(System.Func{BPUtil.SimpleHttp.TLS.Implementation.TLSPlaintext})">
            <summary>
            Creates a new FragmentStream that will be locked to the type of the first fragment it is provided.
            </summary>
            <param name="getFragmentCallback">A callback function that should return a fragment when requested.  This class will call the callback during Read operations when more data is required.</param>
        </member>
        <member name="P:BPUtil.SimpleHttp.TLS.Implementation.FragmentStream.CanRead">
            <summary>
            (true) Gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:BPUtil.SimpleHttp.TLS.Implementation.FragmentStream.CanSeek">
            <summary>
            (false) Gets a value indicating whether the current stream supports seeking.
            </summary>
            <value></value>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:BPUtil.SimpleHttp.TLS.Implementation.FragmentStream.CanWrite">
            <summary>
            (false) Gets a value indicating whether the current stream supports writing.
            </summary>
            <value></value>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="P:BPUtil.SimpleHttp.TLS.Implementation.FragmentStream.Length">
            <summary>
            Not supported. Will throw an exception.
            </summary>
            <value></value>
            <returns>A long value representing the length of the stream in bytes.</returns>
            <exception cref="T:System.NotSupportedException">The base stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:BPUtil.SimpleHttp.TLS.Implementation.FragmentStream.Position">
            <summary>
            Not supported. Will throw an exception.
            </summary>
            <value></value>
            <returns>The current position within the stream.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The base stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:BPUtil.SimpleHttp.TLS.Implementation.FragmentStream.Flush">
            <summary>
            Not supported. Does nothing.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        </member>
        <member name="M:BPUtil.SimpleHttp.TLS.Implementation.FragmentStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported. Will throw an exception.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"></see> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The base stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:BPUtil.SimpleHttp.TLS.Implementation.FragmentStream.SetLength(System.Int64)">
            <summary>
            Not supported. Will throw an exception.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.NotSupportedException">The base stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:BPUtil.SimpleHttp.TLS.Implementation.FragmentStream.Close">
            <summary>
            Not supported. Does nothing.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.TLS.Implementation.FragmentStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. This stream will block until it can read the requested number of bytes, only returning less if the end of stream is reached.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of offset and count is larger than the buffer length. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.NotSupportedException">The base stream does not support reading. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="M:BPUtil.SimpleHttp.TLS.Implementation.FragmentStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not Implemented.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The base stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.ArgumentException">The sum of offset and count is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="T:BPUtil.SimpleHttp.TLS.Implementation.HandshakeBody">
            <summary>
            The body of a Handshake message.
            </summary>
        </member>
        <member name="T:BPUtil.SimpleHttp.TLS.Implementation.TLSPlaintext">
            <summary>
            Represents one TLS record fragment.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.TLS.Implementation.TLSPlaintext.data_header">
            <summary>
            The header of the record layer fragment.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.TLS.Implementation.TLSPlaintext.data_fragment">
            <summary>
            The body of the record layer fragment.
            </summary>
        </member>
        <member name="T:BPUtil.SimpleHttp.TLS.TlsServerNameReader">
            <summary>
            Uses BPUtil's very limited TLS implementation to read the TLS Client Hello in order to get the name of the server.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.TLS.TlsServerNameReader.Read(System.IO.Stream,System.String@)">
            <summary>
            Reads the TLS Client Hello from the tcp stream, parsing out the server name provided by the Server Name extension. Returns a stream that behaves as if nothing had been read.
            </summary>
            <param name="tcpStream">The stream that is expected to begin a TLS 1.0, 1.1, or 1.2 handshake.</param>
            <param name="serverName">The server name from the TLS Server Name extension.  Or null.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Throws if there is a problem parsing the TLS Client Hello.</exception>
        </member>
        <member name="T:BPUtil.SimpleHttp.WebSockets.WebSocketClient">
            <summary>
            A WebSocket client connection providing synchronous access methods. It is recommended to adjust the Tcp Socket's read and write timeouts as needed to avoid premature disconnection.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.WebSockets.WebSocketClient.uri">
            <summary>
            The Uri which this client connected to.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.WebSockets.WebSocketClient.SecWebsocketKey">
            <summary>
            The value of the "Sec-WebSocket-Key" header which this client sent during the connection phase.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebSockets.WebSocketClient.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new WebSocket and connects it to the specified URL. It is recommended to adjust the Tcp Socket's read and write timeouts as needed to avoid premature disconnection.
            </summary>
            <param name="url">A URL to connect to.</param>
            <param name="acceptAnyCert">If true, any SSL certificate will be accepted from the remote server.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebSockets.WebSocketClient.isClient">
            <summary>
            Returns true if this WebSocket is acting as a client.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BPUtil.SimpleHttp.WebSockets.WebSocket">
            <summary>
            A WebSocket server connection providing synchronous access methods. It is recommended to adjust the Tcp Socket's read and write timeouts as needed to avoid premature disconnection.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.WebSockets.WebSocket.MAX_PAYLOAD_BYTES">
            <summary>
            The maximum size of a payload this WebSocket will allow to be received. Any payloads exceeding this size will cause the WebSocket to be closed.
            </summary>
        </member>
        <member name="P:BPUtil.SimpleHttp.WebSockets.WebSocket.tcpClient">
            <summary>
            The TcpClient instance this WebSocket is bound to. Do not use the GetStream method, as it does not support TLS (instead use <see cref="P:BPUtil.SimpleHttp.WebSockets.WebSocket.tcpStream"/>).
            </summary>
        </member>
        <member name="P:BPUtil.SimpleHttp.WebSockets.WebSocket.tcpStream">
            <summary>
            The readable/writeable stream for the data connection.  Typically either NetworkStream or SslStream.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebSockets.WebSocket.#ctor">
            <summary>
            Empty constructor for use by WebSocketClient.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebSockets.WebSocket.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            Creates a new WebSocket bound to a <see cref="T:System.Net.Sockets.TcpClient"/> that is already connected. It is recommended to adjust the Tcp Socket's read and write timeouts as needed to avoid premature disconnection. If TLS is being used, this is not the constructor you want.
            </summary>
            <param name="tcpc">A connected <see cref="T:System.Net.Sockets.TcpClient"/> to bind to the new WebSocket instance.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebSockets.WebSocket.#ctor(BPUtil.SimpleHttp.HttpProcessor)">
            <summary>
            Creates a new WebSocket bound to an <see cref="T:BPUtil.SimpleHttp.HttpProcessor"/> that has already read the request headers.  The WebSocket handshake will be completed automatically.  It is recommended to adjust the Tcp Socket's read and write timeouts as needed to avoid premature disconnection.
            </summary>
            <param name="p">An <see cref="T:BPUtil.SimpleHttp.HttpProcessor"/> to bind to the new WebSocket instance.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebSockets.WebSocket.#ctor(BPUtil.SimpleHttp.HttpProcessor,System.Action{BPUtil.SimpleHttp.WebSockets.WebSocketFrame},System.Action{BPUtil.SimpleHttp.WebSockets.WebSocketCloseFrame})">
            <summary>
            Creates a new WebSocket bound to an <see cref="T:BPUtil.SimpleHttp.HttpProcessor"/>.  The WebSocket handshake will be completed automatically.  This constructor calls StartReading automatically. It is recommended to adjust the Tcp Socket's read and write timeouts as needed to avoid premature disconnection.
            </summary>
            <param name="p">An <see cref="T:BPUtil.SimpleHttp.HttpProcessor"/> to bind to the new WebSocket instance.</param>
            <param name="onMessageReceived">A callback method which is called whenever a message is received from the WebSocket.</param>
            <param name="onClose">A callback method which is called when the WebSocket is closed by the remote endpoint.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebSockets.WebSocket.StartReading(System.Action{BPUtil.SimpleHttp.WebSockets.WebSocketFrame},System.Action{BPUtil.SimpleHttp.WebSockets.WebSocketCloseFrame})">
            <summary>
            Starts a background thread to read from the web socket. If the WebSocket reading thread is already active, an exception is thrown.
            </summary>
            <param name="onMessageReceived">A callback method which is called whenever a message is received from the WebSocket.</param>
            <param name="onClose">A callback method which is called when the WebSocket is closed by the remote endpoint.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebSockets.WebSocket.Close">
            <summary>
            Attempts to close this WebSocket.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebSockets.WebSocket.isClient">
            <summary>
            Returns true if this WebSocket is acting as a client.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebSockets.WebSocket.Send(System.String)">
            <summary>
            Sends a text frame to the remote endpoint.
            </summary>
            <param name="textBody">Body text.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebSockets.WebSocket.Send(System.Byte[])">
            <summary>
            Sends a binary frame to the remote endpoint.
            </summary>
            <param name="dataBody">Body text.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebSockets.WebSocket.Send(BPUtil.SimpleHttp.WebSockets.WebSocketCloseCode,System.String)">
            <summary>
            Sends a close frame to the remote endpoint.  After calling this, you should close the underlying TCP connection.
            </summary>
            <param name="closeCode">The reason for the close. Note that some of the <see cref="T:BPUtil.SimpleHttp.WebSockets.WebSocketCloseCode"/> values are not intended to be sent.</param>
            <param name="message">A message to include in the close frame.  You can assume this message will not be shown to the user.  The message may be truncated to ensure the UTF8-Encoded length is 125 bytes or less.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebSockets.WebSocket.SendPing">
            <summary>
            Sends a ping frame to the remote endpoint to help prevent the underlying socket/protocol from timing out.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebSockets.WebSocket.IsWebSocketRequest(BPUtil.SimpleHttp.HttpProcessor)">
            <summary>
            Returns true of the HTTP connection has requested to be upgraded to a WebSocket.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebSockets.WebSocket.CreateSecWebSocketAcceptValue(System.String)">
            <summary>
            Given a "Sec-WebSocket-Key" header value from a WebSocket client, returns the value of the "Sec-WebSocket-Accept" header that the server should provide in its response to complete the handshake.
            </summary>
            <param name="SecWebSocketKeyClientValue">"Sec-WebSocket-Key" header value from a WebSocket client</param>
            <returns></returns>
        </member>
        <member name="F:BPUtil.SimpleHttp.WebSockets.WebSocketCloseCode.Normal">
            <summary>
            The connection is closing normally (purpose fulfilled).
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.WebSockets.WebSocketCloseCode.GoingAway">
            <summary>
            The endpoint sending this close code is going away.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.WebSockets.WebSocketCloseCode.ProtocolError">
            <summary>
            A protocol error was encountered.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.WebSockets.WebSocketCloseCode.UnacceptableData">
            <summary>
            This endpoint does not support the type of data that was received (e.g. Text or Binary).
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.WebSockets.WebSocketCloseCode.None">
            <summary>
            No status code was present. DO NOT SEND THIS OVER THE NETWORK AS A CLOSE CODE.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.WebSockets.WebSocketCloseCode.ConnectionLost">
            <summary>
            Connection was lost without receiving a close control frame. DO NOT SEND THIS OVER THE NETWORK AS A CLOSE CODE.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.WebSockets.WebSocketCloseCode.DataFormat">
            <summary>
            Data was received that is not consistent with the data type. E.g. non-UTF8 data in a Text frame.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.WebSockets.WebSocketCloseCode.PolicyViolation">
            <summary>
            A message violated a policy. To be used if no other close code is more appropriate.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.WebSockets.WebSocketCloseCode.MessageTooBig">
            <summary>
            This endpoint is refusing to handle a message because it was too big.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.WebSockets.WebSocketCloseCode.MissingExtension">
            <summary>
            Sent by a client if the server did not implement a required WebSocket extension.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.WebSockets.WebSocketCloseCode.InternalError">
            <summary>
            An unexpected error occurred.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.WebSockets.WebSocketCloseCode.TLSHandshakeFailed">
            <summary>
            TLS handshake failed. (e.g., the server certificate can't be verified). DO NOT SEND THIS OVER THE NETWORK AS A CLOSE CODE.
            </summary>
        </member>
        <member name="T:BPUtil.SimpleHttp.WebSockets.WebSocketFrame">
            <summary>
            Base class for a frame from a WebSocket.  This will actually be of type <see cref="T:BPUtil.SimpleHttp.WebSockets.WebSocketBinaryFrame"/> or <see cref="T:BPUtil.SimpleHttp.WebSockets.WebSocketTextFrame"/>.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.WebSockets.WebSocketFrame.Head">
            <summary>
            The frame header.  If this frame was constructed from fragments, it is the header of the first fragment.
            </summary>
        </member>
        <member name="T:BPUtil.SimpleHttp.WebSockets.WebSocketBinaryFrame">
            <summary>
            A frame from a WebSocket. Contains a byte array of data.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.WebSockets.WebSocketBinaryFrame.Data">
            <summary>
            The unmasked data of this frame. Use Head.GetMaskedBytes(byte[]) to get masked data.
            </summary>
        </member>
        <member name="T:BPUtil.SimpleHttp.WebSockets.WebSocketTextFrame">
            <summary>
             A frame from a WebSocket. Contains a string of data.
            </summary>
        </member>
        <member name="P:BPUtil.SimpleHttp.WebSockets.WebSocketTextFrame.Text">
            <summary>
            Gets or sets the text of this frame by coverting to/from the Data property of the underlying WebSocketBinaryFrame. If you need to read this value multiple times, it is better to cache the result.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.WebSockets.WebSocketCloseFrame.CloseCode">
            <summary>
            A status code indicating the reason the WebSocket was closed.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.WebSockets.WebSocketCloseFrame.Message">
            <summary>
            An optional message further describing the reason the WebSocket was closed.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebSockets.WebSocketCloseFrame.#ctor(System.Boolean)">
            <summary>
            Constructs a WebSocketCloseFrame.
            </summary>
            <param name="iAmClient">Pass true if this frame is being created by a WebSocketClient with the intent to send the frame to a server.</param>
        </member>
        <member name="T:BPUtil.SimpleHttp.WebSockets.WebSocketFrameHeader">
             <summary>
             
             From https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers
             
             Each data frame (from the client to the server or vice-versa) follows this same format:
            ​​
            	  0                   1                   2                   3
            	  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            	 +-+-+-+-+-------+-+-------------+-------------------------------+
            	 |F|R|R|R| opcode|M| Payload len |    Extended payload length    |
            	 |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |
            	 |N|V|V|V|       |S|             |   (if payload len==126/127)   |
            	 | |1|2|3|       |K|             |                               |
            	 +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +
            	 |     Extended payload length continued, if payload len == 127  |
            	 + - - - - - - - - - - - - - - - +-------------------------------+
            	 |                               |Masking-key, if MASK set to 1  |
            	 +-------------------------------+-------------------------------+
            	 | Masking-key(continued)       |          Payload Data         |
            	 +-------------------------------- - - - - - - - - - - - - - - - +
            	 :                     Payload Data continued ...                :
            	 + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
            	 |                     Payload Data continued ...                |
            	 +---------------------------------------------------------------+
             </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebSockets.WebSocketFrameHeader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Constructs a non-fragmented WebSocketFrameHeader by deserializing it from a stream.
            </summary>
            <param name="networkStream">Stream to deserialize the header from.</param>
            <param name="iAmClient">Pass true if this header is being created by a WebSocketClient that is reading a header from a server.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebSockets.WebSocketFrameHeader.#ctor(BPUtil.SimpleHttp.WebSockets.WebSocketOpcode,System.Int32,System.Boolean)">
            <summary>
            Constructs a non-fragmented WebSocketFrameHeader for the purpose of serializing it to a stream with <see cref="M:BPUtil.SimpleHttp.WebSockets.WebSocketFrameHeader.Write(System.IO.Stream)"/>.
            </summary>
            <param name="opcode">The opcode to include in the header.</param>
            <param name="payloadLength">The payload length to include in the header.</param>
            <param name="iAmClient">Pass true if this header is being created by a WebSocketClient with the intent to send the frame to a server.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebSockets.WebSocketFrameHeader.FromFragments(BPUtil.SimpleHttp.WebSockets.WebSocketFrameHeader,System.Int32)">
            <summary>
            Returns a new WebSocketFrameHeader constructed from a set of fragments.
            </summary>
            <param name="fragmentStart">The header of the frame that started the set of fragments.</param>
            <param name="payloadLength">The combined total length of the payloads of all fragments in the set.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebSockets.WebSocketFrameHeader.Write(System.IO.Stream)">
            <summary>
            Writes the frame header to the specified stream.  After writing the header, you must separately write the payload.  Fragmented messages are not supported by this library.
            </summary>
            <param name="stream">The stream to write the frame header to.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebSockets.WebSocketFrameHeader.XORMask(System.Byte[])">
            <summary>
            If the <see cref="F:BPUtil.SimpleHttp.WebSockets.WebSocketFrameHeader.mask"/> flag is set, masks the bytes in [buffer] using the mask specified by <see cref="F:BPUtil.SimpleHttp.WebSockets.WebSocketFrameHeader.maskBytes"/>.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebSockets.WebSocketFrameHeader.GetMaskedBytes(System.Byte[])">
            <summary>
            Masks the data if necessary and returns a byte array. The original data array may be returned, or a masked copy of the data may be returned, but in either case the original data array will be unmodified.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BPUtil.SimpleHttp.WebSockets.WebSocketHttpResponseUnexpectedException">
            <summary>
            A specialized WebSocketException with close code 4800.  Code 4800 is here defined to mean the first line of the HTTP response did not meet any basic expectations.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.WebSockets.WebSocketHttpResponseUnexpectedException.HttpResponseFirstLine">
            <summary>
            This is the first line of the HTTP response.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebSockets.WebSocketHttpResponseUnexpectedException.#ctor(System.String)">
            <summary>
            A specialized WebSocketException with close code 4800.  Code 4800 is here defined to mean the first line of the HTTP response did not meet any basic expectations.
            </summary>
            <param name="httpResponseFirstLine">First line of the HTTP response.</param>
        </member>
        <member name="T:BPUtil.SimpleHttp.WebSockets.WebSocketHttpResponseCodeUnexpectedException">
            <summary>
            A specialized WebSocketException with close code 4801.  Code 4801 is here defined to mean the HTTP response code was not "101" as expected.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.WebSockets.WebSocketHttpResponseCodeUnexpectedException.StatusCode">
            <summary>
            If not null, this is the HTTP status code read from the response.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.WebSockets.WebSocketHttpResponseCodeUnexpectedException.ReasonPhrase">
            <summary>
            If not null, this is the Reason Phrase given with the HTTP status code.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebSockets.WebSocketHttpResponseCodeUnexpectedException.#ctor(System.Int32,System.String)">
            <summary>
            A specialized WebSocketException with close code 4801.  Code 4801 is here defined to mean the HTTP response code was not "101" as expected.
            </summary>
            <param name="statusCode">HTTP status code that was provided with the HTTP response.</param>
            <param name="reasonPhrase">Reason Phrase that was provided with the HTTP response.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.Crypto.CryptContext.#ctor">
            <summary>
            By default, sets up to create a new randomly named key container
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.Crypto.DisposeableObject.ThrowIfDisposed">
            <summary>
            Typical check for derived classes
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.Crypto.DisposeableObject.ThrowIfDisposed(System.String)">
            <summary>
            Typical check for derived classes
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpCompressionHelper.FileTypeShouldBeCompressed(System.String)">
            <summary>
            Returns true if the specified file extension has been flagged for compression (e.g. .html, .htm, .txt, .js, .css, .svg, .xml).
            </summary>
            <param name="extensionIncludingDot"></param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.SimpleHttp.HttpCompressionBody">
            <summary>
            A class which compresses or does not compress a content body, depending on its type and length.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpCompressionBody.body">
            <summary>
            The http response body, which may be compressed with gzip or not; check ContentEncoding to find out.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpCompressionBody.ContentEncoding">
            <summary>
            "" or "gzip" depending on whether or not the body was encoded or not.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpCompressionBody.additionalHeaders">
            <summary>
            An additionalHeaders instance that may have had ["Content-Encoding", "gzip"] added to it.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.NetworkAddressInfo.localIPv4Addresses">
            <summary>
            A list of IPv4 addresses belonging to this server.  Each item in this list has a corresponding item in the `localIPv4Masks` list at the same index.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.NetworkAddressInfo.localIPv4Masks">
            <summary>
            A list of IPv4 subnet masks belonging to this server.  Each item in this list has a corresponding item in the `localIPv4Addresses` list at the same index.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.NetworkAddressInfo.localIPv6Addresses">
            <summary>
            A list of IPv6 addresses belonging to this server.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.NetworkAddressInfo.AddV4AddressMono(System.Net.NetworkInformation.UnicastIPAddressInformation)">
            <summary>
            Works around a method that was not implemented in some mono versions.
            </summary>
            <param name="addressInfo"></param>
        </member>
        <member name="M:BPUtil.SimpleHttp.NetworkAddressInfo.IsSameMachine(System.Net.IPAddress)">
            <summary>
            Returns true if the specified address is the same as any of this server's addresses.
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.NetworkAddressInfo.IsSameLAN(System.Net.IPAddress)">
            <summary>
            Returns true if the specified address is in the same subnet as any of this server's addresses.  For IPv6, this simply returns [address].IsIPv6LinkLocal.
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.NetworkAddressInfo.IsSameLAN(System.Byte[])">
            <summary>
            Returns true if the specified IPv4 address is in the same subnet as any of this server's IPv4 addresses.
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.SimpleHttp.ProxyDataBuffer">
            <summary>
            Contains a list of ProxyDataItems in the order that they were proxied.
            </summary>
        </member>
        <member name="T:BPUtil.SimpleHttp.ProxyDataItem">
            <summary>
            Represents a chunk of data that was proxied to or from a remote server.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.ProxyDataItem.Direction">
            <summary>
            The direction that this ProxyDataItem was traveling.
            </summary>
        </member>
        <member name="P:BPUtil.SimpleHttp.ProxyDataItem.PayloadBytes">
            <summary>
            The payload of this ProxyDataItem as a byte array.  If this payload was sourced as a string, it will be converted to a byte array each time you access this property.  The string encoding is treated as UTF8 without a byte order mark.
            </summary>
        </member>
        <member name="P:BPUtil.SimpleHttp.ProxyDataItem.PayloadAsString">
            <summary>
            The payload of this ProxyDataItem as a string.  If this payload was sourced as a byte array, it will be converted to a string each time you access this property.  The string encoding is treated as UTF8 without a byte order mark.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.ProxyDataItem.#ctor(BPUtil.SimpleHttp.ProxyDataDirection,System.Byte[])">
            <summary>
            Creates a ProxyDataItem with a byte array payload.
            </summary>
            <param name="direction"></param>
            <param name="payload"></param>
        </member>
        <member name="M:BPUtil.SimpleHttp.ProxyDataItem.#ctor(BPUtil.SimpleHttp.ProxyDataDirection,System.String)">
            <summary>
            Creates a ProxyDataItem with a string payload.
            </summary>
            <param name="direction"></param>
            <param name="payload"></param>
        </member>
        <member name="F:BPUtil.SimpleHttp.ProxyDataDirection.RequestToServer">
            <summary>
            RequestToServer indicates that the Payload is part of the data sent to the server.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.ProxyDataDirection.ResponseFromServer">
            <summary>
            ResponseFromServer indicates that the Payload is part of a response from the server.
            </summary>
        </member>
        <member name="T:BPUtil.SimpleHttp.WebpackProxy">
            <summary>
            Assists in web service development using webpack.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebpackProxy.Proxy(BPUtil.SimpleHttp.HttpProcessor)">
            <summary>
            Attempts to proxy the connection to webpack, starting webpack dev server if necessary.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebpackProxy.TryStartWebpack">
            <summary>
            Returns true if the webpack dev server was started successfully.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebpackProxy.TestTcpPortBind(System.Int32)">
            <summary>
            Attempts to briefly bind the specified TCP port, returning true if successful or false otherwise.
            </summary>
            <param name="port">The TCP port to test.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.WebpackProxy.TestTcpPortOpen(System.Int32)">
            <summary>
            Attempts to briefly connect to the specified port number on the loopback adapter, returning true if successful or false otherwise.
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.SimpleHttp.GlobalThrottledStream">
            <summary>
            A stream that throttles read and write operations.  The throttled speed varies depending on the number of other competing streams, in order to meet application-wide speed limits.
            </summary>
        </member>
        <member name="P:BPUtil.SimpleHttp.GlobalThrottledStream.BaseStream">
            <summary>
            Gets a reference to the underlying stream.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.GlobalThrottledStream.#ctor(System.IO.Stream,System.Int32,System.UInt32)">
            <summary>
            Initialized a GlobalThrottledStream.
            </summary>
            <param name="originalStream">The stream to throttle.</param>
            <param name="ruleSetId">The numeric ID  of the throttling ruleset that will be applied to this stream.  If an invalid ruleSetId is provided, no throttling will be done.</param>
            <param name="remoteIpAddress">The remote IP address that will be receiving this stream.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.GlobalThrottledStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.  This method blocks until the throttled read operation has completed.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of offset and count is larger than the buffer length. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.NotSupportedException">The base stream does not support reading. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="M:BPUtil.SimpleHttp.GlobalThrottledStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.  This method blocks until the throttled write operation has completed.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The base stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.ArgumentException">The sum of offset and count is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="P:BPUtil.SimpleHttp.GlobalThrottledStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:BPUtil.SimpleHttp.GlobalThrottledStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <value></value>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:BPUtil.SimpleHttp.GlobalThrottledStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <value></value>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="P:BPUtil.SimpleHttp.GlobalThrottledStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <value></value>
            <returns>A long value representing the length of the stream in bytes.</returns>
            <exception cref="T:System.NotSupportedException">The base stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:BPUtil.SimpleHttp.GlobalThrottledStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <value></value>
            <returns>The current position within the stream.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The base stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:BPUtil.SimpleHttp.GlobalThrottledStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        </member>
        <member name="M:BPUtil.SimpleHttp.GlobalThrottledStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"></see> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The base stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:BPUtil.SimpleHttp.GlobalThrottledStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.NotSupportedException">The base stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:BPUtil.SimpleHttp.GlobalThrottledStream.ThrottlingManager.Initialize(System.Int32)">
            <summary>
            Calling this will enable web server bandwidth throttling and create the specified number of throttling rule sets and initialize them all to "unlimited" speed.
            
            After calling this, you should modify each rule set via ThrottlingManager.BurstIntervalMs and ThrottlingManager.SetBytesPerSecond().
            
            You should only call this function once; additional calls will do nothing.
            
            Please note: throttling is incompatible with ASP.NET
            </summary>
            <param name="numberOfThrottlingRuleSetsToCreate"></param>
        </member>
        <member name="M:BPUtil.SimpleHttp.GlobalThrottledStream.ThrottlingManager.Shutdown">
            <summary>
            Call this when it is time to shut down the app.  Any active, throttled I/O operations will stop because the scheduling thread will be shut down.
            </summary>
        </member>
        <member name="P:BPUtil.SimpleHttp.GlobalThrottledStream.ThrottlingManager.BurstIntervalMs">
            <summary>
            Gets or sets the number of milliseconds between data reads/writes.  When setting this, the value will be clamped between 1 and 1000.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.GlobalThrottledStream.ThrottlingManager.SetBytesPerSecond(System.Int32,System.Int64)">
            <summary>
            Sets the bytes per second throttle for this rule.  All streams using this rule share the same bandwidth pool that you set here.  (can be set at any time, even while streams are active).
            
            If less than 0, the value is clamped to 0.
            If 0, the streams using this rule will be unthrottled.
            </summary>
            <param name="ruleSetId"></param>
            <param name="bytesPerSecond"></param>
        </member>
        <member name="T:BPUtil.SimpleHttp.GlobalThrottledStream.ThrottlingRuleSet">
            <summary>
            Performs I/O operations for a group of streams.
            </summary>
        </member>
        <member name="T:BPUtil.SimpleHttp.GlobalThrottledStream.IOOperation">
            <summary>
            Maintans the state of a throttled read or write operation.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.GlobalThrottledStream.IOOperation.leftOverFractionalBytes">
            <summary>
            We can only transmit whole numbers of bytes, so this field stores the fractional remainder.
            This fractional part must be counted, or else data transmission will stop entirely if the 
            allowed bytes per interval goes below 1.
            </summary>
        </member>
        <member name="T:BPUtil.SimpleHttp.GlobalThrottledStream.EventWaitHandleWrapper">
            <summary>
            Contains an EventWaitHandle and a value indicating the number of bytes that may be processed after the EventWaitHandle is released.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpProcessor.tcpClient">
            <summary>
            The underlying tcpClient which handles the network connection.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpProcessor.srv">
            <summary>
            The HttpServer instance that accepted this request.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpProcessor.tcpStream">
            <summary>
            This stream is for reading and writing binary data.
            
            Be careful to flush [tcpStream] or [outputStream] before switching between them!!
            
            This stream is typically either a NetworkStream or a GzipStream.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpProcessor.outputStream">
            <summary>
            This stream is for writing text data.
            Be careful to flush [tcpStream] or [outputStream] before switching between them!!
            </summary>
        </member>
        <member name="P:BPUtil.SimpleHttp.HttpProcessor.rawOutputStream">
            <summary>
            Be careful to flush each output stream before using a different one!!
            
            This stream is for writing binary data.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpProcessor.requestCookies">
            <summary>
            The cookies sent by the remote client.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpProcessor.responseCookies">
            <summary>
            The cookies to send to the remote client.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpProcessor.http_method">
            <summary>
            The Http method used.  i.e. "POST" or "GET"
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpProcessor.base_uri_this_server">
            <summary>
            The base Uri for this server, containing its host name and port.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpProcessor.request_url">
            <summary>
            The requested url.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpProcessor.http_protocol_versionstring">
            <summary>
            The protocol version string sent by the client.  e.g. "HTTP/1.1"
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpProcessor.requestedPage">
            <summary>
            <para>The path to and name of the requested page, not including the first '/'.</para>
            <para>For example, if the URL was "/articles/science/moon.html?date=2011-10-21", requestedPage would be "articles/science/moon.html".</para>
            <para>URL-encoded characters remain url-encoded. E.g. "File%20Name.jpg".</para>
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpProcessor.httpHeaders">
            <summary>
            A Dictionary mapping http header names to values. Names are all converted to lower case before being added to this Dictionary.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpProcessor.httpHeadersRaw">
            <summary>
            A Dictionary mapping http header names to values. Names are left in their raw form, and may include capital letters.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpProcessor.PostParams">
            <summary>
            A SortedList mapping lower-case keys to values of parameters.  This list is populated if and only if the request was a POST request with mimetype "application/x-www-form-urlencoded".
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpProcessor.RawPostParams">
            <summary>
            A SortedList mapping keys to values of parameters.  No character case conversion is applied in this list.  This list is populated if and only if the request was a POST request with mimetype "application/x-www-form-urlencoded".
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpProcessor.QueryString">
            <summary>
            A SortedList mapping lower-case keys to values of parameters.  This list is populated parameters that were appended to the url (the query string).  e.g. if the url is "mypage.html?arg1=value1&amp;arg2=value2", then there will be two parameters ("arg1" with value "value1" and "arg2" with value "value2")
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpProcessor.RawQueryString">
            <summary>
            A SortedList mapping keys to values of parameters.  No character case conversion is applied in this list.  This list is populated parameters that were appended to the url (the query string).  e.g. if the url is "mypage.html?arg1=value1&amp;arg2=value2", then there will be two parameters ("arg1" with value "value1" and "arg2" with value "value2")
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpProcessor.postContentType">
            <summary>
            The mimetype of the posted content.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpProcessor.postFormDataRaw">
            <summary>
            The raw posted content as a string, populated only if the mimetype was "application/x-www-form-urlencoded"
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpProcessor.responseWritten">
            <summary>
            A flag that is set when WriteSuccess(), WriteFailure(), or WriteRedirect() is called.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpProcessor.keepAliveRequested">
            <summary>
            True if a "Connection: keep-alive;" header was received from the client.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpProcessor.keepAlive">
            <summary>
            True if a "Connection: keep-alive;" header was sent to the client.
            This flag is reset to false at the start of each request.
            </summary>
        </member>
        <member name="P:BPUtil.SimpleHttp.HttpProcessor.IsLanConnection">
            <summary>
            Returns true if the remote client's IP address is in the same subnet as any of the server's IP addresses.
            </summary>
        </member>
        <member name="P:BPUtil.SimpleHttp.HttpProcessor.IsLocalConnection">
            <summary>
            Returns true if the remote client's IP address is an exact match with any of the server's IP addresses.
            </summary>
        </member>
        <member name="P:BPUtil.SimpleHttp.HttpProcessor.RemoteIPAddressStr">
            <summary>
            Returns the remote client's IP address as a string, or null if the remote IP address is somehow not available.
            </summary>
        </member>
        <member name="P:BPUtil.SimpleHttp.HttpProcessor.RemoteIPAddress">
            <summary>
            Returns the remote client's IP address, or null if the remote IP address is somehow not available.
            </summary>
        </member>
        <member name="P:BPUtil.SimpleHttp.HttpProcessor.RemoteIPAddressInt">
            <summary>
            Returns the remote client's IPv4 address as a 32 bit unsigned integer.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpProcessor.secure_https">
            <summary>
            If true, the connection is secure.
            </summary>
        </member>
        <member name="P:BPUtil.SimpleHttp.HttpProcessor.compressionType">
            <summary>
            The type of compression that will be used for the response stream.
            </summary>
        </member>
        <member name="P:BPUtil.SimpleHttp.HttpProcessor.PostBodyStream">
            <summary>
            Gets the MemoryStream containing the POST content. It will be seeked to the beginning before this HttpProcessor is sent to the HttpServer for handling. For non-POST requests, this will be null.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.Process">
            <summary>
            Processes the request.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.IsOrdinaryDisconnectException(System.Exception)">
            <summary>
            Returns true if the specified Exception is a SocketException or EndOfStreamException or if one of these exception types is contained within the InnerException tree.
            </summary>
            <param name="ex">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.parseRequest">
            <summary>
            Parses the first line of the http request to get the request method, url, and protocol version.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.readHeaders">
            <summary>
            Parses the http headers
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.AddOrUpdateHeaderValue(System.String,System.String)">
            <summary>
            Adds or updates the header with the specified value.  If the header already has a value in our map(s), a comma will be appended, then the new value will be appended.
            </summary>
            <param name="headerName"></param>
            <param name="value"></param>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.handleGETRequest">
            <summary>
            Asks the HttpServer to handle this request as a GET request.  If the HttpServer does not write a response code header, this will write a generic failure header.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.handlePOSTRequest">
            <summary>
            This post data processing just reads everything into a memory stream.
            This is fine for smallish things, but for large stuff we should really
            hand an input stream to the request processor. However, the input stream 
            we hand to the user's code needs to see the "end of the stream" at this 
            content length, because otherwise it won't know where the end is!
            
            If the HttpServer does not write a response code header, this will write a generic failure header.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.CompressResponseIfCompatible">
            <summary>
            Automatically compresses the response body using gzip encoding, if the client requested it.
            Must be called BEFORE writeSuccess().
            Note that the Content-Length header, if provided, should be the COMPRESSED length, so you likely won't know what value to use.  Omit the header instead.
            Returns true if the response will be compressed, and sets this.compressionType.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.EnableCompressionIfSet">
            <summary>
            Called automatically by writeSuccess method; flushes the existing output streams and wraps them in a gzipstream if gzip compression is to be used.
            </summary>
        </member>
        <member name="P:BPUtil.SimpleHttp.HttpProcessor.ClientRequestsGZipCompression">
            <summary>
            Returns true if the client has requested gzip compression.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.writeSuccess(System.String,System.Int64,System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean)">
            <summary>
            Writes the response headers for a successful response.  Call this one time before writing your response, after you have determined that the request is valid.
            </summary>
            <param name="contentType">The MIME type of your response.</param>
            <param name="contentLength">(OPTIONAL) The length of your response, in bytes, if you know it.</param>
            <param name="responseCode">(OPTIONAL) The response code and optional status string.</param>
            <param name="additionalHeaders">(OPTIONAL) Additional headers to include in the response.</param>
            <param name="keepAlive">(OPTIONAL) If true, sends the header "Connection: keep-alive" instead of "Connection: close". If you use keepAlive, you must either specify a contentLength (and honor it) or use chunked transfer encoding. If you specify keepAlive with a negative contentLength, the header "Transfer-Encoding: chunked" will automatically be added.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.writeFailure(System.String,System.String)">
            <summary>
            Writes a failure response header.  Call this one time to return an error response.
            </summary>
            <param name="code">(OPTIONAL) The http error code (including explanation entity).  For example: "404 Not Found" where 404 is the error code and "Not Found" is the explanation.</param>
            <param name="description">(OPTIONAL) A description string to send after the headers as the response.  This is typically shown to the remote user in his browser.  If null, the code string is sent here.  If "", no response body is sent by this function, and you may or may not want to write your own.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.writeRedirect(System.String)">
            <summary>
            Writes a redirect header instructing the remote user's browser to load the URL you specify.  Call this one time and do not write any other data to the response stream.
            </summary>
            <param name="redirectToUrl">URL to redirect to.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.writeWebSocketUpgrade">
            <summary>
            Writes response headers to finish the WebSocket handshake with the client. No extensions are supported (such as compression) at this time.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.writeFullResponseUTF8(System.String,System.String,System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Writes the specified response with the Content-Length header set appropriately.
            </summary>
            <param name="body">Data to send in the response. This string will be encoded as UTF8.</param>
            <param name="contentType">Content-Type header value. e.g. "text/html; charset=utf-8"</param>
            <param name="responseCode">(OPTIONAL) The response code and optional status string.</param>
            <param name="additionalHeaders">(OPTIONAL) Additional headers to include in the response.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.writeFullResponseBytes(System.Byte[],System.String,System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Writes the specified response with the Content-Length header set appropriately.
            </summary>
            <param name="body">Data to send in the response.</param>
            <param name="contentType">Content-Type header value. e.g. "application/octet-stream"</param>
            <param name="responseCode">(OPTIONAL) The response code and optional status string.</param>
            <param name="additionalHeaders">(OPTIONAL) Additional headers to include in the response.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.GetHeaderValue(System.String,System.String)">
            <summary>
            Gets the value of the header, or null if the header does not exist.  The name is case insensitive.
            </summary>
            <param name="name">The case insensitive name of the header to get the value of.</param>
            <param name="defaultValue">The default value to return, in case the value did not exist.</param>
            <returns>The value of the header, or null if the header did not exist.</returns>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpProcessor.proxyResponseThreadPool">
            <summary>
            A thread pool to be used when additional threads are needed for proxying data.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.ProxyTo(System.String,System.Int32,System.Boolean,BPUtil.SimpleHttp.ProxyDataBuffer,System.String,System.Boolean)">
            <summary>
            Acts as a proxy server, sending the request to a different URL.  This method starts a new (and unpooled) thread to handle the response from the remote server.
            The "Host" header is rewritten (or added) and output as the first header.
            </summary>
            <param name="newUrl">The URL to proxy the original request to.</param>
            <param name="networkTimeoutMs">The send and receive timeout to set for both TcpClients, in milliseconds.</param>
            <param name="acceptAnyCert">If true, certificate validation will be disabled for outgoing https connections.</param>
            <param name="snoopy">If non-null, proxied communication will be copied into this object so you can snoop on it.</param>
            <param name="host">The value of the host header, also used in SSL authentication. If null or whitespace, it is set from the [newUrl] parameter.</param>
            <param name="singleRequestOnly">If true, a Connection: close header will be added, and any existing Connection header will be dropped.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.ParseQueryStringArguments(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Parses the specified query string and returns a sorted list containing the arguments found in the specified query string.  Can also be used to parse the POST request body if the mimetype is "application/x-www-form-urlencoded".
            </summary>
            <param name="queryString"></param>
            <param name="requireQuestionMark"></param>
            <param name="preserveKeyCharacterCase">(Optional) If true, query string argument keys will be case sensitive.</param>
            <param name="convertPlusToSpace">(Optional) If true, query string argument values will have any plus signs converted to spaces before URL decoding.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.GetParam(System.String)">
            <summary>
            Returns the value of the Query String parameter with the specified key.
            </summary>
            <param name="key">A case insensitive key.</param>
            <returns>The value of the key, or empty string if the key does not exist or has no value.</returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.GetIntParam(System.String,System.Int32)">
            <summary>
            Returns the value of the Query String parameter with the specified key.
            </summary>
            <param name="key">A case insensitive key.</param>
            <param name="defaultValue">The default value to return, in case the value did not exist or was not compatible with the data type.</param>
            <returns>The value of the key, or [defaultValue] if the key does not exist or has no suitable value.</returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.GetLongParam(System.String,System.Int64)">
            <summary>
            Returns the value of the Query String parameter with the specified key.
            </summary>
            <param name="key">A case insensitive key.</param>
            <param name="defaultValue">The default value to return, in case the value did not exist or was not compatible with the data type.</param>
            <returns>The value of the key, or [defaultValue] if the key does not exist or has no suitable value.</returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.GetDoubleParam(System.String,System.Double)">
            <summary>
            Returns the value of the Query String parameter with the specified key.
            </summary>
            <param name="key">A case insensitive key.</param>
            <param name="defaultValue">The default value to return, in case the value did not exist or was not compatible with the data type.</param>
            <returns>The value of the key, or [defaultValue] if the key does not exist or has no suitable value.</returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.GetBoolParam(System.String)">
            <summary>
            Returns the value of the Query String parameter with the specified key.
            </summary>
            <param name="key">A case insensitive key.</param>
            <returns>The value of the key. This function interprets a value of "1" or "true" (case insensitive) as being true.  Any other parameter value is interpreted as false.</returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.GetQSParam(System.String)">
            <summary>
            Returns the value of the Query String parameter with the specified key.
            </summary>
            <param name="key">A case insensitive key.</param>
            <returns>The value of the key, or empty string if the key does not exist or has no value.</returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.GetQSIntParam(System.String,System.Int32)">
            <summary>
            Returns the value of the Query String parameter with the specified key.
            </summary>
            <param name="key">A case insensitive key.</param>
            <param name="defaultValue">The default value to return, in case the value did not exist or was not compatible with the data type.</param>
            <returns>The value of the key, or [defaultValue] if the key does not exist or has no suitable value.</returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.GetQSLongParam(System.String,System.Int64)">
            <summary>
            Returns the value of the Query String parameter with the specified key.
            </summary>
            <param name="key">A case insensitive key.</param>
            <param name="defaultValue">The default value to return, in case the value did not exist or was not compatible with the data type.</param>
            <returns>The value of the key, or [defaultValue] if the key does not exist or has no suitable value.</returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.GetQSDoubleParam(System.String,System.Double)">
            <summary>
            Returns the value of the Query String parameter with the specified key.
            </summary>
            <param name="key">A case insensitive key.</param>
            <param name="defaultValue">The default value to return, in case the value did not exist or was not compatible with the data type.</param>
            <returns>The value of the key, or [defaultValue] if the key does not exist or has no suitable value.</returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.GetQSBoolParam(System.String)">
            <summary>
            Returns the value of the Query String parameter with the specified key.
            </summary>
            <param name="key">A case insensitive key.</param>
            <returns>The value of the key. This function interprets a value of "1" or "true" (case insensitive) as being true.  Any other parameter value is interpreted as false.</returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.GetPostParam(System.String)">
            <summary>
            Returns the value of a parameter sent via POST with MIME type "application/x-www-form-urlencoded".
            </summary>
            <param name="key">A case insensitive key.</param>
            <returns>The value of the key, or empty string if the key does not exist or has no value.</returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.GetPostIntParam(System.String,System.Int32)">
            <summary>
            Returns the value of a parameter sent via POST with MIME type "application/x-www-form-urlencoded".
            </summary>
            <param name="key">A case insensitive key.</param>
            <param name="defaultValue">The default value to return, in case the value did not exist or was not compatible with the data type.</param>
            <returns>The value of the key, or [defaultValue] if the key does not exist or has no suitable value.</returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.GetPostLongParam(System.String,System.Int64)">
            <summary>
            Returns the value of a parameter sent via POST with MIME type "application/x-www-form-urlencoded".
            </summary>
            <param name="key">A case insensitive key.</param>
            <param name="defaultValue">The default value to return, in case the value did not exist or was not compatible with the data type.</param>
            <returns>The value of the key, or [defaultValue] if the key does not exist or has no suitable value.</returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.GetPostDoubleParam(System.String,System.Double)">
            <summary>
            Returns the value of a parameter sent via POST with MIME type "application/x-www-form-urlencoded".
            </summary>
            <param name="key">A case insensitive key.</param>
            <param name="defaultValue">The default value to return, in case the value did not exist or was not compatible with the data type.</param>
            <returns>The value of the key, or [defaultValue] if the key does not exist or has no suitable value.</returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.GetPostBoolParam(System.String)">
            <summary>
            Returns the value of a parameter sent via POST with MIME type "application/x-www-form-urlencoded".
            </summary>
            <param name="key">A case insensitive key.</param>
            <returns>The value of the key. This function interprets a value of "1" or "true" (case insensitive) as being true.  Any other parameter value is interpreted as false.</returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.CheckIfStillConnected">
            <summary>
            Polls the socket to see if it has closed.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BPUtil.SimpleHttp.HttpProcessor.HttpProcessorException">
            <summary>
            An exception containing an HTTP response code and text.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpProcessor.HttpProcessorException.#ctor(System.String)">
            <summary>
            Constructs an exception containing an HTTP response code and text.
            </summary>
            <param name="message">Http response code and text, e.g. "413 Entity Too Large"</param>
        </member>
        <member name="T:BPUtil.SimpleHttp.HttpProcessor.HttpProtocolException">
            <summary>
            Occurs when the client committed a protocol violation.
            </summary>
        </member>
        <member name="T:BPUtil.SimpleHttp.HttpProcessor.EndOfStreamException">
            <summary>
            Occurs when the end of stream is found during request processing. Inherits from <see cref="T:BPUtil.SimpleHttp.HttpProcessor.HttpProtocolException"/>.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpServer.port">
            <summary>
            If > -1, the server was told to listen for http connections on this port.  Port 0 causes the socket library to choose its own port.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpServer.secure_port">
            <summary>
            If > -1, the server was told to listen for https connections on this port.  Port 0 causes the socket library to choose its own port.
            </summary>
        </member>
        <member name="P:BPUtil.SimpleHttp.HttpServer.Port_http">
            <summary>
            The actual port the http server is listening on.  Will be -1 if not listening.
            </summary>
        </member>
        <member name="P:BPUtil.SimpleHttp.HttpServer.Port_https">
            <summary>
            The actual port the https server is listening on.  Will be -1 if not listening.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpServer.XRealIPHeader">
            <summary>
            If true, the IP address of remote hosts will be learned from the HTTP header named "X-Real-IP".  Also requires the method <see cref="M:BPUtil.SimpleHttp.HttpServer.IsTrustedProxyServer(System.Net.IPAddress)"/> to return true.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleHttp.HttpServer.XForwardedForHeader">
            <summary>
            If true, the IP address of remote hosts will be learned from the HTTP header named "X-Forwarded-For".  Also requires the method <see cref="M:BPUtil.SimpleHttp.HttpServer.IsTrustedProxyServer(System.Net.IPAddress)"/> to return true.
            </summary>
        </member>
        <member name="E:BPUtil.SimpleHttp.HttpServer.SocketBound">
            <summary>
            Raised when a listening socket is bound to a port.  The Event Handler passes along a string which can be printed to the console, announcing this event.
            </summary>
        </member>
        <member name="E:BPUtil.SimpleHttp.HttpServer.CertificateExpirationWarning">
            <summary>
            Raised when an SSL connection is made using a certificate that will expire within the next 14 days.  This event will not be raised more than once in a 60 minute period (assuming the same HttpServer instance is used).
            The TimeSpan argument indicates the time to expiration, which may be less than or equal to TimeSpan.Zero if the certificate is expired.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpServer.GetAddressInfo">
            <summary>
            Gets information about the current network interfaces.
            You should work with a local reference to the returned object, because this method is not guaranteed to always return the same instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpServer.#ctor(System.Int32,System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Net.IPAddress)">
            <summary>
            
            </summary>
            <param name="port">The port number on which to accept regular http connections. If -1, the server will not listen for http connections.</param>
            <param name="httpsPort">(Optional) The port number on which to accept https connections. If -1, the server will not listen for https connections.</param>
            <param name="cert">(Optional) Certificate to use for https connections.  If null and an httpsPort was specified, a certificate is automatically created if necessary and loaded from "SimpleHttpServer-SslCert.pfx" in the same directory that the current executable is located in.</param>
            <param name="bindAddr">If not null, the server will bind to this address.  Default: IPAddress.Any.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpServer.#ctor(System.Int32,System.Int32,BPUtil.SimpleHttp.ICertificateSelector,System.Net.IPAddress)">
            <summary>
            
            </summary>
            <param name="port">The port number on which to accept regular http connections. If -1, the server will not listen for http connections.</param>
            <param name="httpsPort">(Optional) The port number on which to accept https connections. If -1, the server will not listen for https connections.</param>
            <param name="certificateSelector">(Optional) Certificate selector to use for https connections.  If null and an httpsPort was specified, a certificate is automatically created if necessary and loaded from "SimpleHttpServer-SslCert.pfx" in the same directory that the current executable is located in.</param>
            <param name="bindAddr">If not null, the server will bind to this address.  Default: IPAddress.Any.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpServer.MakeClientProcessor(System.Net.Sockets.TcpClient,BPUtil.SimpleHttp.HttpServer,BPUtil.SimpleHttp.ICertificateSelector)">
            <summary>
            A function which produces an IProcessor instance, allowing this server to be used for protocols besides HTTP.  By default, this returns a standard HttpProcessor.
            </summary>
            <param name="s"></param>
            <param name="srv"></param>
            <param name="certSelector">An instnace of a type deriving from ICertificateSelector, such as <see cref="T:BPUtil.SimpleHttp.SimpleCertificateSelector"/> or <see cref="T:BPUtil.SimpleHttp.ServerNameCertificateSelector"/>.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpServer.SetCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Sets a new SSL certificate to be used for all future connections;
            </summary>
            <param name="newCertificate"></param>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpServer.GetCertificateExpiration">
            <summary>
            Returns the date in local time after which the certificate is no longer valid.  If the certificate is null, returns DateTime.MaxValue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpServer.GetCertificateFriendlyName">
            <summary>
            Returns the date in local time after which the certificate is no longer valid.  If the certificate is null, returns DateTime.MaxValue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpServer.listen(System.Object)">
            <summary>
            Listens for connections, somewhat robustly.  Does not return until the server is stopped or until more than 100 listener restarts occur in a single day.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpServer.Start">
            <summary>
            Starts listening for connections.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpServer.Stop">
            <summary>
            Stops listening for connections.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpServer.Join(System.Int32)">
            <summary>
            Blocks the calling thread until the http listening threads finish or the timeout expires.  Call this after calling Stop() if you need to wait for the listener to clean up, such as if you intend to start another instance of the server using the same port(s).
            </summary>
            <param name="timeout_milliseconds">Maximum number of milliseconds to wait for the HttpServer Threads to stop.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpServer.handleGETRequest(BPUtil.SimpleHttp.HttpProcessor)">
            <summary>
            Handles an Http GET request.
            </summary>
            <param name="p">The HttpProcessor handling the request.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpServer.handlePOSTRequest(BPUtil.SimpleHttp.HttpProcessor,System.IO.StreamReader)">
            <summary>
            Handles an Http POST request.
            </summary>
            <param name="p">The HttpProcessor handling the request.</param>
            <param name="inputData">The input stream.  If the request's MIME type was "application/x-www-form-urlencoded", the StreamReader will be null and you can obtain the parameter values using p.PostParams, p.GetPostParam(), p.GetPostIntParam(), etc.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpServer.stopServer">
            <summary>
            This is called when the server is stopping.  Perform any cleanup work here.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpServer.shouldLogRequestsToFile">
            <summary>
            If this method returns true, requests should be logged to a file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.HttpServer.IsTrustedProxyServer(System.Net.IPAddress)">
            <summary>
            This method must return true for the <see cref="F:BPUtil.SimpleHttp.HttpServer.XForwardedForHeader"/> and <see cref="F:BPUtil.SimpleHttp.HttpServer.XRealIPHeader"/> flags to be honored.  This method should only return true if the provided remote IP address is trusted to provide the related headers.
            </summary>
            <param name="remoteIpAddress"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.Cookies.Add(System.String,System.String)">
            <summary>
            Adds a cookie with the specified name and value.  The cookie is set to expire immediately at the end of the browsing session.
            </summary>
            <param name="name">The cookie's name.</param>
            <param name="value">The cookie's value.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.Cookies.Add(System.String,System.String,System.TimeSpan)">
            <summary>
            Adds a cookie with the specified name, value, and lifespan.
            </summary>
            <param name="name">The cookie's name.</param>
            <param name="value">The cookie's value.</param>
            <param name="expireTime">The amount of time before the cookie should expire.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.Cookies.Get(System.String)">
            <summary>
            Gets the cookie with the specified name.  If the cookie is not found, null is returned;
            </summary>
            <param name="name">The name of the cookie.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.Cookies.GetValue(System.String)">
            <summary>
            Gets the value of the cookie with the specified name.  If the cookie is not found, an empty string is returned;
            </summary>
            <param name="name">The name of the cookie.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.Cookies.ToString">
            <summary>
            Returns a string of "Set-Cookie: ..." headers (one for each cookie in the collection) separated by "\r\n".  There is no leading or trailing "\r\n".
            </summary>
            <returns>A string of "Set-Cookie: ..." headers (one for each cookie in the collection) separated by "\r\n".  There is no leading or trailing "\r\n".</returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.Cookies.FromString(System.String)">
            <summary>
            Returns a Cookies instance populated by parsing the specified string.  The string should be the value of the "Cookie" header that was received from the remote client.  If the string is null or empty, an empty cookies collection is returned.
            </summary>
            <param name="str">The value of the "Cookie" header sent by the remote client.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.Extensions.ToCookieTime(System.DateTime)">
            <summary>
            Returns the date and time formatted for insertion as the expiration date in a "Set-Cookie" header.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SimpleHttp.Extensions.WriteLineRN(System.IO.TextWriter,System.String)">
            <summary>
            For linux compatibility. The HTTP protocol uses \r\n, but linux normally uses just \n.
            </summary>
            <param name="sw"></param>
            <param name="line"></param>
        </member>
        <member name="T:BPUtil.SimpleHttp.SimpleHttpLogger">
            <summary>
            A class which handles error logging by the http server.  It allows you to (optionally) register an ILogger instance to use for logging.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.SimpleHttpLogger.RegisterLogger(BPUtil.SimpleHttp.ILogger,System.Boolean)">
            <summary>
            (OPTIONAL) Keeps a static reference to the specified ILogger and uses it for http server error logging.  Only one logger can be registered at a time; attempting to register a second logger simply replaces the first one.
            </summary>
            <param name="loggerToRegister">The logger that should be used when an error message needs logged.  If null, logging will be disabled.</param>
            <param name="logVerboseMessages">If true, additional error reporting will be enabled.  These errors include things that can occur frequently during normal operation, so it may be spammy.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.SimpleHttpLogger.UnregisterLogger">
            <summary>
            Unregisters the currently registered logger (if any) by calling RegisterLogger(null);
            </summary>
        </member>
        <member name="T:BPUtil.SimpleHttp.ILogger">
            <summary>
            An interface which handles logging of exceptions and strings.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleHttp.ILogger.Log(System.Exception,System.String)">
            <summary>
            Log an exception, possibly with additional information provided to assist with debugging.
            </summary>
            <param name="ex">An exception that was caught.</param>
            <param name="additionalInformation">Additional information about the exception.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.ILogger.Log(System.String)">
            <summary>
            Log a string.
            </summary>
            <param name="str">A string to log.</param>
        </member>
        <member name="M:BPUtil.SimpleHttp.ILogger.LogRequest(System.DateTime,System.String)">
            <summary>
            Log a request that was made to the server.
            </summary>
            <param name="time">The time of the request, from which the log file name will be chosen.</param>
            <param name="line">The string to log, including a timestamp and all information desired. This string should not contain line breaks.</param>
        </member>
        <member name="F:BPUtil.StackHelper.currentThreadSavedStack">
            <summary>
            A ThreadStatic static field which can be used to save a reference to a StackTrace.
            </summary>
        </member>
        <member name="P:BPUtil.StackHelper.StackTrace">
            <summary>
            Gets <see cref="F:BPUtil.StackHelper.currentThreadSavedStack"/> as a string.
            </summary>
        </member>
        <member name="T:BPUtil.StringCache">
            <summary>
            Provides temporary storage of string key/value pairs, with configurable limits for cache size and item age.
            All public methods of this class use locking to achieve thread-safety, which could have negative performance implications if used very heavily.
            </summary>
        </member>
        <member name="M:BPUtil.StringCache.#ctor(System.Int64,System.Double)">
            <summary>
            Creates a new StringCache for caching string key/value pairs.  The maximum size and age of the cache may be specified.
            </summary>
            <param name="maxCacheSizeBytes">(Optional) Approximate maximum size in bytes of the cache. Default: 2000000 (2 MB).</param>
            <param name="maxCacheAgeMinutes">(Optional) Maximum age in minutes that an item can become before it expires. Default: 10 minutes.</param>
        </member>
        <member name="M:BPUtil.StringCache.Add(System.String,System.String)">
            <summary>
            Adds the specified key/value pair if the key does not already exist in the cache. Otherwise, updates the existing item.  If an existing item is updated, its "Created" date is not updated.
            </summary>
            <param name="key">Key string.  Null and empty string are treated as identical.</param>
            <param name="value"></param>
        </member>
        <member name="M:BPUtil.StringCache.Get(System.String)">
            <summary>
            Returns the value that is cached for the given key, or null.
            </summary>
            <param name="key">Key string.  Null and empty string are treated as identical.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringCache.Get(System.String,System.Int64@)">
            <summary>
            Returns the value that is cached for the given key, or null.
            </summary>
            <param name="key">Key string.  Null and empty string are treated as identical.</param>
            <param name="cacheAgeMs">Milliseconds age of the cached value.  Will be 0 if no item was cached.</param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.StringParser">
            <summary>
            Provides an interface for parsing strings.
            </summary>
        </member>
        <member name="P:BPUtil.StringParser.CurrentIndex">
            <summary>
            Gets the current parsing index.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BPUtil.StringParser.MyString">
            <summary>
            Gets the string associated with this StringParser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringParser.IsStarted">
            <summary>
            Returns true if the current parsing index is > 0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringParser.IsFinished">
            <summary>
            Returns true if the entire string has been parsed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringParser.Peek(System.Int32)">
            <summary>
            Returns a single character without consuming it.
            </summary>
            <param name="offset">Offset from current parsing index. If this offset yields an invalid index, (char)0 is returned.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringParser.PeekString(System.Int32)">
            <summary>
            Returns the next [count] characters without consuming them.
            </summary>
            <param name="count">Number of characters to return. If this many characters are not available, "" is returned.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringParser.ThrowAway(System.UInt32)">
            <summary>
            Consumes the specified number of characters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringParser.Get">
            <summary>
            Consumes a single character and returns it. If there are no characters left, returns (char)0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringParser.Get(System.UInt32)">
            <summary>
            Consumes the specified number of characters (up to the number available before end of string) and returns a copy of what was consumed.
            </summary>
            <param name="count">The requested number of characters. The returned string may be shorter (or empty) if the end of the string is reached.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringParser.ThrowAwayUntil(System.Char)">
            <summary>
            Consumes characters up to but not including the specified character.  If this character is not found, the remainder of the string is consumed.
            </summary>
            <param name="c">Character to consume up to, but not through.</param>
        </member>
        <member name="M:BPUtil.StringParser.ThrowAwayUntil(System.String)">
            <summary>
            Consumes characters up to but not including the specified substring.  If the substring is not found, the remainder of the string is consumed.
            </summary>
            <param name="subStr">String to consume up to, but not through.</param>
        </member>
        <member name="M:BPUtil.StringParser.ThrowAwayUntilAny(System.Char[])">
            <summary>
            Consumes characters until one of the specified characters is found.  If none are found, the remainder of the string is consumed.
            </summary>
            <param name="chars">Characters to end consumption upon reaching.</param>
        </member>
        <member name="M:BPUtil.StringParser.ThrowAwayThrough(System.Char)">
            <summary>
            Consumes characters up to and including the specified character.  If this character is not found, the remainder of the string is consumed.
            </summary>
            <param name="c">Character to consume through.</param>
        </member>
        <member name="M:BPUtil.StringParser.ThrowAwayThrough(System.String)">
            <summary>
            Consumes characters up to and including the specified substring.  If the substring is not found, the remainder of the string is consumed.
            </summary>
            <param name="subStr">String to consume through.</param>
        </member>
        <member name="M:BPUtil.StringParser.ThrowAwayThroughAny(System.Char[])">
            <summary>
            Consumes characters until one of the specified characters is found, consuming that character too.  If none are found, the remainder of the string is consumed.
            </summary>
            <param name="chars">Consumption ends after one of these is consumed.</param>
        </member>
        <member name="M:BPUtil.StringParser.GetUntil(System.Char)">
            <summary>
            Consumes all characters up to but not including the specified character.  If this character is not found, the remainder of the string is consumed.  A copy of the consumed value is returned.
            </summary>
            <param name="c">Character to consume up to, but not through.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringParser.GetUntil(System.String)">
            <summary>
            Consumes all characters up to but not including the specified substring.  If the substring is not found, the remainder of the string is consumed.  A copy of the consumed value is returned.
            </summary>
            <param name="subStr">String to consume up to, but not through.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringParser.GetUntilAny(System.Char[])">
            <summary>
            Consumes characters until one of the specified characters is found.  If none are found, the remainder of the string is consumed.  A copy of the consumed value is returned.
            </summary>
            <param name="chars">Characters to end consumption upon reaching.</param>
        </member>
        <member name="M:BPUtil.StringParser.GetUntilAny(System.Char[],System.Int32)">
            <summary>
            Consumes characters until one of the specified characters is found or the specified index is reached.  If none are found and the index is not reached, the remainder of the string is consumed.  A copy of the consumed value is returned.
            </summary>
            <param name="chars">Characters to end consumption upon reaching.</param>
            <param name="stopAt">Index to end consumption upon reaching.</param>
        </member>
        <member name="M:BPUtil.StringParser.GetThrough(System.Char)">
            <summary>
            Consumes all characters up to and including the specified character.  If this character is not found, the remainder of the string is consumed.  A copy of the consumed value is returned.
            </summary>
            <param name="c">Character to consume through.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringParser.GetThrough(System.String)">
            <summary>
            Consumes all characters up to and including the specified substring.  If the substring is not found, the remainder of the string is consumed.  A copy of the consumed value is returned.
            </summary>
            <param name="subStr">String to consume through.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringParser.GetThroughAny(System.Char[])">
            <summary>
            Consumes characters until one of the specified characters is found, consuming that character too.  If none are found, the remainder of the string is consumed.  A copy of the consumed value is returned.
            </summary>
            <param name="chars">Consumption ends after one of these is consumed.</param>
        </member>
        <member name="M:BPUtil.StringParser.ThrowAwayWhitespace">
            <summary>
            Consumes any whitespace chars starting at the current parsing index until a non-whitespace char is reached or the end of the string is reached.
            </summary>
        </member>
        <member name="M:BPUtil.StringParser.ThrowAwayChars(System.Char[])">
            <summary>
            Consumes any of the specified chars starting at the current parsing index until an unspecified char is reached or the end of the string is reached.
            </summary>
            <param name="chars">Characters to consume.</param>
        </member>
        <member name="M:BPUtil.StringParser.GetContextForErrorMessages">
            <summary>
            Returns a string up to (<see cref="F:BPUtil.StringParser.iContextStringRadiusDefault"/> * 2) characters long containing the characters around the current parsing index.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringParser.GetContextForErrorMessages(System.UInt32)">
            <summary>
            Returns a string up to (n * 2) characters long containing the characters around the current parsing index.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringParser.SetContextStringRadiusDefault(System.UInt32)">
            <summary>
            Sets the default length of context string used when no length is specified in <see cref="M:BPUtil.StringParser.GetContextForErrorMessages"/>. This value is initialized to 40.
            </summary>
            <param name="defRadius">Maximum length of context string used when no length is specified in <see cref="M:BPUtil.StringParser.GetContextForErrorMessages"/>.</param>
        </member>
        <member name="M:BPUtil.StringParser.CppSubstr(System.String,System.Int32,System.Int32)">
            <summary>
            Behaves like std::string::substr from C++.
            </summary>
            <param name="str">String to get a substring from.</param>
            <param name="pos">
            <para>Position of the first character to be copied as a substring.</para>
            <para>If this is equal to the string length, the function returns an empty string.</para>
            <para>If this is greater than the string length, it throws IndexOutOfRangeException.</para>
            <para>Note: The first character is denoted by a value of 0 (not 1).</para>
            </param>
            <param name="len">
            <para>Number of characters to include in the substring (if the string is shorter, as many characters as possible are used).</para>
            <para>A value of int.MaxValue indicates all characters until the end of the string.</para>
            </param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringSorting.CompareStringsContainingIntegers(System.String,System.String)">
            <summary>
            <para>Compare character-by-character, but whenever we encounter a digit, grab all consecutive digits and treat them as a single integer.</para>
            <para>Integers shall be considered greater than whitespace characters but less than any other type of character (a,b,c,$,%, etc).</para>
            <para>Additionally, null strings are less than non-null strings.</para>
            <para>Thus, the set ["a50", "a3", "a400", "a s", "as", "as", null, null] would be sorted to:</para>
            <para>[null, null, "a s", "a3", "a50", "a400", "as", "as"]</para>
            </summary>
            <param name="a">One of two strings to compare.</param>
            <param name="b">One of two strings to compare.</param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.TempDir">
            <summary>
            <para>Manages the lifecycle of a temporary directory, creating it in the constructor and deleting it when dispose is called.</para>
            <para>Use within using(TempDir tmp = new TempDir()) { code } or otherwise handle disposing reliably.</para>
            <para>In the event of an application or system crash or incorrect usage of this class, the temporary directory and its contents may remain on disk.</para>
            </summary>
        </member>
        <member name="F:BPUtil.TempDir.FullName">
            <summary>
            Full path of this temporary directory.
            </summary>
        </member>
        <member name="M:BPUtil.TempDir.#ctor">
            <summary>
            Constructs a TempDir using a random directory name.
            </summary>
        </member>
        <member name="M:BPUtil.TempDir.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a TempDir using the specified unique directory name.
            </summary>
            <param name="dirName">A directory name which is unique to this application.  It will be created in the directory returned by <see cref="M:System.IO.Path.GetTempPath"/>.</param>
            <param name="deleteIfExists">If true, and the specified directory already exists, it will be deleted along with all its contents (dangerous!).  If false, an exception will be thrown if the directory already exists.</param>
        </member>
        <member name="T:BPUtil.WaitingQueue`1">
            <summary>
            A thread-safe queue which provides a mechanism to block the current thread until an item is available from the queue.
            </summary>
        </member>
        <member name="M:BPUtil.WaitingQueue`1.CancelAllRequests">
            <summary>
            Cancels all <see cref="M:BPUtil.WaitingQueue`1.TryDequeue(`0@,System.Int32)"/> requests and prevents further blocking if <see cref="M:BPUtil.WaitingQueue`1.TryDequeue(`0@,System.Int32)"/> is called again.
            </summary>
        </member>
        <member name="M:BPUtil.WaitingQueue`1.Enqueue(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:BPUtil.WaitingQueue`1"/>.
            </summary>
            <param name="item">The object to add to the end of the <see cref="T:BPUtil.WaitingQueue`1"/>. The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
        </member>
        <member name="M:BPUtil.WaitingQueue`1.TryDequeue(`0@,System.Int32)">
            <summary>
            Tries to remove and return the object at the beginning of the <see cref="T:BPUtil.WaitingQueue`1"/>. This function will block until an object is obtained or the timeout expires.
            </summary>
            <param name="result">When this method returns, if the operation was successful, result contains the object removed. If no object was available to be removed, the value is unspecified.</param>
            <param name="millisecondsTimeout">Maximum number of milliseconds to wait for an item to become available. If -1, the wait may be indefinite.</param>
            <returns></returns>
        </member>
        <member name="P:BPUtil.WaitingQueue`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:BPUtil.WaitingQueue`1"/>.
            </summary>
        </member>
        <member name="T:BPUtil.CachedObject`1">
            <summary>
            Manages automatic caching of a read-only object that is expensive to create.
            </summary>
            <typeparam name="T">Type this CachedObject will manage.</typeparam>
        </member>
        <member name="M:BPUtil.CachedObject`1.#ctor(System.Func{`0},System.TimeSpan,System.TimeSpan,System.Action{System.Exception})">
            <summary>
            Creates a new CachedObject.
            </summary>
            <param name="createNewObjectFunc">A function which returns a new instance of the managed object.  This is called whenever a new instance is needed.</param>
            <param name="minAge">Minimum age.  After the cached instance is this old, retrieving the cached instance will trigger a new instance to be created asynchronously.  The existing object will still be returned without delay.</param>
            <param name="maxAge">Maximum age.  After the cached instance is this old, it can no longer be returned.  Requests for a cached instance will block until an object newer than this is available.</param>
            <param name="ReportException">An action that will be called if an exception is thrown while reloading the cached object in a background thread.  If null, uses Logger.Debug.</param>
        </member>
        <member name="T:BPUtil.CachedObject`1.CachedInstance">
            <summary>
            Contains an instance of the managed object along with its creation date.
            </summary>
        </member>
        <member name="F:BPUtil.CachedObject`1.CachedInstance.instance">
            <summary>
            An instance of the object.
            </summary>
        </member>
        <member name="F:BPUtil.CachedObject`1.CachedInstance.createdAt">
            <summary>
            Stopwatch time when this instance was created.
            </summary>
        </member>
        <member name="F:BPUtil.CachedObject`1.updateCounter">
            <summary>
            The number of [Reload] calls currently active, useful for when we want to avoid multiple concurrent reloads.
            </summary>
        </member>
        <member name="M:BPUtil.CachedObject`1.GetInstance">
            <summary>
            Returns the most recent copy of the object.  The first get may be slow, as the object will need to be created.  You should not expect repeated calls to this method to always return the same instance.  Make a local reference to the instance.
            </summary>
        </member>
        <member name="M:BPUtil.CachedObject`1.Reload">
            <summary>
            Reloads the cached object now without regard for the current age. Returns a reference to the object created by this method.
            </summary>
        </member>
        <member name="T:BPUtil.Compression">
            <summary>
            <para>Provides static methods for compression and decompression.</para>
            <para>Supported Methods:</para>
            <para>DEFLATE</para>
            <para>GZip (Same as DEFLATE but adds a header and checksum)</para>
            </summary>
        </member>
        <member name="M:BPUtil.Compression.GZipCompress(System.Byte[])">
            <summary>
            Compresses a buffer using GZip.
            </summary>
            <param name="buffer">Uncompressed data</param>
            <returns>Compressed data.</returns>
        </member>
        <member name="M:BPUtil.Compression.GZipDecompress(System.Byte[])">
            <summary>
            Decompresses a buffer using GZip.
            </summary>
            <param name="buffer">Compressed data</param>
            <returns>Decompressed data.</returns>
        </member>
        <member name="M:BPUtil.Compression.DeflateCompress(System.Byte[])">
            <summary>
            Compresses a buffer using DEFLATE.
            </summary>
            <param name="buffer">Uncompressed data</param>
            <returns>Compressed data.</returns>
        </member>
        <member name="M:BPUtil.Compression.DeflateDecompress(System.Byte[])">
            <summary>
            Decompresses a buffer using DEFLATE.
            </summary>
            <param name="buffer">Compressed data</param>
            <returns>Decompressed data.</returns>
        </member>
        <member name="T:BPUtil.CSV">
            <summary>
            Contains utility methods for CSV (comma-separated values) file formatting.
            </summary>
        </member>
        <member name="M:BPUtil.CSV.EncodeAsCsvField(System.String)">
            <summary>
            Encodes a string such that it can be written directly to a CSV file as a field.  Any invalid characters will be removed from the output string.  Valid characters are defined by RFC 4180 as the ASCII characters 10 (\n), 13 (\r), and 32-126. Notably, TAB is not considered a valid character.
            </summary>
            <param name="str">The string to encode as a CSV field</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.CSV.LooseEncodeAsCsvField(System.String)">
            <summary>
            Encodes a string such that it can be written to a CSV file as a field. This method does not remove out-of-range characters.
            </summary>
            <param name="str">The string to encode as a CSV field</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.CSV.QuoteCsvField(System.String)">
            <summary>
            Quote every CSV field whether it needs it or not, to help make it idiot-proof.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.CSV.StripInvalidCsvCharacters(System.String)">
            <summary>
            Removes characters that are not allowed in a CSV file according to RFC 4180. Allowed characters are ASCII 10 (\n), 13 (\r), and 32-126. Notably, TAB is not considered a valid character.
            </summary>
            <param name="str">The string to process</param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.CSVFile">
            <summary>
            A class capable of reading and parsing a CSV file.
            </summary>
        </member>
        <member name="F:BPUtil.CSVFile.Headings">
            <summary>
            The first row of the CSV file, if hasHeadings was true during construction, otherwise an empty string array.
            </summary>
        </member>
        <member name="F:BPUtil.CSVFile.Rows">
            <summary>
            <para>An array of string arrays containing the data from the CSV file.</para>
            <example>
            <para>Here is an example of how to iterate through the data.</para>
            <code>
            <para>for (int i = 0; i &lt; Rows.Length; i++)</para>
            <para>{</para>
            <para>    string[] row = Rows[i];</para>
            <para>    for (int x = 0; x &lt; row.Length; x++)</para>
            <para>    {</para>
            <para>        string cell = row[x];</para>
            <para>    }</para>
            <para>}</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="M:BPUtil.CSVFile.StreamingRead(System.IO.StreamReader,System.Func{System.String[],System.Boolean})">
            <summary>
            <para>Reads CSV rows from the stream and allows them to be processed row by row without needing to load the entire stream into memory at once.</para>
            <para>When each row is read, it is sent to [rowCallback].</para>
            <para>If rowCallback returns true, the next row is read.</para>
            <para>If rowCallback returns false, the function returns early.</para>
            <para>Exceptions may be thrown if the CSV file is determined to be invalid.</para>
            </summary>
            <param name="sr">A StreamReader positioned at the beginning of a line in a csv file.</param>
            <param name="rowCallback">A callback method which is called with the value of each row as it is read.  If this function returns false, streaming of the CSV file will end immediately.</param>
        </member>
        <member name="M:BPUtil.CSVFile.StreamingRead(System.IO.StreamReader)">
            <summary>
            <para>Reads CSV rows from the stream and allows them to be processed row by row without needing to load the entire stream into memory at once.</para>
            <para>When each row is read, it is returned via yield return.</para>
            <para>If rowCallback returns true, the next row is read.</para>
            <para>If rowCallback returns false, the function returns early.</para>
            <para>Exceptions may be thrown if the CSV file is determined to be invalid.</para>
            </summary>
            <param name="sr">A StreamReader positioned at the beginning of a line in a csv file.</param>
        </member>
        <member name="M:BPUtil.CSVFile.ToString">
            <summary>
            Produces a string representation of the first row (or headings) for debugging visualization purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.CSVFile.DumpToString">
            <summary>
            Produces CSV output that could be written to a .csv file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.AppInit.WindowsService``1(BPUtil.WindowsServiceInitOptions)">
            <summary>
            <para>Call this from your Main() function, and it takes care of all initialization for a Windows Service app with the following features:</para>
            <list type="bullet">
            <item>Logs separated by month in <see cref="P:BPUtil.Globals.WritableDirectoryBase"/> + "Logs/"</item>
            <item><see cref="P:System.Environment.CurrentDirectory"/> set to <see cref="P:BPUtil.Globals.WritableDirectoryBase"/></item>
            <item>Unhandled exceptions logged.</item>
            <item>(Windows Only) Service Manager GUI with "Open Data Folder" button which opens <see cref="P:BPUtil.Globals.WritableDirectoryBase"/> in Explorer.</item>
            <item>(Windows Only) A temporary instance of the service is automatically started if the debugger is attached.</item>
            <item>If the service has a public static field named "settings" which inherits from SerializableObjectBase, that field will be instantiated if necessary, loaded, then saved if the settings file does not exist.</item>
            </list>
            <para>Notice that some assumptions are made about the architecture of the application.</para>
            <para>When running on linux, this class simply starts the service.</para>
            <para>You may initialize <see cref="T:BPUtil.Globals"/> with custom values, if desired, before calling this method.</para>
            </summary>
            <typeparam name="ServiceType">Type of Service class.</typeparam>
            <param name="options">Optional options for service initialization.</param>
        </member>
        <member name="M:BPUtil.AppInit.LinuxWindowsService``1(``0,BPUtil.WindowsServiceInitOptions,BPUtil.SerializableObjectBase)">
            <summary>
            Takes over where <see cref="M:BPUtil.AppInit.WindowsService``1(BPUtil.WindowsServiceInitOptions)"/> left off.
            </summary>
            <typeparam name="ServiceType"></typeparam>
            <param name="myService"></param>
            <param name="options"></param>
            <param name="settingsObj"></param>
        </member>
        <member name="T:BPUtil.WindowsServiceInitOptions">
            <summary>
            Options for <see cref="M:BPUtil.AppInit.WindowsService``1(BPUtil.WindowsServiceInitOptions)"/>.
            </summary>
        </member>
        <member name="F:BPUtil.WindowsServiceInitOptions.RunForDebugging">
            <summary>
            If true, the service's OnStart() method will be called even if <see cref="P:System.Diagnostics.Debugger.IsAttached"/> is false.  Useful in some development circumstances, such as when launching the application with a performance profiler.
            </summary>
        </member>
        <member name="F:BPUtil.WindowsServiceInitOptions.ServiceManagerButtons_OpenDataFolder">
            <summary>
            If true, the "Open Data Folder" button will be added to the service manager. True by default.
            </summary>
        </member>
        <member name="F:BPUtil.WindowsServiceInitOptions.ServiceManagerButtons_UpdateSettingsFile">
            <summary>
            If true, the "Update Settings File" button may be added to the service manager if other conditions are met. True by default.
            </summary>
        </member>
        <member name="F:BPUtil.WindowsServiceInitOptions.ServiceManagerButtons">
            <summary>
            Buttons to add to the service manager.
            </summary>
        </member>
        <member name="F:BPUtil.WindowsServiceInitOptions.ServiceName">
            <summary>
            If not null or whitespace, this service name will override what was defined in the service's designer file.
            </summary>
        </member>
        <member name="T:BPUtil.AutoDisposeHandle">
            <summary>
            Manages a native OS handle and automatically calls a configurable "release" function on the handle when it is no longer in use, or when the Dispose method is called.
            </summary>
        </member>
        <member name="M:BPUtil.AutoDisposeHandle.Create(System.IntPtr,System.Action{System.IntPtr})">
            <summary>
            Creates a handle. Will return null if [handle] is IntPtr.Zero.
            </summary>
            <param name="handle">The handle to manage.</param>
            <param name="onRelease">This method is called automatically, and the handle is passed in, when this instance is no longer in use or when the Dispose method is called.</param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.BasicEventTimer">
             <summary>
             A class which makes it easy to time different parts of a procedure individually and later report the time in seconds taken for each part.  This class is NOT thread-safe.
             
             Example:
             
             BasicEventTimer timer = new BasicEventTimer();
             
             timer.Start("Event 1");
             timed_procedure_1();
            
             timer.Start("Event 2");
             timed_procedure_2();
             timer.Stop();
             
             untimed_procedure();
             
             timer.Start("Event 3");
             timed_procedure_3();
             timer.Stop();
             
             Console.WriteLine(timer.ToString(Environment.NewLine));
             
             Example output:
             0.01 - Procedure 1
             50.15 - Procedure 2
             1.51 - Procedure 3
             </summary>
        </member>
        <member name="M:BPUtil.BasicEventTimer.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new BasicEventTimer which helps measure execution time of code.
            </summary>
            <param name="numberFormatString">A format string for the (double) number of seconds an event took.</param>
            <param name="mergeSameEventTimes">If true, multiple events with the same name will have their times added together into one record.  Useful when repeating a sequence of operations in a loop.</param>
        </member>
        <member name="M:BPUtil.BasicEventTimer.Reset">
            <summary>
            Stops the timer and clears the list of timed events, restoring this instance to its original state.
            </summary>
        </member>
        <member name="M:BPUtil.BasicEventTimer.Start(System.String)">
            <summary>
            Starts timing a new event, automatically stopping and logging the time for the previous event, if there was one.
            </summary>
            <param name="eventName"></param>
        </member>
        <member name="M:BPUtil.BasicEventTimer.Stop">
            <summary>
            Stops and logs the time for the previously started event, if there was one.
            </summary>
        </member>
        <member name="M:BPUtil.BasicEventTimer.Duration(System.String)">
            <summary>
            Returns the time (in seconds) elapsed for the named event. If the event is not found, returns 0.
            </summary>
        </member>
        <member name="M:BPUtil.BasicEventTimer.DurationTimeSpan(System.String)">
            <summary>
            Returns the time elapsed for the named event. If the event is not found, returns TimeSpan.Zero.
            </summary>
        </member>
        <member name="M:BPUtil.BasicEventTimer.ToString">
            <summary>
            Returns an string containing the time in seconds measured for each event.  Events are separated by HTML "br" tags.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.BasicEventTimer.ToString(System.String)">
            <summary>
            Returns a string containing the time in seconds measured for each event.  Events are separated by the specified string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.BasicEventTimer.ToServerTimingHeader">
            <summary>
            Produces a string that can be set in HTTP response header "Server-Timing" to allow browser developer tools to show these results among other request timing info.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BPUtil.BasicEventTimer.EventCount">
            <summary>
            Gets the number of events currently saved in the instance.
            </summary>
        </member>
        <member name="M:BPUtil.BasicEventTimer.GetEventTime(System.Int32)">
            <summary>
            Gets the amount of time that passed for the event at the given index. Throws an exception if the given event index is not valid. See <see cref="P:BPUtil.BasicEventTimer.EventCount"/>.
            </summary>
            <param name="eventIndex">0-based index of the event to get the elapsed time for.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.BasicEventTimer.GetEventTime(System.String)">
            <summary>
            Gets the amount of time that passed for the event with the given name. Returns null if the given event name is not found.
            </summary>
            <param name="eventName">Name of the event to get the elapsed time for.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.BPMath.Clamp``1(``0,``0,``0)">
            <summary>
            Returns this object if it is within the specified min and max values, otherwise returns the nearest (min or max) value that was provided.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="v">This value.</param>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.ByteUtil">
            <summary>
            Contains helpful methods for working with binary data.
            </summary>
        </member>
        <member name="M:BPUtil.ByteUtil.ByteArraysMatch(System.Byte[],System.Byte[])">
            <summary>
            Returns true of the content of the specified byte arrays exactly match each other, or if both arrays are null.
            </summary>
            <param name="a">An array to compare.</param>
            <param name="b">An array to compare.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.StartsWith(System.Byte[],System.Byte[])">
            <summary>
            Returns true if <paramref name="thisBytes"/> starts with <paramref name="thatBytes"/>.
            </summary>
            <param name="thisBytes">Base byte array</param>
            <param name="thatBytes">Byte array to look for at the start of the base byte array.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.CompareWithMask(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            <para>Returns true if the specified byte arrays `a` and `b` are the same length and if every bit which is set in `mask` is the same between `a` and `b`.</para>
            <para>e.g.</para>
            <para>a = 01</para>
            <para>b = 00</para>
            <para>If mask = 10 or mask = 00 then true. Because the second bit is not set in mask, it does not get compared.  If mask = 01 or mask = 11 then false.</para>
            </summary>
            <param name="a">An array to compare.</param>
            <param name="b">An array to compare.</param>
            <param name="mask">An array of equal or lesser length to `a` and `b`.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.XORByteArrays(System.Byte[],System.Byte[])">
            <summary>
            Returns a new array containing the values of the first array XORed with the values of the second array.
            </summary>
            <param name="a">An array.</param>
            <param name="b">An array.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.BitwiseAnd(System.Byte[],System.Byte[])">
            <summary>
            Computes the "bitwise and" of the values in each array, and returns a new array containing the results.
            e.g. [0,1,1] &amp; [1,0,1] = [0,0,1]
            </summary>
            <param name="a">An array.</param>
            <param name="b">An array.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.BitwiseOr(System.Byte[],System.Byte[])">
            <summary>
            Computes the "bitwise or" of the values in each array, and returns a new array containing the results.
            e.g. [0,1,1] | [1,0,1] = [1,1,1]
            </summary>
            <param name="a">An array.</param>
            <param name="b">An array.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.InvertBits(System.Byte[])">
            <summary>
            Inverts every byte in the array. e.g. [0001] => [1110]
            </summary>
            <param name="a">An array.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.GetInverse(System.Byte[])">
            <summary>
            Returns a new byte array containing the inverse of the values of the source array. e.g. [0001] => [1110]
            </summary>
            <param name="a">An array.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.GenerateRandomBytes(System.Int32)">
            <summary>
            Generates a byte array of the specified length, filled with cryptographically strong random values.
            </summary>
            <param name="numBytes">The length of the byte array to create.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.ReadPrintableASCIILine(System.IO.Stream,System.Int32)">
            <summary>
            <para>Reads a line of text from the input stream.  Each character must be a printable ASCII character [32-126] or "LF" [10] or "CR" [13].</para>
            <para>The line is considered ended when an "LF" character is reached or the end of the stream is reached.</para>
            <para>Any "CR" characters encountered are not added to the output string.</para>
            <para>Null is returned if the line exceeds the specified [maxLength] or if any out-of-range characters are encountered.</para>
            </summary>
            <param name="inputStream"></param>
            <param name="maxLength">Maximum length of the line.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.ToHex(System.Byte[],System.Boolean)">
            <summary>
            Converts a byte array to a hexidecimal string using either upper or lower case letters.
            </summary>
            <param name="buffer">The byte array to convert.</param>
            <param name="capitalLetters">If true, letters will be upper case.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.ReadNBytes(BPUtil.IO.IDataStream,System.Int32)">
            <summary>
            Reads a specific number of bytes from the stream, returning a byte array.  Ordinary stream.Read operations are not guaranteed to read all the requested bytes.
            </summary>
            <param name="s">The stream to read from.</param>
            <param name="n">The number of bytes to read.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.ReadBytes(BPUtil.IO.IDataStream,System.Byte[])">
            <summary>
            Fills the given buffer with bytes from the stream. If unable to read that many bytes, this method throws an Exception.
            </summary>
            <param name="s">The stream to read from.</param>
            <param name="buffer">The buffer to fill.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.ReadNBytes(System.IO.Stream,System.Int32)">
            <summary>
            Reads a specific number of bytes from the stream, returning a byte array.  Ordinary stream.Read operations are not guaranteed to read all the requested bytes.
            </summary>
            <param name="s">The stream to read from.</param>
            <param name="n">The number of bytes to read.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.ReadBytes(System.IO.Stream,System.Byte[])">
            <summary>
            Fills the given buffer with bytes from the stream. If unable to read that many bytes, this method throws an Exception.
            </summary>
            <param name="s">The stream to read from.</param>
            <param name="buffer">The buffer to fill.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.ReadNBytesFromNetworkOrder(System.IO.Stream,System.Int32)">
            <summary>
            Reads a specific number of bytes from the stream and performs NetworkToHostOrder on the resulting byte array before returning it.
            </summary>
            <param name="s">The stream to read from.</param>
            <param name="n">The number of bytes to read.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.NetworkToHostOrder(System.Byte[])">
            <summary>
            If the current system is Little Endian, reverses the order of the bytes.
            If the current system is Big Endian, the array is returned unmodified.
            </summary>
            <param name="buf">The byte array.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.SubArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a new array containing the specified bytes from the source array.
            </summary>
            <param name="buf">The source byte array.</param>
            <param name="offset">The offset to begin copying bytes at.</param>
            <param name="length">The number of bytes to copy.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.NetworkToHostOrder(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies a section of the specified array into a new array and performs a NetworkToHostOrder operation on the array before returning it.
            </summary>
            <param name="buf">The source byte array.</param>
            <param name="offset">The offset to begin copying bytes at.</param>
            <param name="length">The number of bytes to copy.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.WriteUtf8(System.String,System.Byte[],System.Int32)">
            <summary>
            Writes a string to the buffer at the specified offset. The string will be encoded as UTF8 with no byte order mark. Returns the number of bytes written.
            </summary>
            <param name="str">String to write.</param>
            <param name="buffer">The buffer to write to.</param>
            <param name="offset">The offset in the buffer to begin writing at.</param>
        </member>
        <member name="M:BPUtil.ByteUtil.WriteUtf8_16(System.String,System.Byte[],System.Int32)">
            <summary>
            <para>Writes the length of the string as a 16 bit unsigned integer, then writes the string.</para>
            <para>The string will be encoded as UTF8 with no byte order mark.</para>
            <para>Returns the number of bytes written.</para>
            <para>Throws an exception if the byte array is larger than a 16 bit unsigned integer can hold.</para>
            </summary>
            <param name="str">String to write.</param>
            <param name="buffer">The buffer to write to.</param>
            <param name="offset">The offset in the buffer to begin writing at.</param>
        </member>
        <member name="M:BPUtil.ByteUtil.WriteUtf8_32(System.String,System.Byte[],System.Int32)">
            <summary>
            <para>Writes the length of the string as a 32 bit unsigned integer, then writes the string.</para>
            <para>The string will be encoded as UTF8 with no byte order mark.</para>
            <para>Returns the number of bytes written.</para>
            </summary>
            <param name="str">String to write.</param>
            <param name="buffer">The buffer to write to.</param>
            <param name="offset">The offset in the buffer to begin writing at.</param>
        </member>
        <member name="M:BPUtil.ByteUtil.WriteUtf8(System.String,System.IO.Stream)">
            <summary>
            Writes a string to the specified stream. The string will be encoded as UTF8 with no byte order mark. Returns the number of bytes written.
            </summary>
            <param name="str">String to write.</param>
            <param name="s">Stream to write to.</param>
        </member>
        <member name="M:BPUtil.ByteUtil.WriteUtf8_16(System.String,System.IO.Stream)">
            <summary>
            <para>Writes the length of the string as a 16 bit unsigned integer, then writes the string.</para>
            <para>The string will be encoded as UTF8 with no byte order mark.</para>
            <para>Returns the number of bytes written.</para>
            <para>Throws an exception if the byte array is larger than a 16 bit unsigned integer can hold.</para>
            </summary>
            <param name="str">String to write.</param>
            <param name="s">Stream to write to.</param>
            <exception cref="T:System.ArgumentException">If the string is longer than 65535 characters or bytes.</exception>
        </member>
        <member name="M:BPUtil.ByteUtil.WriteUtf8_32(System.String,System.IO.Stream)">
            <summary>
            <para>Writes the length of the string as a 32 bit unsigned integer, then writes the string.</para>
            <para>The string will be encoded as UTF8 with no byte order mark.</para>
            <para>Returns the number of bytes written.</para>
            </summary>
            <param name="str">String to write.</param>
            <param name="s">Stream to write to.</param>
        </member>
        <member name="M:BPUtil.ByteUtil.ReadUtf8(System.Byte[])">
            <summary>
            Converts all data from the buffer to a string assuming UTF8 encoding with no byte order mark.
            </summary>
            <param name="buffer">The buffer to convert.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.ReadUtf8(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the specified number of bytes from the buffer and converts them to a string assuming UTF8 encoding with no byte order mark.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <param name="offset">The offset to begin reading at.</param>
            <param name="byteLength">The number of bytes to read.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.ReadUtf8_16(System.Byte[],System.Int32)">
            <summary>
            Reads a UTF8 string (no byte order mark) from the buffer, assuming the string's length is prepended as a 16 bit unsigned integer.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <param name="offset">The offset to begin reading at.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.ReadUtf8_16(System.Byte[],System.Int32,System.UInt16@)">
            <summary>
            Reads a UTF8 string (no byte order mark) from the buffer, assuming the string's length is prepended as a 16 bit unsigned integer.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <param name="offset">The offset to begin reading at.</param>
            <param name="strLen">[out] Length in bytes of the string that was read. (does not include the 2 byte length of the length field)</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.ReadUtf8_32(System.Byte[],System.Int32)">
            <summary>
            Reads a UTF8 string (no byte order mark) from the buffer, assuming the string's length is prepended as a 32 bit unsigned integer.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <param name="offset">The offset to begin reading at.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.ReadUtf8_32(System.Byte[],System.Int32,System.UInt32@)">
            <summary>
            Reads a UTF8 string (no byte order mark) from the buffer, assuming the string's length is prepended as a 32 bit unsigned integer.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <param name="offset">The offset to begin reading at.</param>
            <param name="strLen">[out] Length in bytes of the string that was read. (does not include the 4 byte length of the length field)</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.ReadUtf8(System.IO.Stream,System.Int32)">
            <summary>
            Reads the specified number of bytes from the stream and converts them to a string assuming UTF8 encoding with no byte order mark.
            </summary>
            <param name="s">The stream to read from.</param>
            <param name="byteLength">The number of bytes to read.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.ReadUtf8_16(System.IO.Stream)">
            <summary>
            Reads a UTF8 string (no byte order mark) from the stream, assuming the string's length is prepended as a 16 bit unsigned integer.
            </summary>
            <param name="s">The stream to read from.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ByteUtil.ReadUtf8_32(System.IO.Stream)">
            <summary>
            Reads a UTF8 string (no byte order mark) from the stream, assuming the string's length is prepended as a 32 bit unsigned integer.
            </summary>
            <param name="s">The stream to read from.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ConsoleAppHelper.AllocateConsole">
            <summary>
            Creates a console window.  Use this once at startup, if desired, if your application does not normally 
            allocate a console window (as configured in Project Properties - Application - Output type).
            
            Call this on Windows only.
            </summary>
        </member>
        <member name="M:BPUtil.ConsoleAppHelper.EscapeCommandLineArgument(System.String,System.Boolean)">
            <summary>
            Escapes backslashes and double-quotation marks by prepending backslashes.
            </summary>
            <param name="str">Unescaped string.</param>
            <param name="wrapInDoubleQuotes">If true, the return value will be wrapped in double quotes.</param>
            <returns>A string suitable to be used as a command line argument.</returns>
        </member>
        <member name="M:BPUtil.ConsoleKeyHelper.GetKeyName(System.Int32)">
            <summary>
            Gets the name of the specified key, either using the System.ConsoleKey enum or the BPUtil.Linux.KeyCode enum as the source of names, depending on the current platform.
            </summary>
            <param name="keyCode"></param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.AdvWebClient">
            <summary>
            <para>A WebClient with custom extensions:</para>
            <list type="bullet">
            <item>Settable request timeout.</item>
            <item>Settable request cookie collection.</item>
            </list>
            </summary>
        </member>
        <member name="P:BPUtil.AdvWebClient.CookieContainer">
            <summary>
            Cookies to include in requests.  May be null.
            </summary>
        </member>
        <member name="F:BPUtil.AdvWebClient.Timeout">
            <summary>
            Number of milliseconds a request can remain open (without a response?) before it times out. If null, the default HttpWebRequest. Timeout will be kept.
            </summary>
        </member>
        <member name="P:BPUtil.AdvWebClient.TimeoutTime">
            <summary>
            Number of milliseconds a request can remain open (without a response?) before it times out. If null, the default HttpWebRequest. Timeout will be kept.
            </summary>
        </member>
        <member name="T:BPUtil.CookieAwareWebClient">
            <summary>
            A Cookie-aware WebClient that will store authentication cookie information and persist it through subsequent requests.
            From: https://github.com/rionmonster/CookieAwareWebClient
            Base functionality rolled into AdvWebClient.
            </summary>
        </member>
        <member name="M:BPUtil.Extensions.GetMatches(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Returns a collection of all successful matches.  The collection is empty if there are no successful match objects.
            </summary>
            <param name="rx"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Extensions.GetFirstValue(System.Net.Http.Headers.HttpHeaders,System.String)">
            <summary>
            Returns the first value of the specified header, or null.
            </summary>
            <param name="headers"></param>
            <param name="name">Name of the header.</param>
            <returns>The first value of the specified header, or null.</returns>
        </member>
        <member name="M:BPUtil.Extensions.GetIntValue(System.Net.Http.Headers.HttpHeaders,System.String,System.Int32)">
            <summary>
            Returns the first value of the specified header interpreted as a 32-bit integer, or the fallback value.
            </summary>
            <param name="headers"></param>
            <param name="name">Name of the header.</param>
            <param name="fallbackValue">Value to return if the header does not exist or its value can't be parsed.</param>
            <returns>The first value of the specified header interpreted as a 32-bit integer, or the fallback value.</returns>
        </member>
        <member name="M:BPUtil.Extensions.GetLongValue(System.Net.Http.Headers.HttpHeaders,System.String,System.Int64)">
            <summary>
            Returns the first value of the specified header interpreted as a 64-bit integer, or the fallback value.
            </summary>
            <param name="headers"></param>
            <param name="name">Name of the header.</param>
            <param name="fallbackValue">Value to return if the header does not exist or its value can't be parsed.</param>
            <returns>The first value of the specified header interpreted as a 64-bit integer, or the fallback value.</returns>
        </member>
        <member name="M:BPUtil.Extensions.GetAllValues(System.Net.Http.Headers.HttpResponseHeaders,System.String)">
            <summary>
            Returns the values of the specified header, or null.
            </summary>
            <param name="headers"></param>
            <param name="name">Name of the header.</param>
            <returns>The first value of the specified header, or null.</returns>
        </member>
        <member name="M:BPUtil.Extensions.GetExceptionOfType``1(System.Exception,System.Boolean)">
            <summary>
            Traverses the Exception and its InnerException tree, looking for an Exception which is of the specified type, or which inherits from the specified type. If one is found, it is returned.  If none is found, null is returned.
            </summary>
            <typeparam name="T">The type of Exception to look for.</typeparam>
            <param name="baseException">This exception.</param>
            <param name="requireExactMatch">If true, the returned exception must be exactly the specified class, not a subclass of it.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Extensions.GetExceptionWhere(System.Exception,System.Func{System.Exception,System.Boolean})">
            <summary>
            Traverses the Exception and its InnerException tree, looking for an Exception which causes the given [<paramref name="where" />] method to return true. If one is found, it is returned.  If none is found, null is returned.
            </summary>
            <param name="baseException">This exception.</param>
            <param name="where">A function which returns true if the passed-in exception meets expectations.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Extensions.FlattenMessages(System.Exception)">
            <summary>
            Returns the exception messages from this exception and all inner exceptions in a text-only tree format. Stack traces are not included.
            </summary>
            <param name="ex">Exception to extract messages from.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Extensions.ToHierarchicalString(System.Exception)">
            <summary>
            Returns a string representation of the exception using an indented hierarchical format such that each inner exception is indented for easier readability.
            </summary>
            <param name="ex">Exception to print in indented hierarchical format.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Extensions.SetStackTrace(System.Exception,System.Diagnostics.StackTrace)">
            <summary>
            Sets the stack trace for this Exception.
            </summary>
            <param name="target">The Exception</param>
            <param name="stack">The stack trace to assign to the Exception.</param>
            <returns></returns>
        </member>
        <member name="F:BPUtil.Extensions._SetStackTrace">
            <summary>
            Returns a function that efficiently sets an exception's stack trace. From https://stackoverflow.com/a/63685720/814569
            </summary>
        </member>
        <member name="M:BPUtil.Extensions.Contains(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
            Returns true if the collection contains the specified string.
            </summary>
            <param name="collection"></param>
            <param name="str"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Extensions.DistanceFrom(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Returns the distance between this point and another point.
            </summary>
            <param name="point">This point.</param>
            <param name="otherPoint">Second point from which to calculate distance.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Extensions.NameWithoutExtension(System.IO.FileInfo)">
            <summary>
            Returns the file name without its extension.  If the file name has no traditional extension such as "config" or ".gitignore" then the entire file name is returned.
            </summary>
            <param name="fi"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Extensions.FullNameWithoutExtension(System.IO.FileInfo)">
            <summary>
            Returns [FullName] with its extension removed.  If the file name has no traditional extension such as "config" or ".gitignore" then the entire file name is returned.
            </summary>
            <param name="fi"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Extensions.SetLocationNearMouse(System.Windows.Forms.Form)">
            <summary>
            Sets the location of the form to be near the mouse pointer, preferably not directly on top of the mouse pointer, but entirely on-screen if possible.
            </summary>
            <param name="form">The form.</param>
        </member>
        <member name="M:BPUtil.Extensions.SetProgressNoAnimation(System.Windows.Forms.ProgressBar,System.Int32)">
            <summary>
            FROM: https://derekwill.com/2014/06/24/combating-the-lag-of-the-winforms-progressbar/
            Sets the progress bar value, without using 'Windows Aero' animation.
            This is to work around a known WinForms issue where the progress bar 
            is slow to update. 
            </summary>
        </member>
        <member name="M:BPUtil.Extensions.IEquals(System.String,System.String)">
            <summary>
            Case-insensitive equals. Shorthand for Equals(other, StringComparison.OrdinalIgnoreCase).
            </summary>
            <param name="str">This string.</param>
            <param name="other">String to compare with.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Globals.Initialize">
            <summary>
            This method does nothing, but allows initialization to occur via the static constructor, where [exePath] is determined by <see cref="M:System.Reflection.Assembly.GetEntryAssembly"/>, and WritableDirectoryBase is a subdirectory of <see cref="F:System.Environment.SpecialFolder.CommonApplicationData"/>.  The directory pointed at by WritableDirectoryBase will not be created automatically, and the current working directory will not be changed.
            </summary>
        </member>
        <member name="M:BPUtil.Globals.Initialize(System.String,System.String)">
            <summary>
            Call this to initialize global static variables where the "WritableDirectoryBase" property is the parent folder of the exe.
            </summary>
            <param name="exePath">
            <para>Pass in the path to the exe in the root directory of the application. (if null/whitespace, then System.Windows.Forms.Application.ExecutablePath is used).</para>
            <para>The directory must exist, but the exe name can just be a descriptive exe file name like "My Application.exe" and does not need to exist.</para>
            <para>The exe name is used to create the CommonApplicationDataBase string.</para>
            </param>
            <param name="writablePath">A string to be appended to ApplicationDirectoryBase to form WritableDirectoryBase.  Example: "" or "writable/" or "somedir/writable/"</param>
        </member>
        <member name="M:BPUtil.Globals.InitializeProgram(System.String,System.String,System.Boolean)">
            <summary>
            Call this to initialize global static variables where the "WritableDirectoryBase" path is a subfolder of <see cref="F:System.Environment.SpecialFolder.CommonApplicationData"/>.
            </summary>
            <param name="exePath">
            <para>Optionally pass in the path to the exe in the root directory of the application. (if null/whitespace, then System.Windows.Forms.Application.ExecutablePath is used).</para>
            <para>The directory must exist, but the exe name can just be a descriptive exe file name like "My Application.exe" and does not need to exist.</para>
            <para>The exe name is used in the error file name and exposed in <see cref="P:BPUtil.Globals.ExecutableNameWithExtension"/> and <see cref="P:BPUtil.Globals.ExecutableNameWithoutExtension"/> properties.</para>
            </param>
            <param name="programName">
            <para>A globally unique program name that does not change and is unlikely to collide with other programs on the user's system.</para>
            <para>This defines the subfolder(s) of CommonApplicationData where this app's WritableDirectoryBase will be located.</para>
            <para>So you could pass in "MyApp" or to be even safer, "MyCompany/MyApp".</para>
            </param>
            <param name="CreateWritableDir">If true, the directory defined by WritableDirectoryBase will be created if needed.</param>
        </member>
        <member name="M:BPUtil.Globals.SetWritableDirectory(System.String)">
            <summary>
            Call this after Globals initialization to change the writable directory path. The specified folder will be created if it does not already exist.
            </summary>
            <param name="writableDirectoryAbsolutePath">Absolute path for the writable directory. E.g. @"C:\MyApp\Data" or "/home/user/MyApp/Data"</param>
        </member>
        <member name="P:BPUtil.Globals.ExecutableNameWithExtension">
            <summary>
            Gets the name of the executable file, including the extension.  e.g. "MyProgram.exe"
            </summary>
        </member>
        <member name="P:BPUtil.Globals.ExecutableNameWithoutExtension">
            <summary>
            Gets the name of the executable file, NOT including the extension.  e.g. "MyProgram.exe" => "MyProgram"
            </summary>
        </member>
        <member name="P:BPUtil.Globals.ApplicationRoot">
            <summary>
            Gets the full path to the root directory where the current executable is located.  Does not have trailing '/'.
            </summary>
        </member>
        <member name="P:BPUtil.Globals.ApplicationDirectoryBase">
            <summary>
            Gets the full path to the root directory where the current executable is located.  Includes trailing '/'.
            </summary>
        </member>
        <member name="P:BPUtil.Globals.WritableDirectoryBase">
            <summary>
            Gets the full path to a persistent directory where the application can write to.  Includes trailing '/'.
            </summary>
        </member>
        <member name="P:BPUtil.Globals.ErrorFilePath">
            <summary>
            Gets the full path to the error log file.
            </summary>
        </member>
        <member name="F:BPUtil.Globals.GetErrorFilePath">
            <summary>
            If specified, this function overrides <see cref="F:BPUtil.Globals.errorFilePath"/>.
            </summary>
        </member>
        <member name="M:BPUtil.Globals.OverrideErrorFilePath(System.Func{System.String})">
            <summary>
            Sets a function that will be called when getting <see cref="P:BPUtil.Globals.ErrorFilePath"/>.
            </summary>
            <param name="newPathFn">A function which returns the path to the log file. E.g. () => { return "C:/MyApp/MyErrorFile.txt"; }</param>
        </member>
        <member name="P:BPUtil.Globals.ConfigFilePath">
            <summary>
            Gets the full path to the config file.
            </summary>
        </member>
        <member name="F:BPUtil.Globals.Version">
            <summary>
            The BPUtil version number, not to be confused with the version number of the application this is included in.  This version number is often neglected.
            </summary>
        </member>
        <member name="P:BPUtil.Globals.AssemblyGuid">
            <summary>
            Gets the GUID of the entry assembly.
            </summary>
        </member>
        <member name="P:BPUtil.Globals.AssemblyTitle">
            <summary>
            Gets the title of the entry assembly.
            </summary>
        </member>
        <member name="P:BPUtil.Globals.AssemblyName">
            <summary>
            Gets the name of the entry assembly.
            </summary>
        </member>
        <member name="P:BPUtil.Globals.AssemblyVersion">
            <summary>
            Gets the version of the entry assembly.
            </summary>
        </member>
        <member name="M:BPUtil.Hash.GetSHA512Bytes(System.Byte[],System.Byte[])">
            <summary>
            Computes the SHA512 hash of the specified binary data, optionally appending a binary salt value.
            </summary>
            <param name="data">Binary data to hash.</param>
            <param name="salt">A salt value to append directly to the end of the data before hashing.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Hash.GetSHA512Bytes(System.String,System.Byte[])">
            <summary>
            Computes the SHA512 hash of the specified string, optionally appending a binary salt value.
            </summary>
            <param name="s">A UTF8-encoded string.</param>
            <param name="salt">A salt value to append directly to the end of the string's binary data before hashing.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Hash.GetSHA512Hex(System.String)">
            <summary>
            Decodes the specified string as UTF8 and calculates the SHA512 hash of the data.
            The hash is returned as a lower-case hexidecimal string 128 characters long.
            </summary>
            <param name="s">The string to hash.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Hash.GetSHA256Bytes(System.Byte[],System.Byte[])">
            <summary>
            Computes the SHA256 hash of the specified binary data, optionally appending a binary salt value.
            </summary>
            <param name="data">Binary data to hash.</param>
            <param name="salt">A salt value to append directly to the end of the data before hashing.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Hash.GetSHA256Bytes(System.String,System.Byte[])">
            <summary>
            Computes the SHA256 hash of the specified string, optionally appending a binary salt value.
            </summary>
            <param name="s">A UTF8-encoded string.</param>
            <param name="salt">A salt value to append directly to the end of the string's binary data before hashing.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Hash.GetSHA256Hex(System.String)">
            <summary>
            Decodes the specified string as UTF8 and calculates the SHA256 hash of the data.
            The hash is returned as a lower-case hexidecimal string 64 characters long.
            </summary>
            <param name="s">The string to hash.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Hash.GetSHA1Bytes(System.String,System.Byte[])">
            <summary>
            Computes the SHA1 hash of the specified string, optionally appending a binary salt value.
            A SHA1 hash is 20 bytes (160 bits) long.
            </summary>
            <param name="s">The string to hash.</param>
            <param name="salt">The salt value to append to the string before hashing.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Hash.GetSHA1Bytes(System.Byte[])">
            <summary>
            Computes the SHA1 hash of the specified data.
            A SHA1 hash is 20 bytes (160 bits) long.
            </summary>
            <param name="data">The data to hash.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Hash.GetSHA1Hex(System.String)">
            <summary>
            Decodes the specified string as UTF8 and calculates the SHA1 hash of the data.
            The hash is returned as a lower-case hexidecimal string 40 characters long.
            </summary>
            <param name="s">The string to hash.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Hash.GetSHA1Base64(System.String)">
            <summary>
            Decodes the specified string as UTF8 and calculates the SHA1 hash of the data.
            The hash is returned as a base64-encoded string.
            </summary>
            <param name="s">The string to hash.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Hash.GetMD5Bytes(System.String,System.Byte[])">
            <summary>
            Computes the MD5 hash of the specified string, optionally appending a binary salt value.
            An MD5 hash is 16 bytes (128 bits) long.
            </summary>
            <param name="s">The string to hash.</param>
            <param name="salt">The salt value to append to the string before hashing.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Hash.GetMD5Hex(System.String)">
            <summary>
            Decodes the specified string as UTF8 and calculates the MD5 hash of the data.
            The hash is returned as a lower-case hexidecimal string 32 characters long.
            </summary>
            <param name="s">The string to hash.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Hash.GetMD5HexOfFile(System.String)">
            <summary>
            Calculates the MD5 hash of the file contents.
            The hash is returned as a lower-case hexidecimal string 32 characters long.
            </summary>
            <param name="path">The path to the file to compute the hash of.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Hex.ToHex(System.Byte[],System.Boolean)">
            <summary>
            Converts a byte array to a hexidecimal string.
            </summary>
            <param name="array">Byte array to convert</param>
            <param name="uppercase">If true, A-F shall be uppercase, and the conversion will be slightly faster. Default is false for backwards compatibility.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Hex.ToByteArray(System.String)">
            <summary>
            Converts a hexidecimal string to a byte array. Based on https://stackoverflow.com/a/14332574/814569
            </summary>
            <param name="hex">Hex string</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Hex.PrefixedHexToLong(System.String)">
            <summary>
            Converts a prefixed hex string (e.g. "0x185b8ae584") to a long.
            </summary>
            <param name="prefixedHex"></param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.Linux.InputListener.AllKeyboardListener">
            <summary>
            Listens to all hardware keyboards connected to the system.
            </summary>
        </member>
        <member name="M:BPUtil.Linux.InputListener.AllKeyboardListener.#ctor(System.Int32)">
            <summary>
            Begins listening to all hardware keyboards.
            </summary>
            <param name="msBetweenKeyboardScans">The rescan interval in milliseconds.  This interval shouldn't be extremely small, for efficiency's sake, as it creates new processes and whatnot to perform the scans.</param>
        </member>
        <member name="M:BPUtil.Linux.InputListener.AllKeyboardListener.ScanForNewKeyboards">
            <summary>
            Scans for new keyboards attached to the system, and begins listening to any keyboards that are not currently being listened to.
            </summary>
        </member>
        <member name="F:BPUtil.Linux.InputListener.KeyEventType.NotKeyEvent">
            <summary>
            This event was not recognized as a key event.
            </summary>
        </member>
        <member name="F:BPUtil.Linux.InputListener.KeyEventType.Down">
            <summary>
            Raised when a key is pressed.
            </summary>
        </member>
        <member name="F:BPUtil.Linux.InputListener.KeyEventType.Up">
            <summary>
            Raised when a key is released.
            </summary>
        </member>
        <member name="F:BPUtil.Linux.InputListener.KeyEventType.AutoRepeat">
            <summary>
            Raised repeatedly on a short interval when a key has been held down for some time. In a text editor, this would cause the key to be entered again as if it were another Down event.
            </summary>
        </member>
        <member name="F:BPUtil.Linux.InputListener.LinuxInputEvent.seconds">
            <summary>
            (This is likely wrong) Seconds component of the time since the unix epoch.
            </summary>
        </member>
        <member name="F:BPUtil.Linux.InputListener.LinuxInputEvent.microseconds">
            <summary>
            (This is likely wrong) Microseconds component of the time since the unix epoch.
            </summary>
        </member>
        <member name="F:BPUtil.Linux.InputListener.LinuxInputEvent.type">
            <summary>
            Event type.  For key events this should always have the same value, 1.
            </summary>
        </member>
        <member name="F:BPUtil.Linux.InputListener.LinuxInputEvent.code">
            <summary>
            For key events, this is the key code.
            </summary>
        </member>
        <member name="F:BPUtil.Linux.InputListener.LinuxInputEvent.value">
            <summary>
            For key events, 0 is keyup, 1 is keydown, 2 is autorepeat.
            </summary>
        </member>
        <member name="P:BPUtil.Linux.InputListener.LinuxInputEventArgs.Code">
            <summary>
            Event code (e.g. Key Code)
            </summary>
        </member>
        <member name="P:BPUtil.Linux.InputListener.LinuxInputEventArgs.KeyEventType">
            <summary>
            Returns the type of key event, or NotKeyEvent if this event was not recognized as a key event.
            </summary>
        </member>
        <member name="M:BPUtil.Linux.InputListener.LinuxInputHelper.GetKeyboardInputNames">
            <summary>
            Gets the names of keyboard input devices.  May return null if there was an error.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BPUtil.Linux.InputListener.LinuxInputListener">
            <summary>
            A global input listener that listens to the specified input device.  Specialized for keyboards, but should be functional for other input devices.
            </summary>
        </member>
        <member name="P:BPUtil.Linux.InputListener.LinuxInputListener.IsAlive">
            <summary>
            Gets a value indicating if the listener is listening.  False if the listener has errored out or been disposed.
            </summary>
        </member>
        <member name="M:BPUtil.Linux.InputListener.LinuxInputListener.#ctor(System.String)">
            <summary>
            Creates a new LinuxKeyListener on the specified input device path.
            </summary>
            <param name="inputDevicePath">Input device path. e.g. "/dev/input/event0"</param>
        </member>
        <member name="T:BPUtil.Linux.KeyCode">
            <summary>
            Keys
            Most of the keys/buttons are modeled after USB HUT 1.12
            (see http://www.usb.org/developers/hidpage).
            Abbreviations in the comments:
            AC - Application Control
            AL - Application Launch Button
            SC - System Control
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.POWER">
            <summary>
            SC System Power Down
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.SCALE">
            <summary>
            AL Compiz Scale (Expose)
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.STOP">
            <summary>
            AC Stop
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.PROPS">
            <summary>
            AC Properties
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.UNDO">
            <summary>
            AC Undo
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.COPY">
            <summary>
            AC Copy
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.OPEN">
            <summary>
            AC Open
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.PASTE">
            <summary>
            AC Paste
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.FIND">
            <summary>
            AC Search
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.CUT">
            <summary>
            AC Cut
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.HELP">
            <summary>
            AL Integrated Help Center
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.MENU">
            <summary>
            Menu (show menu)
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.CALC">
            <summary>
            AL Calculator
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.SLEEP">
            <summary>
            SC System Sleep
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.WAKEUP">
            <summary>
            System Wake Up
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.FILE">
            <summary>
            AL Local Machine Browser
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.WWW">
            <summary>
            AL Internet Browser
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.COFFEE">
            <summary>
            AL Terminal Lock/Screensaver
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.ROTATE_DISPLAY">
            <summary>
            Display orientation for e.g. tablets
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.BOOKMARKS">
            <summary>
            AC Bookmarks
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.BACK">
            <summary>
            AC Back
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.FORWARD">
            <summary>
            AC Forward
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.PHONE">
            <summary>
            Media Select Telephone
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.CONFIG">
            <summary>
            AL Consumer Control Configuration
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.HOMEPAGE">
            <summary>
            AC Home
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.REFRESH">
            <summary>
            AC Refresh
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.EXIT">
            <summary>
            AC Exit
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.NEW">
            <summary>
            AC New
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.REDO">
            <summary>
            AC Redo/Repeat
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.DASHBOARD">
            <summary>
            AL Dashboard
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.CLOSE">
            <summary>
            AC Close
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.PRINT">
            <summary>
            AC Print
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.FINANCE">
            <summary>
            AL Checkbook/Finance
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.CANCEL">
            <summary>
            AC Cancel
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.SWITCHVIDEOMODE">
            <summary>
            Cycle between available video outputs (Monitor/LCD/TV-out/etc)
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.SEND">
            <summary>
            AC Send
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.REPLY">
            <summary>
            AC Reply
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.FORWARDMAIL">
            <summary>
            AC Forward Msg
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.SAVE">
            <summary>
            AC Save
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.VIDEO_NEXT">
            <summary>
            drive next video source
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.VIDEO_PREV">
            <summary>
            drive previous video source
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.BRIGHTNESS_CYCLE">
            <summary>
            brightness up, after max is min
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.BRIGHTNESS_AUTO">
            <summary>
            Set Auto Brightness: manual brightness control is off, rely on ambient
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.DISPLAY_OFF">
            <summary>
            display device to off state
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.WWAN">
            <summary>
            Wireless WAN (LTE, UMTS, GSM, etc.)
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.RFKILL">
            <summary>
            Key that controls all radios
            </summary>
        </member>
        <member name="F:BPUtil.Linux.KeyCode.MICMUTE">
            <summary>
            Mute / unmute the microphone
            </summary>
        </member>
        <member name="M:BPUtil.Logger.Debug(System.Exception,System.String)">
            <summary>
            Writes an exception to the logger, optionally including an additional string of information. Debug messages are colored yellow and/or red.
            </summary>
            <param name="ex">The exception to write.</param>
            <param name="additionalInformation">(Optional) An additional string of information, omitted if null or empty.</param>
        </member>
        <member name="M:BPUtil.Logger.Debug(System.String)">
            <summary>
            Writes a string to the logger using debug coloring for the console.
            </summary>
            <param name="message">A string to write to the logger using debug coloring for the console.</param>
        </member>
        <member name="M:BPUtil.Logger.Info(System.String)">
            <summary>
            Writes a string to the logger using standard coloring for the console.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:BPUtil.Logger.Special(BPUtil.LogType,System.String)">
            <summary>
            Currently does nothing.
            </summary>
            <param name="logType"></param>
            <param name="message"></param>
        </member>
        <member name="M:BPUtil.Logger.StartLoggingThreads">
            <summary>
            Call this if using [httpLogger] with the BPUtil SimpleHttpServer.
            </summary>
        </member>
        <member name="M:BPUtil.Logger.StopLoggingThreads">
            <summary>
            Call this to stop logging threads if you called [StartLoggingThreads].
            </summary>
        </member>
        <member name="M:BPUtil.Logger.CatchAll">
            <summary>
            Registers handlers for <see cref="E:System.Windows.Forms.Application.ThreadException"/> and AppDomain.CurrentDomain.UnhandledException, assigned to call <see cref="M:BPUtil.Logger.Debug(System.Exception,System.String)"/>.
            </summary>
        </member>
        <member name="M:BPUtil.Logger.CatchAll(System.Action{System.String,System.Exception})">
            <summary>
            Registers handlers for <see cref="E:System.Windows.Forms.Application.ThreadException"/> and AppDomain.CurrentDomain.UnhandledException, assigned to call the given callback.
            </summary>
            <param name="callback">A callback method where the first argument is the name of the exception catcher which caught the exception, and the second argument is the exception that was caught.</param>
        </member>
        <member name="M:BPUtil.HttpLogger.GetWebServerLogFilePathForToday(System.DateTime)">
            <summary>
            Gets the full path to the web server log file that should be used for events logged at the specified time.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BPUtil.StreamingLogReader">
            <summary>
            A class which can read a log file and keep a rolling view of the last 50000 lines of text, presenting them upon request by a client.
            </summary>
        </member>
        <member name="M:BPUtil.NumberUtil.FirstShort(System.String)">
            <summary>
            Returns the first 16-bit integer found inside the string, or null if none are found.  Note that hyphens may be incorrectly interpreted as minus signs.
            </summary>
            <param name="str">str</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.NumberUtil.FirstInt(System.String)">
            <summary>
            Returns the first 32-bit integer found inside the string, or null if none are found.  Note that hyphens may be incorrectly interpreted as minus signs.
            </summary>
            <param name="str">str</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.NumberUtil.FirstLong(System.String)">
            <summary>
            Returns the first 64-bit signed integer found inside the string, or null if none are found.  Note that hyphens may be incorrectly interpreted as minus signs.
            </summary>
            <param name="str">str</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.NumberUtil.FirstUShort(System.String)">
            <summary>
            Returns the first 16-bit unsigned integer found inside the string, or null if none are found.
            </summary>
            <param name="str">str</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.NumberUtil.FirstUInt(System.String)">
            <summary>
            Returns the first 32-bit unsigned integer found inside the string, or null if none are found.
            </summary>
            <param name="str">str</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.NumberUtil.FirstULong(System.String)">
            <summary>
            Returns the first 64-bit unsigned integer found inside the string, or null if none are found.
            </summary>
            <param name="str">str</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.NumberUtil.FirstFloat(System.String)">
            <summary>
            Returns the first 32-bit floating point number found inside the string, or null if none are found.
            </summary>
            <param name="str">str</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.NumberUtil.FirstDouble(System.String)">
            <summary>
            Returns the first 64-bit floating point number found inside the string, or null if none are found.
            </summary>
            <param name="str">str</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.NumberUtil.BytesToGiB(System.Int64)">
            <summary>
            Converts the specified number of bytes to GiB (Gibibytes -- used in RAM and DISK sizes mostly).
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.NumberUtil.ToFixed1(System.Double)">
            <summary>
            Converts the specified double-precision number to a string with at most 1 decimal place.
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.NumberUtil.ToFixed2(System.Double)">
            <summary>
            Converts the specified double-precision number to a string with at most 2 decimal places.
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.NumberUtil.ToFixed3(System.Double)">
            <summary>
            Converts the specified double-precision number to a string with at most 3 decimal places.
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.NumberUtil.ToFixed4(System.Double)">
            <summary>
            Converts the specified double-precision number to a string with at most 4 decimal places.
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.ObjectPool`1">
            <summary>
            A thread-safe pool where objects of a specific type can be stored and retrieved for later use. Pooling often-used or expensive-to-create objects can improve application performance at the cost of higher memory usage.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:BPUtil.ObjectPool`1.#ctor(System.Func{`0},System.Int32,System.Action{`0},System.Action{`0})">
            <summary>
            Creates an object pool.
            </summary>
            <param name="objectGenerator">A method which generates new objects of the desired type.</param>
            <param name="maxSize">A limit for the pool capacity. Enforcement of this limit is not thread-synchronized, so it may be exceeded slightly if objects are put in the pool from multiple threads.</param>
            <param name="automaticallyCalledWhenPoolingObject">The ObjectPool will call this method for each object that is about to be added to the pool. Usually, it is fine to let this be null. If you are putting something like a List in the pool, you may want this method to call List.Clear().</param>
            <param name="onDestroy">When the pool is full, items that cannot be put into the pool will be passed to this action.  If onDestroy is null, the item's Dispose method will be called if the type implements IDisposable.</param>
        </member>
        <member name="M:BPUtil.ObjectPool`1.GetObject(System.Func{`0})">
            <summary>
            Gets an object from the pool, or constructs a new one if none are available. You should assume all fields of the object contain garbage data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ObjectPool`1.PutObject(`0)">
            <summary>
            Returns an object to the pool so it may be obtained by a later call to GetObject(). Do not use the object after passing it to this method (let it go out of scope).
            </summary>
            <remarks>
            If the pool is currently at or above its max size, the item will not be pooled.
            </remarks>
            <param name="item"></param>
        </member>
        <member name="M:BPUtil.ObjectPool`1.NotAddingItem(`0)">
            <summary>
            Called when the pool is asked to put this item in the pool, but the item is not being added because the pool is full.
            </summary>
            <param name="item">Item that is not being pooled.</param>
        </member>
        <member name="M:BPUtil.Platform.IsRunningOnMono">
            <summary>
            Returns true if Mono.Runtime is defined, indicating that this application is running in the mono environment instead of the official .NET runtime.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.Platform.IsUnix">
            <summary>
            Returns true if the current OS is Linux or MacOS X, etc (not Windows).
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.PrivateAccessor.GetFieldValue``1(System.Object,System.String)">
            <summary>
            Gets the value of the specified private field of the specified object.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="obj">The object to change.</param>
            <param name="name">The name of the private field.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.PrivateAccessor.SetFieldValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of the specified private field of the specified object.
            </summary>
            <param name="obj">The object to change.</param>
            <param name="name">The name of the private field.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:BPUtil.PrivateAccessor.GetPropertyValue``1(System.Object,System.String)">
            <summary>
            Gets the value of the specified private property of the specified object.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="obj">The object to change.</param>
            <param name="name">The name of the private property.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.PrivateAccessor.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of the specified private property of the specified object.
            </summary>
            <param name="obj">The object to change.</param>
            <param name="name">The name of the private property.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:BPUtil.PrivateAccessor.CallMethod``1(System.Object,System.String,System.Object[])">
            <summary>
            Calls the specified private method of the specified object.
            </summary>
            <typeparam name="T">The return value type.  If the private method's return type is `void`, simply pass `object` here and the call will return null.</typeparam>
            <param name="obj">The object on which to call a private method.</param>
            <param name="name">The name of the private method.</param>
            <param name="param">Arguments to the private method.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.PrivateAccessor.GetStaticFieldValue``1(System.Type,System.String)">
            <summary>
            Gets the value of the specified private static field.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="t">The type to which the static field belongs.</param>
            <param name="name">The name of the private field.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.PrivateAccessor.SetStaticFieldValue(System.Type,System.String,System.Object)">
            <summary>
            Sets the value of the specified private static field.
            </summary>
            <param name="t">The type to which the static field belongs.</param>
            <param name="name">The name of the private field.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:BPUtil.PrivateAccessor.GetStaticPropertyValue``1(System.Type,System.String)">
            <summary>
            Gets the value of the specified private static property.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="t">The type to which the static property belongs.</param>
            <param name="name">The name of the private property.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.PrivateAccessor.SetStaticPropertyValue(System.Type,System.String,System.Object)">
            <summary>
            Sets the value of the specified private static property.
            </summary>
            <param name="t">The type to which the static property belongs.</param>
            <param name="name">The name of the private property.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:BPUtil.PrivateAccessor.CallStaticMethod``1(System.Type,System.String,System.Object[])">
            <summary>
            Calls the specified private static method.
            </summary>
            <typeparam name="T">The return value type.  If the private method's return type is `void`, simply pass `object` here and the call will return null.</typeparam>
            <param name="t">The type to which the static method belongs.</param>
            <param name="name">The name of the private method.</param>
            <param name="param">Arguments to the private method.</param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.ProcessExecuteFlags">
            <summary>
            Flags which guide ProcessHelper.ExecuteInteractive in selecting a process to impersonate.
            The interaction of various flags is not well-documented, and study of the source code may be required to understand the resulting behavior.
            </summary>
        </member>
        <member name="F:BPUtil.ProcessExecuteFlags.ImpersonateExplorer">
            <summary>
            If set, ProcessHelper will prefer to impersonate explorer.exe.  Since explorer.exe is not usually run as an administrator, it may be impossible to start a process that requires administrator.
            </summary>
        </member>
        <member name="F:BPUtil.ProcessExecuteFlags.ImpersonateWinlogon">
            <summary>
            If set, ProcessHelper will prefer to impersonate winlogon.exe.  Rumor has it that a process impersonating winlogin is killed by the system after about 10 minutes.
            </summary>
        </member>
        <member name="F:BPUtil.ProcessExecuteFlags.ImpersonateAnyProcess">
            <summary>
            If set, ProcessHelper will fall back to impersonating any other process which does not have its own flag, but meets the other selection critera.
            </summary>
        </member>
        <member name="F:BPUtil.ProcessExecuteFlags.ImpersonateLocalSystem">
            <summary>
            If set, ProcessHelper will treat LocalSystem as a suitable user.  When allowed by this flag, LocalSystem is the first priority.
            </summary>
        </member>
        <member name="F:BPUtil.ProcessExecuteFlags.ImpersonateSpecificUser">
            <summary>
            If set, ProcessHelper will treat a specific user (by name) as a suitable user.
            </summary>
        </member>
        <member name="F:BPUtil.ProcessExecuteFlags.ImpersonateAnyUser">
            <summary>
            If set, ProcessHelper will not care which user it impersonates.
            </summary>
        </member>
        <member name="F:BPUtil.ProcessExecuteArgs.userName">
            <summary>
            To be set when using ProcessExecuteFlags.ImpersonateSpecificUser.  This specifies the user name of the suitable user.
            </summary>
        </member>
        <member name="F:BPUtil.ProcessExecuteArgs.userNameIgnoreCase">
            <summary>
            (Default: false) If true, case-insensitive comparison is used when matching the [userName] field.
            </summary>
        </member>
        <member name="F:BPUtil.ProcessExecuteArgs.requiredSessionID">
            <summary>
              <para>Specifies the session ID that needs to be impersonated.</para>
              <para>If -1 (default), the argument will be replaced with the session ID of the active console (local monitor).</para>
              <para>If null, any session ID will be acceptable to start the program in. Even session 0, which is where background services live!</para>
            </summary>
        </member>
        <member name="M:BPUtil.ProcessExecuteArgs.#ctor(BPUtil.ProcessExecuteFlags,System.String)">
            <summary>
            
            </summary>
            <param name="flags">Flags to guide ProcessHelper.ExecuteInteractive.</param>
            <param name="userName">To be set when using ProcessExecuteFlags.ImpersonateSpecificUser.  This specifies the user name of the suitable user.</param>
        </member>
        <member name="T:BPUtil.ProcessHelper">
            <summary>
            Provides Windows-only process utility methods.
            </summary>
        </member>
        <member name="M:BPUtil.ProcessHelper.ExecuteInteractive(System.String,System.String,System.String,BPUtil.ProcessExecuteArgs)">
            <summary>
            Attempts to start the specified interactive process in the current console session (a.k.a. local desktop visible on the computer's monitor) by impersonating the security context of another process that is running in that session.  This method can be called from a background service to start an interactive process.  Returns the process ID of the executed program, or -1 if there was a problem. May also throw an exception.
            </summary>
            <param name="executablePath">This can be null if the first token in the [commandLine] argument is the executable path.</param>
            <param name="commandLine">Sometimes, for unknown reasons, the first argument in this command line can be dropped.  This may be avoided by passing null for [executablePath] and including the executable path as the first token of [commandLine].</param>
            <param name="workingDirectory"></param>
            <param name="execArgs">Optional arguments to control process selection.</param>
            <returns>The process ID of the executed program, or -1 if there was a problem. May also throw an exception.</returns>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ProcessHelper.GetConsoleSessionId">
            <summary>
            Returns the current active console session Id, or -1 if there is no session currently attached to the physical console.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ProcessHelper.IsSuitableProcess(System.Diagnostics.Process,BPUtil.ProcessExecuteArgs)">
            <summary>
            Returns true if the specified process is suitable for impersonation based on all the rules specified in the ProcessExecuteArgs instance.
            </summary>
            <param name="p"></param>
            <param name="execArgs"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ProcessHelper.ProcessOwnedByUser(System.Int32,System.String,System.Boolean)">
            <summary>
            Determines if the specified process is owned by the specified user.
            </summary>
            <param name="pid">The ID of the process.</param>
            <param name="userName">A user name.  If the provided user name contains a domain name, the domain name of the processes's owner must match in order for this method to return true.</param>
            <param name="ignoreCase">If true, the user name comparison is case-insensitive.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ProcessHelper.GetUserWhichOwnsProcess(System.Int32)">
            <summary>
            Returns the name of the user which owns the specified process, including domain name. e.g. "NT AUTHORITY\SYSTEM"
            </summary>
            <param name="pid">The ID of the process.</param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.ProcessRunner">
            <summary>
            Provides static methods to run a process and retrieve its output.
            </summary>
        </member>
        <member name="M:BPUtil.ProcessRunner.RunProcessAndWait(System.String,System.String,System.String@,System.String@,BPUtil.ProcessRunnerOptions)">
            <summary>
            Synchronously run the specified process in the background with the specified arguments, and return the exit code that the process returned.
            The contents of the std and err output streams are provided via out parameters.
            </summary>
            <param name="fileName">The path to the process to start.</param>
            <param name="arguments">Arguments for the process.</param>
            <param name="std">(out) standard output stream text</param>
            <param name="err">(out) standard error stream text</param>
            <param name="options">(Optional) Additional options.</param>
            <returns>The exit code of the process that ran.</returns>
        </member>
        <member name="M:BPUtil.ProcessRunner.RunProcessAndWait(System.String,System.String,System.String@,System.String@,System.Boolean@,BPUtil.ProcessRunnerOptions)">
            <summary>
            Synchronously run the specified process in the background with the specified arguments, and return the exit code that the process returned.
            The contents of the std and err output streams are provided via out parameters.
            </summary>
            <param name="fileName">The path to the process to start.</param>
            <param name="arguments">Arguments for the process.</param>
            <param name="std">(out) standard output stream text</param>
            <param name="err">(out) standard error stream text</param>
            <param name="bThreadAbort">Set to true from another thread to abort.</param>
            <param name="options">(Optional) Additional options.</param>
            <returns>The exit code of the process that ran.</returns>
        </member>
        <member name="M:BPUtil.ProcessRunner.RunProcessAndWait(System.String,System.String,System.Action{BPUtil.ProcessRunnerOutputEventArgs},System.Action{BPUtil.ProcessRunnerOutputEventArgs},BPUtil.ProcessRunnerOptions)">
            <summary>
            Synchronously run the specified process in the background with the specified arguments, and return the exit code that the process returned.
            The contents of the std and err output streams are provided to callback functions.
            </summary>
            <param name="fileName">The path to the process to start.</param>
            <param name="arguments">Arguments for the process.</param>
            <param name="std">Lines read from standard output stream are sent to this callback.</param>
            <param name="err">Lines read from standard error stream are sent to this callback.</param>
            <param name="options">(Optional) Additional options.</param>
            <returns>The exit code of the process that ran.</returns>
        </member>
        <member name="M:BPUtil.ProcessRunner.RunProcess(System.String,System.String,System.Action{System.String},System.Action{System.String},BPUtil.ProcessRunnerOptions)">
            <summary>
            Asynchronously run the specified process in the background with the specified arguments.
            The contents of the std and err output streams are provided to callback functions.
            </summary>
            <param name="fileName">The path to the process to start.</param>
            <param name="arguments">Arguments for the process.</param>
            <param name="std">Lines read from standard output stream are sent to this callback.</param>
            <param name="err">Lines read from standard error stream are sent to this callback.</param>
            <param name="options">(Optional) Additional options.</param>
            <returns>An object containing the Process instance and helper functions.</returns>
        </member>
        <member name="M:BPUtil.ProcessRunner.RunProcess_StdBinary_ErrString(System.String,System.String,System.Action{System.Byte[]},System.Action{System.String},BPUtil.ProcessRunnerOptions)">
            <summary>
            Asynchronously run the specified process in the background with the specified arguments.
            The contents of the std (binary) and err (string) output streams are provided to callback functions.
            </summary>
            <param name="fileName">The path to the process to start.</param>
            <param name="arguments">Arguments for the process.</param>
            <param name="std">Binary data buffers read from standard output stream are sent to this callback.</param>
            <param name="err">Lines read from standard error stream are sent to this callback.</param>
            <param name="options">(Optional) Additional options.</param>
            <returns>An object containing the Process instance and helper functions.</returns>
        </member>
        <member name="M:BPUtil.ProcessRunner.RunProcess_StdString_ErrBinary(System.String,System.String,System.Action{System.String},System.Action{System.Byte[]},BPUtil.ProcessRunnerOptions)">
            <summary>
            Asynchronously run the specified process in the background with the specified arguments.
            The contents of the std (string) and err (binary) output streams are provided to callback functions.
            </summary>
            <param name="fileName">The path to the process to start.</param>
            <param name="arguments">Arguments for the process.</param>
            <param name="std">Lines read from standard output stream are sent to this callback.</param>
            <param name="err">Binary data buffers read from standard error stream are sent to this callback.</param>
            <param name="options">(Optional) Additional options.</param>
            <returns>An object containing the Process instance and helper functions.</returns>
        </member>
        <member name="M:BPUtil.ProcessRunner.RunProcess_StdBinary_ErrBinary(System.String,System.String,System.Action{System.Byte[]},System.Action{System.Byte[]},BPUtil.ProcessRunnerOptions)">
            <summary>
            Asynchronously run the specified process in the background with the specified arguments.
            The contents of the std (binary) and err (binary) output streams are provided to callback functions.
            </summary>
            <param name="fileName">The path to the process to start.</param>
            <param name="arguments">Arguments for the process.</param>
            <param name="std">Binary data buffers read from standard output stream are sent to this callback.</param>
            <param name="err">Binary data buffers from standard error stream are sent to this callback.</param>
            <param name="options">(Optional) Additional options.</param>
            <returns>An object containing the Process instance and helper functions.</returns>
        </member>
        <member name="T:BPUtil.ProcessRunnerOptions">
            <summary>
            Options to customize the process runner.
            </summary>
        </member>
        <member name="F:BPUtil.ProcessRunnerOptions.priority">
            <summary>
            The priority to set for the process.  This may have no effect if we don't have permission to change the process priority.
            </summary>
        </member>
        <member name="F:BPUtil.ProcessRunnerOptions.environmentVariables">
            <summary>
            Environment variables to set for the process.
            </summary>
        </member>
        <member name="F:BPUtil.ProcessRunnerOptions.workingDirectory">
            <summary>
            Working directory to set in the <see cref="T:System.Diagnostics.ProcessStartInfo"/> (if not null).
            </summary>
        </member>
        <member name="F:BPUtil.ProcessRunnerOptions.UseShellExecute">
            <summary>
            Gets or sets a value indicating whether to use the operating system shell to start the process. (Default: false)
            </summary>
        </member>
        <member name="F:BPUtil.ProcessRunnerOptions.CreateNoWindow">
            <summary>
            Gets or sets a value indicating whether to start the process in a new window. (Default: true)
            </summary>
        </member>
        <member name="M:BPUtil.ProcessRunnerOptions.#ctor">
            <summary>
            Constructs an empty ProcessRunnerOptions.
            </summary>
        </member>
        <member name="M:BPUtil.ProcessRunnerOptions.#ctor(System.Nullable{System.Diagnostics.ProcessPriorityClass})">
            <summary>
            Constructs a ProcessRunnerOptions.
            </summary>
            <param name="priority">Priority which the process should be set to just after it is started.</param>
        </member>
        <member name="M:BPUtil.ProcessRunnerOptions.Apply(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Applies options from this class to the ProcessStartInfo object.
            </summary>
            <param name="psi">A ProcessStartInfo to apply the options to.</param>
        </member>
        <member name="M:BPUtil.ProcessRunnerOptions.Apply(System.Diagnostics.Process)">
            <summary>
            Applies options from this class to the Process object.
            </summary>
            <param name="p">A Process to apply the options to.</param>
        </member>
        <member name="T:BPUtil.ProcessRunnerHandle">
            <summary>
            Provides access to the Process instance and a method to wait for exit.
            </summary>
        </member>
        <member name="F:BPUtil.ProcessRunnerHandle.process">
            <summary>
            Reference to the process that was started.
            </summary>
        </member>
        <member name="F:BPUtil.ProcessRunnerHandle.stdoutReader">
            <summary>
            Can contain a reference to a ProcessStreamBinaryReader for stdout.
            </summary>
        </member>
        <member name="F:BPUtil.ProcessRunnerHandle.stderrReader">
            <summary>
            Can contain a reference to a ProcessStreamBinaryReader for stderr.
            </summary>
        </member>
        <member name="M:BPUtil.ProcessRunnerHandle.#ctor(System.Diagnostics.Process)">
            <summary>
            Constructs a new ProcessRunnerHandle.
            </summary>
            <param name="process"></param>
        </member>
        <member name="M:BPUtil.ProcessRunnerHandle.WaitForExit">
            <summary>
            Waits for the process to exit, then returns the exit code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.ProcessRunnerHandle.WaitForExit(System.Int32,System.Int32@)">
            <summary>
            Waits for the process to exit, then returns true if the process exited in the allotted time.
            </summary>
            <param name="millisecondTimeout">Number of milliseconds to wait.  If this timeout expires, the method returns false.</param>
            <param name="exitCode">The exit code returned by the process (only if the proxess exited in the allotted time).</param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.ProcessRunnerOutputEventArgs">
            <summary>
            Event arguments for a Standard Output or Standard Error write event.
            </summary>
        </member>
        <member name="F:BPUtil.ProcessRunnerOutputEventArgs.Line">
            <summary>
            The line which was output by the process.
            </summary>
        </member>
        <member name="F:BPUtil.ProcessRunnerOutputEventArgs.AbortCallback">
            <summary>
            Call this function to abort the process early.
            </summary>
        </member>
        <member name="M:BPUtil.ProcessRunnerOutputEventArgs.#ctor">
            <summary>
            Constructs an empty ProcessRunnerOutputEventArgs
            </summary>
        </member>
        <member name="M:BPUtil.ProcessRunnerOutputEventArgs.#ctor(System.String,System.Action)">
            <summary>
            Constructs a ProcessRunnerOutputEventArgs
            </summary>
            <param name="line">Line of text that was output.</param>
            <param name="abortCallback">Action to call if you wish to exit the process.</param>
        </member>
        <member name="T:BPUtil.ProcessStreamBinaryReader">
            <summary>
            Reads binary data from a stream and sends each buffer to a callback method.
            </summary>
        </member>
        <member name="T:BPUtil.RegistryUtil">
            <summary>
            Provides utility methods for accessing the Windows Registry.
            </summary>
        </member>
        <member name="F:BPUtil.RegistryUtil.Force32BitRegistryAccess">
            <summary>
            Set = true to read entries written by 32 bit programs on 64 bit Windows.
            
            On 32 bit Windows, this setting has no effect.
            </summary>
        </member>
        <member name="P:BPUtil.RegistryUtil.HKLM">
            <summary>
            Gets HKEY_LOCAL_MACHINE in either the 32 or 64 bit view depending on RegistryUtil configuration and OS version.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BPUtil.RegistryUtil.HKCU">
            <summary>
            Gets HKEY_CURRENT_USER in either the 32 or 64 bit view depending on RegistryUtil configuration and OS version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.RegistryUtil.GetHKLMKey(System.String)">
            <summary>
            Returns the requested RegistryKey or null if the key does not exist.
            </summary>
            <param name="path">A path relative to HKEY_LOCAL_MACHINE.  E.g. "SOFTWARE\\Microsoft"</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.RegistryUtil.GetHKCUKey(System.String)">
            <summary>
            Returns the requested RegistryKey or null if the key does not exist.
            </summary>
            <param name="path">A path relative to HKEY_CURRENT_USER.  E.g. "SOFTWARE\\Microsoft"</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.RegistryUtil.GetHKLMValue``1(System.String,System.String,``0)">
            <summary>
            Gets the value of a registry key in HKEY_LOCAL_MACHINE.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">A path relative to HKEY_LOCAL_MACHINE.  E.g. "SOFTWARE\\Microsoft"</param>
            <param name="key">Key</param>
            <param name="defaultValue">Value to return if the key does not exist.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.RegistryUtil.GetHKCUValue``1(System.String,System.String,``0)">
            <summary>
            Gets the value of a registry key in HKEY_CURRENT_USER.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">A path relative to HKEY_CURRENT_USER.  E.g. "SOFTWARE\\Microsoft"</param>
            <param name="key">Key</param>
            <param name="defaultValue">Value to return if the key does not exist.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.RegistryUtil.SetHKLMValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            Attempts to set the value of the specified registry key, throwing an exception if it fails.
            </summary>
            <param name="path">Path to the folder where the key is located, relative to HKEY_LOCAL_MACHINE.</param>
            <param name="key">Name of the key to set the value of.</param>
            <param name="value">Value to set.</param>
            <param name="valueKind">The type of value stored in this registry key.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.RegistryUtil.SetHKCUValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            Attempts to set the value of the specified registry key, throwing an exception if it fails.
            </summary>
            <param name="path">Path to the folder where the key is located, relative to HKEY_CURRENT_USER.</param>
            <param name="key">Name of the key to set the value of.</param>
            <param name="value">Value to set.</param>
            <param name="valueKind">The type of value stored in this registry key.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.RegistryUtil.SetHKLMValueSafe(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            Attempts to set the value of the specified registry key, returning true if successful or false if not.
            </summary>
            <param name="path">Path to the folder where the key is located, relative to HKEY_LOCAL_MACHINE.</param>
            <param name="key">Name of the key to set the value of.</param>
            <param name="value">Value to set.</param>
            <param name="valueKind">The type of value stored in this registry key.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.RegistryUtil.SetHKCUValueSafe(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            Attempts to set the value of the specified registry key, returning true if successful or false if not.
            </summary>
            <param name="path">Path to the folder where the key is located, relative to HKEY_CURRENT_USER.</param>
            <param name="key">Name of the key to set the value of.</param>
            <param name="value">Value to set.</param>
            <param name="valueKind">The type of value stored in this registry key.</param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.RegEdit">
            <summary>
            Provides a cleaner interface for reading registry values from a RegistryKey.
            </summary>
        </member>
        <member name="F:BPUtil.RegEdit.typeCheck">
            <summary>
            If true, values must already exist and be the expected type, or else an exception will be thrown.
            </summary>
        </member>
        <member name="M:BPUtil.RegEdit.String(System.String)">
            <summary>
            Reads a String value.
            </summary>
            <param name="name">Case-insensitive value name.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.RegEdit.DWord(System.String)">
            <summary>
            Reads a DWord (32 bit integer) value.
            </summary>
            <param name="name">Case-insensitive value name.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.RegEdit.QWord(System.String)">
            <summary>
            Reads a QWord (64 bit integer) value.
            </summary>
            <param name="name">Case-insensitive value name.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.RegEdit.String(System.String,System.String)">
            <summary>
            Writes a String value.
            </summary>
            <param name="name">Value name</param>
            <param name="value"></param>
        </member>
        <member name="M:BPUtil.RegEdit.DWord(System.String,System.Int32)">
            <summary>
            Writes a DWord (32 bit integer) value.
            </summary>
            <param name="name">Value name</param>
            <param name="value"></param>
        </member>
        <member name="M:BPUtil.RegEdit.QWord(System.String,System.Int64)">
            <summary>
            Writes a QWord (64 bit integer) value.
            </summary>
            <param name="name">Value name</param>
            <param name="value"></param>
        </member>
        <member name="T:BPUtil.SecureRandom">
            <summary>
            This class keeps an internal thread-safe CryptoRandom instance which does all the real work.
            </summary>
        </member>
        <member name="M:BPUtil.SecureRandom.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SecureRandom.Next(System.Int32)">
            <summary>
            Returns a random number in the range [0, maxValue)
            </summary>
            <param name="maxValue">Exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SecureRandom.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number in the range [minvalue, maxValue)
            </summary>
            <param name="minValue">Inclusive minimum value.</param>
            <param name="maxValue">Exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SecureRandom.NextDouble">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="M:BPUtil.SecureRandom.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer"/> is null.
            </exception>
        </member>
        <member name="T:BPUtil.SecureRandom.CryptoRandom">
            <summary>
            A random number generator based on the RNGCryptoServiceProvider.
            Adapted from the "Tales from the CryptoRandom" article in MSDN Magazine (September 2007)
            but with explicit guarantee to be thread safe. Note that this implementation also includes
            an optional (enabled by default) random buffer which provides a significant speed boost as
            it greatly reduces the amount of calls into unmanaged land.
            </summary>
        </member>
        <member name="P:BPUtil.SecureRandom.CryptoRandom.IsRandomPoolEnabled">
            <summary>
            Gets a value indicating whether this instance has random pool enabled.
            </summary>
            <value>
                <c>true</c> if this instance has random pool enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:BPUtil.SecureRandom.CryptoRandom.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BPUtil.SecureRandom.CryptoRandom"/> class with.
            Using this overload will enable the random buffer pool.
            </summary>
        </member>
        <member name="M:BPUtil.SecureRandom.CryptoRandom.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BPUtil.SecureRandom.CryptoRandom"/> class.
            This method will disregard whatever value is passed as seed and it's only implemented
            in order to be fully backwards compatible with <see cref="T:System.Random"/>.
            Using this overload will enable the random buffer pool.
            </summary>
            <param name="ignoredSeed">The ignored seed.</param>
        </member>
        <member name="M:BPUtil.SecureRandom.CryptoRandom.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:BPUtil.SecureRandom.CryptoRandom"/> class with
            optional random buffer.
            </summary>
            <param name="enableRandomPool">set to <c>true</c> to enable the random pool buffer for increased performance.</param>
        </member>
        <member name="M:BPUtil.SecureRandom.CryptoRandom.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:BPUtil.SecureRandom.CryptoRandom.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated. <paramref name="maxValue"/> must be greater than or equal to zero.</param>
            <returns>
            A 32-bit signed integer greater than or equal to zero, and less than <paramref name="maxValue"/>; that is, the range of return values ordinarily includes zero but not <paramref name="maxValue"/>. However, if <paramref name="maxValue"/> equals zero, <paramref name="maxValue"/> is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="maxValue"/> is less than zero.
            </exception>
        </member>
        <member name="M:BPUtil.SecureRandom.CryptoRandom.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
            <returns>
            A 32-bit signed integer greater than or equal to <paramref name="minValue"/> and less than <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but not <paramref name="maxValue"/>. If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
        </member>
        <member name="M:BPUtil.SecureRandom.CryptoRandom.NextDouble">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="M:BPUtil.SecureRandom.CryptoRandom.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer"/> is null.
            </exception>
        </member>
        <member name="M:BPUtil.SecureRandom.CryptoRandom.GetRandomUInt32">
            <summary>
            Gets one random unsigned 32bit integer in a thread safe manner.
            </summary>
        </member>
        <member name="M:BPUtil.SecureRandom.CryptoRandom.EnsureRandomBuffer(System.Int32)">
            <summary>
            Ensures that we have enough bytes in the random buffer.
            </summary>
            <param name="requiredBytes">The number of required bytes.</param>
        </member>
        <member name="T:BPUtil.SerializableObjectBase">
            <summary>
            <para>Any class inheriting from this may be loaded and saved from file easily. Uses <see cref="T:System.Xml.Serialization.XmlSerializer"/>.</para>
            <para>Note that strings stored via this class will have '\r' characters removed by the xml writer.</para>
            </summary>
        </member>
        <member name="M:BPUtil.SerializableObjectBase.Save(System.String)">
            <summary>
            Saves this instance to file.  Returns true if successful.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SerializableObjectBase.Load(System.String)">
            <summary>
            Saves this instance from file.  Returns true if successful.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SerializableObjectBase.SaveIfNoExist(System.String)">
            <summary>
            (Thread-)Safely checks if the settings file exists, and if not, saves the current instance.  Returns true if a file was saved.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="T:BPUtil.SerializeProperties">
            <summary>
            Annotate the serializable object with this in order to load serialized properties (otherwise only fields are loaded from file).
            </summary>
        </member>
        <member name="T:BPUtil.SetTimeout">
            <summary>
            Offers the ability to call methods after a delay of milliseconds. Operations scheduled via this class can be canceled.
            </summary>
        </member>
        <member name="M:BPUtil.SetTimeout.OnGui(System.Action,System.Int32,System.Windows.Forms.Control,System.Action{System.Exception})">
            <summary>
            Invokes on the GUI thread the specified action after the specified timeout.
            </summary>
            <param name="TheAction">The action to run.</param>
            <param name="Timeout">(milliseconds) Values less than 0 are treated as 0.
            If the Timeout value is 0 for an OnGui operation, the invoke process will start before this method returns, making it impossible to cancel the operation.</param>
            <param name="contextForInvoking">A System.Windows.Forms control, required to invoke your method on the GUI thread.</param>
            <param name="ReportException">An action that will be called if an exception occurs during action execution.  If null, uses Logger.Debug.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SetTimeout.OnBackground(System.Action,System.Int32,System.Action{System.Exception})">
            <summary>
            Invokes on a background thread the specified action after the specified timeout.
            </summary>
            <param name="TheAction">The action to run.</param>
            <param name="Timeout">(milliseconds) Values less than 0 are treated as 0.</param>
            <param name="ReportException">An action that will be called if an exception occurs during action execution.  If null, uses Logger.Debug.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SetTimeout.AfterGuiResumesThenOnBackground(System.Action,System.Int32,System.Windows.Forms.Control,System.Action{System.Exception})">
            <summary>
            Invokes a call to SetTimeout.OnBackground on the Gui Thread, so that other UI events have a chance to finish first.
            This timeout will not be cancelable.
            </summary>
            <param name="TheAction">The action to run.</param>
            <param name="Timeout">(milliseconds) Values less than 0 are treated as 0.</param>
            <param name="contextForInvoking">A System.Windows.Forms control, required to invoke your method on the GUI thread.</param>
            <param name="ReportException">An action that will be called if an exception occurs during action execution.  If null, uses Logger.Debug.</param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.SetTimeout.TimeoutHandle">
            <summary>
            Allows cancellation of a scheduled operation up until the point that it begins. There is no confirmation if the cancelation was successful.
            </summary>
        </member>
        <member name="M:BPUtil.SetTimeout.TimeoutHandle.Cancel">
            <summary>
            Cancels this timeout, if it is still waiting.
            </summary>
        </member>
        <member name="M:BPUtil.SetTimeout.TimeoutHandle.Wait(System.Int32)">
            <summary>
            Waits up to the specified number of milliseconds and returns early with a value of true if the Cancel method was called during this time. Returns false at the end of the waiting period if not canceled.
            </summary>
            <param name="ms">The number of milliseconds to wait, or -1 to wait indefinitely.</param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.SimpleThreadPool">
            <summary>
            A simple thread pool with limits for min/max thread count.
            </summary>
        </member>
        <member name="F:BPUtil.SimpleThreadPool.actionQueue">
            <summary>
            A queue of actions to be performed by threads.
            </summary>
        </member>
        <member name="P:BPUtil.SimpleThreadPool.PoolName">
            <summary>
            Gets the name of this thread pool.
            </summary>
        </member>
        <member name="P:BPUtil.SimpleThreadPool.CurrentLiveThreads">
            <summary>
            Gets the number of threads that are currently available, including those which are busy and those which are idle.
            </summary>
        </member>
        <member name="P:BPUtil.SimpleThreadPool.CurrentBusyThreads">
            <summary>
            Gets the number of threads that are currently busy processing actions.
            </summary>
        </member>
        <member name="P:BPUtil.SimpleThreadPool.CurrentIdleThreads">
            <summary>
            Gets the number of threads that are currently busy processing actions.
            </summary>
        </member>
        <member name="P:BPUtil.SimpleThreadPool.MaxThreads">
            <summary>
            Gets or sets the soft maximum number of threads this pool should have active at any given time.  It is possible for there to be temporarily more threads than this if certain race conditions are met.  If reducing the value, it may take some time for the number of threads to fall, as no special effort is taken to reduce the live thread count quickly.
            </summary>
        </member>
        <member name="P:BPUtil.SimpleThreadPool.MinThreads">
            <summary>
            Gets or sets the minimum number of threads this pool should have active at any given time.  If increasing the value, it may take some time for the number of threads to rise, as no special effort is taken to reach this number.
            </summary>
        </member>
        <member name="P:BPUtil.SimpleThreadPool.TotalActionsQueued">
            <summary>
            Gets the total number of actions that have been queued in this pool.
            </summary>
        </member>
        <member name="P:BPUtil.SimpleThreadPool.TotalActionsStarted">
            <summary>
            Gets the total number of actions that have been started by this pool.
            </summary>
        </member>
        <member name="P:BPUtil.SimpleThreadPool.TotalActionsFinished">
            <summary>
            Gets the total number of actions that have been finished by this pool.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleThreadPool.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Action{System.Exception,System.String})">
            <summary>
            Creates a new SimpleThreadPool.
            </summary>
            <param name="poolName">The name this pool shall have. Each thread created by this pool shall be named with this string followed by a space and an auto-incremented number.</param>
            <param name="minThreads">The minimum number of threads that should be kept alive at all times.</param>
            <param name="maxThreads">The largest number of threads this pool should attempt to have alive at any given time.  It is possible for there to be temporarily more threads than this if certain race conditions are met.</param>
            <param name="threadTimeoutMilliseconds">Threads with no work to do will automatically terminate after this many milliseconds (unless doing so would dishonor the [minThreads] limit).</param>
            <param name="useBackgroundThreads">If true, the application will be able to exit without waiting for all the threads in this thread pool to exit.  Background threads do not prevent a process from terminating. Once all foreground threads belonging to a process have terminated, the common language runtime ends the process. Any remaining background threads are stopped and do not complete.</param>
            <param name="logErrorAction">A method to use for logging exceptions.  If null, SimpleHttpLogger.Log will be used.</param>
        </member>
        <member name="M:BPUtil.SimpleThreadPool.SpawnNewThreads">
            <summary>
            Creates new threads.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.SimpleThreadPool.Stop">
            <summary>
            Prevents the creation of new threads and prevents new actions from being enqueued.  Existing running actions remain running.  This cannot be undone.
            </summary>
        </member>
        <member name="M:BPUtil.SimpleThreadPool.Enqueue(System.Action)">
            <summary>
            Adds the specified action to the queue, to be called as soon as possible by a thread from the pool.
            </summary>
            <param name="action">Action to run on the thread pool.</param>
        </member>
        <member name="T:BPUtil.StaticRandom">
            <summary>
            This class keeps an internal thread-local Random instance, making it thread-safe. Each thread's Random instance uses a different seed.
            </summary>
        </member>
        <member name="M:BPUtil.StaticRandom.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StaticRandom.Next(System.Int32)">
            <summary>
            Returns a random number in the range [0, maxValue)
            </summary>
            <param name="maxValue">Exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StaticRandom.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number in the range [minvalue, maxValue)
            </summary>
            <param name="minValue">Inclusive minimum value.</param>
            <param name="maxValue">Exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StaticRandom.NextBytes(System.Int32)">
            <summary>
            Returns a byte array of the specified length, filled with random data.
            </summary>
            <param name="length">Length of the byte array to return.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StaticRandom.NextBytes(System.Byte[])">
            <summary>
            Fills the specified byte array with random data.
            </summary>
            <param name="buf">A byte array to fill with random data.</param>
        </member>
        <member name="T:BPUtil.StringUtil">
            <summary>
            Provides utilities for working with strings.
            </summary>
        </member>
        <member name="M:BPUtil.StringUtil.GetRandomAlphaNumericChar">
            <summary>
            Gets a random character from the ranges 0-9, A-Z, a-z. There are 62 possible characters this method will return.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.GetRandomAlphaNumericString(System.UInt16)">
            <summary>
            Gets a string of random characters from the ranges 0-9, A-Z, a-z. There are 62 possible characters this method will return.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.GetRandomAsciiPrintableChar">
            <summary>
            Gets a random character between ASCII values 32 (inclusive) and 127 (exclusive).
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.GetRandomAsciiPrintableString(System.UInt16)">
            <summary>
            Gets a random character between ASCII values 32 (inclusive) and 127 (exclusive).
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.HtmlAttributeEncode(System.String)">
            <summary>
            <para>Encodes the characters '&lt;', '&gt;', '"', '&amp;', and apostrophe as html entities so that the resulting string may be inserted into an html attribute.</para>
            </summary>
            <remarks>
            <para>Compared to HttpUtility.HtmlAttributeEncode, this method encodes the same characters plus the &gt; character.</para>
            <para>Also, until .NET 4.5, HttpUtility.HtmlAttributeEncode does not encode the apostrophe.</para>
            <para>This method encodes the same characters as System.Security.SecurityElement.Escape(), with the difference being that the SecurityElement.Escape() method is intended for XML encoding and encodes apostrophe as &amp;apos; while this method encodes apostrophe as &amp;#39; which is more appropriate for HTML.</para>
            </remarks>
            <param name="str">The string to encode.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.HtmlAttributeEncodeMinimal(System.String)">
            <summary>
            <para>Encodes the characters '"' and apostrophe as html entities so that the resulting string may be inserted into an html attribute. '&lt;', '&gt;', and '&amp;' characters are left alone.</para>
            </summary>
            <param name="str">The string to encode.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.HtmlEncode(System.String)">
            <summary>
            Encodes HTML-reserved characters as the appropriate entities so the string can appear safely in HTML source.
            </summary>
            <param name="str">String which may contain HTML-reserved characters.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.HtmlDecode(System.String)">
            <summary>
            Decodes a string of HTML markup, returning the text representation.  Some information, such as HTML tags, can be lost in the conversion.
            </summary>
            <param name="str">String of HTML markup.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.IsAlphaNumeric(System.String)">
            <summary>
            Returns true if the string contains only characters from the set: A-Z, a-z, 0-9. Null returns true.
            </summary>
            <param name="str">String to test.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.IsAlphaNumericOrUnderscore(System.String)">
            <summary>
            Returns true if the string contains only characters from the set: A-Z, a-z, 0-9,_. Null returns true.
            </summary>
            <param name="str">String to test.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.IsPrintableName(System.String)">
            <summary>
            Returns true if the string meets minimum reasonable criteria for a printable display name, meaning it consists of at least one alphanumeric character among any number of spaces or other ASCII-printable characters.
            </summary>
            <param name="str">String to test.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.VisualizeSpecialCharacters(System.String)">
            <summary>
            Returns a copy of the string that has certain special characters replaced with special visualizing characters.
            Note that it is possible for these replacement characters to also exist in the source string and thereby cause some ambiguity.
            </summary>
            <param name="str">A string which may contain special characters.</param>
            <returns>A string with certain special characters replaced.</returns>
        </member>
        <member name="M:BPUtil.StringUtil.JavaScriptStringEncode(System.String)">
            <summary>
            <para>Encodes a string so it can be safely placed into a JavaScript string literal.</para>
            <para>From .NET reference source.</para>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.CharRequiresJavaScriptEncoding(System.Char)">
            <summary>
            Based on .NET reference source.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.AppendCharAsUnicodeJavaScript(System.Text.StringBuilder,System.Char)">
            <summary>
            From .NET reference source.
            </summary>
            <param name="builder"></param>
            <param name="c"></param>
        </member>
        <member name="M:BPUtil.StringUtil.FormatDiskBytes(System.Int64,System.Int32)">
            <summary>
            Returns a number of bytes formatted with an appropriate unit for disk / file sizes.  E.g. 1234567 => 1.18 MiB
            </summary>
            <param name="bytes">Number of bytes</param>
            <param name="decimals">Maximum number of decimal places to expose.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.FormatNetworkBytes(System.Int64,System.Int32)">
            <summary>
            Returns a number of bytes formatted with an appropriate unit for network transfer sizes.  E.g. 1234567 => 1.23 MB
            </summary>
            <param name="bytes">Number of bytes</param>
            <param name="decimals">Maximum number of decimal places to expose.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.FormatNetworkBits(System.Int64)">
            <summary>
            <para>Returns a number of bits formatted with an appropriate unit for network transfer sizes.  E.g. 1234567 => 1.2 Mb</para>
            <para>An appropriate number of decimal places is chosen automatically based on the size of the input.</para>
            </summary>
            <param name="bits">Number of bits</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.ReplaceMultiple(System.String,System.Collections.Generic.IDictionary{System.Char,System.String})">
            <summary>
            Performs multiple character-to-string replacements on a string.
            </summary>
            <param name="source">The string to perform replacements on.</param>
            <param name="replacements">A dictionary of replacement mappings.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.ReplaceMultiple(System.String,System.Collections.Generic.IDictionary{System.Char,System.Char})">
            <summary>
            Performs multiple character-to-character replacements on a string.
            </summary>
            <param name="source">The string to perform replacements on.</param>
            <param name="replacements">A dictionary of replacement mappings.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.RepairBase64Padding(System.String)">
            <summary>
            Repairs Base64 padding by appending '=' characters to the end of the string until its length is divisible by 4.
            </summary>
            <param name="b64">A base64 string which may be missing its padding characters.</param>
            <returns></returns>
        </member>
        <member name="F:BPUtil.StringUtil.InvalidFileNameChars">
            <summary>
            These characters are not allowed in file names on any common platform (Windows has the most restricted characters).
            </summary>
        </member>
        <member name="F:BPUtil.StringUtil.InvalidWindowsFileNames">
            <summary>
            These file names are not allowed on Windows, either by themselves or with any extension, in any character case.
            </summary>
        </member>
        <member name="M:BPUtil.StringUtil.MakeSafeForFileName(System.String,System.String)">
            <summary>
            Returns a copy of the string that should be valid for use as a file name on any platform.
            Based on https://stackoverflow.com/questions/1976007/what-characters-are-forbidden-in-windows-and-linux-directory-names?rq=1
            </summary>
            <param name="text">A string that may not be safe to use as a file name.</param>
            <param name="replacementStr">Invalid characters should be replaced with this string. May be empty string.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.CreateDataUri(System.String,System.Byte[])">
            <summary>
            Creates a Data URI from a given mime type string and data blob.
            </summary>
            <param name="mime">Mime Type (e.g. "image/jpeg")</param>
            <param name="data">Data to encode into the Data URI.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.SplitIntoSegments(System.String,System.Int32,System.Boolean,System.Action{System.String})">
            <summary>
            Splits the input string into an ordered list of substrings that could be concatenated together to recreate the original input string.  The produced strings will have a maximum length of [maxSegmentLength].  Instead of returning a list of strings, this method passes each substring into a callback method.
            
            This method is designed to split a large text file into smaller chunks.
            </summary>
            <param name="fullText">The string to split.</param>
            <param name="maxSegmentLength">Maximum length of each substring. Minimum value is 1.</param>
            <param name="smartBreak">Try to end substrings early at characters ['\r', '\n', '.', '\t', ' '], to yield cleaner output.</param>
            <param name="callback">A callback method that will receive each string that is split out of the original string.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.SplitIntoSegments(System.String,System.Int32,System.Boolean)">
            <summary>
            Splits the input string into an ordered list of substrings that could be concatenated together to recreate the original input string.  The produced strings will have a maximum length of [maxSegmentLength].
            
            This method is designed to split a large text file into smaller chunks.
            </summary>
            <param name="fullText">The string to split.</param>
            <param name="maxSegmentLength">Maximum length of each substring. Minimum value is 1.</param>
            <param name="smartBreak">Try to end substrings early at characters ['\r', '\n', '.', '\t', ' '], to yield cleaner output.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.ToOrdinal(System.Int32)">
            <summary>
            Adds the appropriate English suffix to the specified number.  i.e.
            -3  ->  -3nd
            -2  ->  -2nd
            -1  ->  -1st
            0  ->  0th
            1  ->  1st
            2  ->  2nd
            3  ->  3rd
            4  ->  4th
            11 -> 11th
            12 -> 12th
            13 -> 13th
            14 -> 14th
            20 -> 20th
            21 -> 21st
            22 -> 22nd
            23 -> 23rd
            24 -> 24th
            </summary>
            <param name="baseNumber"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.GetOrdinalSuffix(System.Int32)">
            <summary>
            Returns the appropriate English suffix for the specified number.  i.e.
            0  -> th
            1  -> st
            2  -> nd
            3  -> rd
            4  -> th
            11 -> th
            12 -> th
            13 -> th
            14 -> th
            20 -> th
            21 -> st
            22 -> nd
            23 -> rd
            24 -> th
            </summary>
            <param name="baseNumber"></param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.ReplaceFileExtension(System.String,System.String)">
            <summary>
            Removes the file extension from a path and appends a new extension.
            </summary>
            <param name="path">Path to change the file extension in, e.g. "C:\Folder\File.ext".</param>
            <param name="newExtension">New extension, e.g. ".txt".</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.Indent(System.String,System.String)">
            <summary>
            Indents each line of the given string.
            </summary>
            <param name="str">String that needs indented.</param>
            <param name="indentationString">Indentation string to insert at the beginning of each line.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.StringUtil.ParseCommandLine(System.String)">
            <summary>
            <para>Given a terminal command, splits the command into its component substrings such that you could join them together again using a space as a separator to yield the original string.</para>
            <para>For example, given this raw input:</para>
            <para>"C:\Program Files\VideoLAN\VLC\vlc.exe" --rtsp-tcp "rtsp://127.0.0.1/"</para>
            <para>... The method returns ...</para>
            <para>["\"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\"", "--rtsp-tcp", "\"rtsp://127.0.0.1/\""]</para>
            <para>... And calling string.Join(" ", ...) on the array above would yield the original input string.</para>
            <para>Note that not all command strings may be entirely compatible with this method.</para>
            </summary>
            <param name="command">Command string that could be run in a text terminal.</param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.TimeUtil">
            <summary>
            Provides methods for working with JavaScript-compatible unix epoch timestamps.
            </summary>
        </member>
        <member name="M:BPUtil.TimeUtil.DateTimeFromEpochMS(System.Int64)">
            <summary>
            Returns a DateTime object based on the specified number of milliseconds since the Unix Epoch (1970/1/1 midnight UTC).  The returned object uses the UTC timezone.
            </summary>
            <param name="ms_since_epoch">The number of milliseconds since the Unix Epoch (1970/1/1 midnight UTC).</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.TimeUtil.GetTimeInMsSinceEpoch">
            <summary>
            Returns the number of milliseconds since the Unix Epoch (1970/1/1 midnight UTC), calculated against the current time (UTC).
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.TimeUtil.GetTimeInMsSinceEpoch(System.DateTime)">
            <summary>
            Returns the number of milliseconds since the Unix Epoch (1970/1/1 midnight UTC) until the specified date.
            </summary>
            <param name="date">The date to calculate milliseconds for.</param>
            <returns>The number of milliseconds since the Unix Epoch (1970/1/1 midnight UTC).</returns>
        </member>
        <member name="M:BPUtil.TimeUtil.ToDHMS(System.TimeSpan)">
            <summary>
            Converts a TimeSpan to a compact unambiguous string format with precision to the second. E.g. "1d20h0m5s" or "1m30s" or "0s" or "-1m30s".
            </summary>
            <param name="span">A TimeSpan instance.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.TimeUtil.ToDHMS(System.Int64)">
            <summary>
            Converts a timespan in milliseconds to a compact unambiguous string format with precision to the second. E.g. "1d20h0m5s" or "1m30s" or "0s" or "-1m30s".
            </summary>
            <param name="timeMs">Time in milliseconds.</param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.Try">
            <summary>
            Contains static methods to execute code with simple predefined exception handlers.
            </summary>
        </member>
        <member name="M:BPUtil.Try.Swallow(System.Action)">
            <summary>
            Runs the specified Action inside a try block and swallows all exceptions.
            </summary>
            <param name="actionToTry">A method to invoke.</param>
        </member>
        <member name="M:BPUtil.Try.Swallow``1(System.Func{``0})">
            <summary>
            Runs the specified Func inside a try block and swallows all exceptions.  Returns default(T) in the event of an exception, otherwise whatever the Func returned.
            </summary>
            <param name="funcToTry">A method to invoke.</param>
        </member>
        <member name="M:BPUtil.Try.SwallowBool(System.Func{System.Boolean})">
            <summary>
            Runs the specified Func (returning bool) inside a try block and swallows all exceptions.  Returns false in the event of an exception, otherwise whatever the Func returned.
            </summary>
            <param name="funcBoolToTry">A method to invoke.</param>
        </member>
        <member name="M:BPUtil.Try.Catch(System.Action)">
            <summary>
            Runs the specified Action inside a try block and logs all exceptions.
            </summary>
            <param name="actionToTry">A method to invoke.</param>
        </member>
        <member name="M:BPUtil.Try.Catch``1(System.Func{``0})">
            <summary>
            Runs the specified Func inside a try block and logs all exceptions.  Returns default(T) in the event of an exception, otherwise whatever the Func returned.
            </summary>
            <param name="funcToTry">A method to invoke.</param>
        </member>
        <member name="M:BPUtil.Try.Catch_RethrowThreadAbort(System.Action)">
            <summary>
            Runs the specified Action inside a try block and logs all exceptions except ThreadAbortException, which is rethrown without being logged.
            </summary>
            <param name="actionToTry">A method to invoke.</param>
        </member>
        <member name="M:BPUtil.Try.CatchBool(System.Func{System.Boolean})">
            <summary>
            Runs the specified Func (returning bool) inside a try block and logs all exceptions.  Returns false in the event of an exception, otherwise whatever the Func returned.
            </summary>
            <param name="funcBoolToTry">A method to invoke.</param>
        </member>
        <member name="M:BPUtil.Try.Get``1(System.Func{``0},``0)">
            <summary>
            This method is used for retreiving values from a dynamic object when you don't know for certain that the values exist.  If an exception is thrown retrieving the value, the default value will be returned instead.
            </summary>
            <typeparam name="T">The type of return value that is expected</typeparam>
            <param name="funcToGet">A function or simple lambda expression that returns the expected value. e.g. "() => obj.maybeMissingField".</param>
            <param name="defaultValue">The value to return if an exception is thrown by [funcToGet].  If unset, defaults to "default(T)".</param>
            <returns></returns>
        </member>
        <member name="T:BPUtil.UdpPacket">
            <summary>
            A packet which has been received by UDP.
            </summary>
        </member>
        <member name="T:BPUtil.UdpBroadcaster">
            <summary>
            A class which sends and optionally receives UDP broadcast packets on a particular port.
            </summary>
        </member>
        <member name="P:BPUtil.UdpBroadcaster.Interface">
            <summary>
            Gets the network interface being used by this UdpBroadcaster.
            </summary>
        </member>
        <member name="E:BPUtil.UdpBroadcaster.PacketReceived">
            <summary>
            Raised when a UDP packet is received.
            </summary>
        </member>
        <member name="M:BPUtil.UdpBroadcaster.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructs a UdpBroadcaster instance that uses the default network interface (ideal for systems that have a single network adapter).
            </summary>
            <param name="port">The port number to send and receive on. This class will attempt to share the port with other processes instead of claiming exclusive use.</param>
            <param name="listen">If true, the UdpBroadcaster will listen for incoming packets on the port.  There is no way to distinguish between a broadcast packet and a packet targeted for this machine specifically, so both kinds of packets will be received.  The PacketReceived event will be raised with each received packet.</param>
        </member>
        <member name="M:BPUtil.UdpBroadcaster.#ctor(System.Net.IPAddress,System.Net.IPAddress,System.Int32,System.Boolean)">
            <summary>
            Constructs a UdpBroadcaster instance to send and listen on specific addresses.
            </summary>
            <param name="broadcastAddress">The address to broadcast to.</param>
            <param name="listenAddress">The address to listen on.</param>
            <param name="port">The port number to send and receive on. This class will attempt to share the port with other processes instead of claiming exclusive use.</param>
            <param name="listen">If true, the UdpBroadcaster will listen for incoming packets on the port.  There is no way to distinguish between a broadcast packet and a packet targeted for this machine specifically, so both kinds of packets will be received.  The PacketReceived event will be raised with each received packet.</param>
        </member>
        <member name="M:BPUtil.UdpBroadcaster.Stop">
            <summary>
            Ends the send and receive threads.
            </summary>
        </member>
        <member name="M:BPUtil.UdpBroadcaster.Broadcast(System.Byte[])">
            <summary>
            Broadcasts the specified packet.
            </summary>
            <param name="packet"></param>
        </member>
        <member name="T:BPUtil.GlobalUdpBroadcaster">
            <summary>
            A class which sends and optionally receives UDP broadcast packets on all interfaces on a particular port.
            </summary>
        </member>
        <member name="E:BPUtil.GlobalUdpBroadcaster.PacketReceived">
            <summary>
            Raised when a UDP packet is received.
            </summary>
        </member>
        <member name="M:BPUtil.GlobalUdpBroadcaster.Stop">
            <summary>
            Ends the send and receive threads.
            </summary>
        </member>
        <member name="M:BPUtil.GlobalUdpBroadcaster.Broadcast(System.Byte[])">
            <summary>
            Broadcasts the specified packet.
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:BPUtil.GlobalUdpBroadcaster.Broadcast(System.Func{System.Net.NetworkInformation.NetworkInterface,System.Byte[]})">
            <summary>
            Broadcasts the specified packet.
            </summary>
            <param name="getPacket">A function which returns the packet to broadcast.</param>
        </member>
        <member name="T:BPUtil.WaitProgressivelyLonger">
            <summary>
            A class which assists with retry operations that should wait progressively longer with each attempt.
            </summary>
        </member>
        <member name="F:BPUtil.WaitProgressivelyLonger.sleepTimeCutoff">
            <summary>
            sleepTime will not increase if it is greater than this value.
            </summary>
        </member>
        <member name="F:BPUtil.WaitProgressivelyLonger.sleepTimeModifierMs">
            <summary>
            sleepTime increases by this much each time Wait is called.
            </summary>
        </member>
        <member name="F:BPUtil.WaitProgressivelyLonger.startSleepTimeMs">
            <summary>
            Remembers the starting sleep time for later reset calls.
            </summary>
        </member>
        <member name="F:BPUtil.WaitProgressivelyLonger.sleepTime">
            <summary>
            The amount of time in milliseconds to sleep next.
            </summary>
        </member>
        <member name="F:BPUtil.WaitProgressivelyLonger.sleepTimeModifierMultiplier">
            <summary>
            If positive and nonzero, sleep time increases by multiplying by this value.
            </summary>
        </member>
        <member name="M:BPUtil.WaitProgressivelyLonger.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            This legacy constructor is the same as the static method WaitProgressivelyLonger.Linear(…).
            </summary>
            <param name="maxSleepTimeMs">The waiting time will not increase beyond this value.</param>
            <param name="sleepTimeModifierMs">The waiting time will increase by this much each time Wait() is called.</param>
            <param name="startSleepTimeMs">The time to sleep the first time Wait() is called.</param>
        </member>
        <member name="M:BPUtil.WaitProgressivelyLonger.Linear(System.Int32,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="maxSleepTimeMs">The waiting time will not increase beyond this value.</param>
            <param name="sleepTimeModifierMs">The waiting time will increase by this much each time Wait() is called.</param>
            <param name="startSleepTimeMs">The time to sleep the first time Wait() is called.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.WaitProgressivelyLonger.Exponential(System.Int32,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="maxSleepTimeMs">The waiting time will not increase beyond this value.</param>
            <param name="sleepTimeModifierMultiplier">The waiting time is multiplied by this value each time.</param>
            <param name="startSleepTimeMs">The time to sleep the first time Wait() is called.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.WaitProgressivelyLonger.GetNextTimeout">
            <summary>
            Returns the timeout in milliseconds and increments the timeout for next time.  This should only be called externally if NOT using the built-in Wait() method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BPUtil.WaitProgressivelyLonger.Reset">
            <summary>
            Changes internal state back to what it was when this object was constructed.
            </summary>
        </member>
        <member name="T:BPUtil.BpWebResponse">
            <summary>
            Contains HTTP response data.  This is returned by methods in <see cref="T:BPUtil.WebRequestUtility"/>.
            </summary>
        </member>
        <member name="F:BPUtil.BpWebResponse.data">
            <summary>
            The raw response payload as a byte array.
            </summary>
        </member>
        <member name="F:BPUtil.BpWebResponse.headers">
            <summary>
            A collection of http response headers.  Keys are case sensitive.
            </summary>
        </member>
        <member name="F:BPUtil.BpWebResponse.ContentType">
            <summary>
            The value of the Content Type response header.
            </summary>
        </member>
        <member name="F:BPUtil.BpWebResponse.StatusCode">
            <summary>
            The HTTP status code of the response.  200 is normal success, 404 is Not Found, and so on. 0 indicates an exception was caught, and could indicate DNS resolution failure or connection failure.
            </summary>
        </member>
        <member name="F:BPUtil.BpWebResponse._str">
            <summary>
            A cache for the string value of the response.  This is populated the first time <see cref="P:BPUtil.BpWebResponse.str"/> is requested.
            </summary>
        </member>
        <member name="F:BPUtil.BpWebResponse.remoteIp">
            <summary>
            The remote IP address of the server, in case a DNS hostname was used in the URL.
            </summary>
        </member>
        <member name="F:BPUtil.BpWebResponse.ex">
            <summary>
            If an exception was caught, it will be here.
            </summary>
        </member>
        <member name="F:BPUtil.BpWebResponse.canceled">
            <summary>
            If the request/thread was aborted, this will be true.
            </summary>
        </member>
        <member name="P:BPUtil.BpWebResponse.str">
            <summary>
            Returns the response in string format. The response is assumed to be UTF8-formatted string data.
            </summary>
        </member>
        <member name="T:BPUtil.WebRequestUtility">
            <summary>
            Provides HTTP GET and POST methods which are useful in situations where the WebClient class falls short.  An instance of this is intended to be used with only a single remote host.  This class is thread-safe.
            </summary>
        </member>
        <member name="P:BPUtil.WebRequestUtility.UserAgent">
            <summary>
            Gets or sets the value of the "User-Agent" HTTP header.
            </summary>
        </member>
        <member name="P:BPUtil.WebRequestUtility.RequestTimeout">
            <summary>
            Gets or sets the timespan to wait before the request times out.
            </summary>
        </member>
        <member name="P:BPUtil.WebRequestUtility.Proxy">
            <summary>
            <para>You can provide a proxy server here, if desired.  Example: new WebProxy("127.0.0.1", 8888)</para>
            <para>See <seealso cref="T:System.Net.IWebProxy"/>, <seealso cref="T:System.Net.WebProxy"/>.</para>
            <para>Also see <seealso cref="P:BPUtil.WebRequestUtility.UseProxy"/>.</para>
            </summary>
        </member>
        <member name="P:BPUtil.WebRequestUtility.UseProxy">
            <summary>
            If false, no web proxy server will be used.  If true, the <seealso cref="T:System.Net.Http.HttpClient"/> will use the <see cref="P:BPUtil.WebRequestUtility.Proxy"/> server. If Proxy is null, the <seealso cref="T:System.Net.Http.HttpClient"/> will use automatic proxy settings.
            </summary>
        </member>
        <member name="P:BPUtil.WebRequestUtility.BasicAuthCredentials">
            <summary>
            If provided, all web requests will attempt basic authentication using these credentials.
            </summary>
        </member>
        <member name="P:BPUtil.WebRequestUtility.AllowAutoRedirect">
            <summary>
             Gets or sets a value that indicates whether the handler should follow redirection responses. The default value is true.
            </summary>
        </member>
        <member name="M:BPUtil.WebRequestUtility.#ctor(System.String,System.Int32)">
            <summary>
            Constructs a WebRequestUtility which can be used for multiple HTTP requests, even concurrent ones.  This class is thread-safe.
            </summary>
            <param name="userAgent">User-Agent header value.</param>
            <param name="requestTimeout">Initial request timeout in milliseconds. If 0 or less, this value is ignored. To modify after construction, see <see cref="P:BPUtil.WebRequestUtility.RequestTimeout"/>.</param>
        </member>
        <member name="M:BPUtil.WebRequestUtility.GET(System.String,System.String[],System.Int32,System.String)">
            <summary>
            Performs an HTTP GET request.
            </summary>
            <param name="url">The url to GET.</param>
            <param name="headers"><para>An array of strings containing header names and values. The array should be populated in the order of "name", "value", "name", "value", and so on.</para>
            <para>
            For example:
            </para>
            <code>new string[] { "HeaderNameOne", "Header Value One!", "HeaderNameTwo", "Header Value Two!", "User-Agent", "Mozilla" }</code></param>
            <param name="earlyTerminationBytes">(Advanced use) If specified, the connection will be dropped as soon as this many bytes are read, and this much data will be returned. If the full response is shorter than this, then the full response will be returned.</param>
            <param name="fileDownloadPath">If specified, the response body will be streamed into this file and the response returned by this method will have a null data field.  If the file already exists, it will be overwritten.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.WebRequestUtility.GETAsync(System.String,System.String[],System.Int32,System.String)">
            <summary>
            Performs an HTTP GET request.
            </summary>
            <param name="url">The url to GET.</param>
            <param name="headers"><para>An array of strings containing header names and values. The array should be populated in the order of "name", "value", "name", "value", and so on.</para>
            <para>
            For example:
            </para>
            <code>new string[] { "HeaderNameOne", "Header Value One!", "HeaderNameTwo", "Header Value Two!", "User-Agent", "Mozilla" }</code></param>
            <param name="earlyTerminationBytes">(Advanced use) If specified, the connection will be dropped as soon as this many bytes are read, and this much data will be returned. If the full response is shorter than this, then the full response will be returned.</param>
            <param name="fileDownloadPath">If specified, the response body will be streamed into this file and the response returned by this method will have a null data field.  If the file already exists, it will be overwritten.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.WebRequestUtility.POST(System.String,System.String[],System.String[],System.Int32,System.String)">
            <summary>
            Performs an HTTP POST request, sending key and value strings to the server using the content type "application/x-www-form-urlencoded".
            </summary>
            <param name="url">The url to POST.</param>
            <param name="keysAndValues">An array of strings containing parameter names and values. The array should be populated in the order of "name", "value", "name", "value", and so on.
            <para>
            For example:
            </para>
            <code>new string[] { "ParamOne", "Value One!", "ParamTwo", "Value Two!" }</code></param>
            <param name="headers">An array of strings containing header names and values. The array should be populated in the order of "name", "value", "name", "value", and so on.
            <para>
            For example:
            </para>
            <code>new string[] { "HeaderNameOne", "Header Value One!", "HeaderNameTwo", "Header Value Two!", "User-Agent", "Mozilla" }</code></param>
            <param name="earlyTerminationBytes">If specified, the connection will be dropped as soon as this many bytes are read, and this much data will be returned. If the full response is shorter than this, then the full response will be returned.</param>
            <param name="fileDownloadPath">If specified, the response body will be streamed into this file and the response returned by this method will have a null data field.  If the file already exists, it will be overwritten.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.WebRequestUtility.POSTAsync(System.String,System.String[],System.String[],System.Int32,System.String)">
            <summary>
            Performs an HTTP POST request, sending key and value strings to the server using the content type "application/x-www-form-urlencoded".
            </summary>
            <param name="url">The url to POST.</param>
            <param name="keysAndValues">An array of strings containing parameter names and values. The array should be populated in the order of "name", "value", "name", "value", and so on.
            <para>
            For example:
            </para>
            <code>new string[] { "ParamOne", "Value One!", "ParamTwo", "Value Two!" }</code></param>
            <param name="headers">An array of strings containing header names and values. The array should be populated in the order of "name", "value", "name", "value", and so on.
            <para>
            For example:
            </para>
            <code>new string[] { "HeaderNameOne", "Header Value One!", "HeaderNameTwo", "Header Value Two!", "User-Agent", "Mozilla" }</code></param>
            <param name="earlyTerminationBytes">If specified, the connection will be dropped as soon as this many bytes are read, and this much data will be returned. If the full response is shorter than this, then the full response will be returned.</param>
            <param name="fileDownloadPath">If specified, the response body will be streamed into this file and the response returned by this method will have a null data field.  If the file already exists, it will be overwritten.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.WebRequestUtility.POST(System.String,System.Byte[],System.String,System.String[],System.Int32,System.String)">
            <summary>
            Performs an HTTP POST request, sending the specified body content.
            </summary>
            <param name="url">The url to POST.</param>
            <param name="postBody">The content to post.</param>
            <param name="earlyTerminationBytes">If specified, the connection will be dropped as soon as this many bytes are read, and this much data will be returned. If the full response is shorter than this, then the full response will be returned.</param>
            <param name="contentType">The value of the content-type header to set.</param>
            <param name="headers">Additional header keys and values to set in the request, provided as an array of strings ordered as [key, value, key, value] and so on. e.g.: { "User-Agent", "Mozilla", "Server", "MyServer" }</param>
            <param name="fileDownloadPath">If specified, the response body will be streamed into this file and the response returned by this method will have a null data field.  If the file already exists, it will be overwritten.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.WebRequestUtility.POSTAsync(System.String,System.Byte[],System.String,System.String[],System.Int32,System.String)">
            <summary>
            Performs an HTTP POST request, sending the specified body content.
            </summary>
            <param name="url">The url to POST.</param>
            <param name="postBody">The content to post.</param>
            <param name="earlyTerminationBytes">If specified, the connection will be dropped as soon as this many bytes are read, and this much data will be returned. If the full response is shorter than this, then the full response will be returned.</param>
            <param name="contentType">The value of the content-type header to set.</param>
            <param name="headers">Additional header keys and values to set in the request, provided as an array of strings ordered as [key, value, key, value] and so on. e.g.: { "User-Agent", "Mozilla", "Server", "MyServer" }</param>
            <param name="fileDownloadPath">If specified, the response body will be streamed into this file and the response returned by this method will have a null data field.  If the file already exists, it will be overwritten.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.WebRequestUtility.PUTAsync(System.String,System.Byte[],System.String,System.String[],System.Int32,System.String)">
            <summary>
            Performs an HTTP PUT request, sending the specified body content.
            </summary>
            <param name="url">The url to PUT.</param>
            <param name="putBody">The content to upload.</param>
            <param name="earlyTerminationBytes">If specified, the connection will be dropped as soon as this many bytes are read, and this much data will be returned. If the full response is shorter than this, then the full response will be returned.</param>
            <param name="contentType">The value of the content-type header to set.</param>
            <param name="headers">Additional header keys and values to set in the request, provided as an array of strings ordered as [key, value, key, value] and so on. e.g.: { "User-Agent", "Mozilla", "Server", "MyServer" }</param>
            <param name="fileDownloadPath">If specified, the response body will be streamed into this file and the response returned by this method will have a null data field.  If the file already exists, it will be overwritten.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.WebRequestUtility.PUT(System.String,System.Byte[],System.String,System.String[],System.Int32,System.String)">
            <summary>
            Performs an HTTP PUT request, sending the specified body content.
            </summary>
            <param name="url">The url to PUT.</param>
            <param name="putBody">The content to upload.</param>
            <param name="earlyTerminationBytes">If specified, the connection will be dropped as soon as this many bytes are read, and this much data will be returned. If the full response is shorter than this, then the full response will be returned.</param>
            <param name="contentType">The value of the content-type header to set.</param>
            <param name="headers">Additional header keys and values to set in the request, provided as an array of strings ordered as [key, value, key, value] and so on. e.g.: { "User-Agent", "Mozilla", "Server", "MyServer" }</param>
            <param name="fileDownloadPath">If specified, the response body will be streamed into this file and the response returned by this method will have a null data field.  If the file already exists, it will be overwritten.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.WebRequestUtility.internal_send(System.Net.Http.HttpMethod,System.String,System.Byte[],System.String,System.String[],System.Int32,System.String)">
            <summary>
            Sends the request and retrieves the response.
            </summary>
            <param name="method">The HTTP method to use for the request.</param>
            <param name="url">The URL to access.</param>
            <param name="uploadBody">The content to POST or PUT. Null if using GET.</param>
            <param name="contentType">The value of the content-type header to set. Null if using GET.</param>
            <param name="headers">Additional header keys and values to set in the request, provided as an array of strings ordered as [key, value, key, value] and so on. e.g.: { "User-Agent", "Mozilla", "Server", "MyServer" }</param>
            <param name="earlyTerminationBytes">If specified, the connection will be dropped as soon as this many bytes are read, and this much data will be returned. If the full response is shorter than this, then the full response will be returned.</param>
            <param name="fileDownloadPath">If specified, the response body will be streamed into this file and the response returned by this method will have a null data field.  If the file already exists, it will be overwritten.</param>
            <returns></returns>
        </member>
        <member name="M:BPUtil.WebRequestUtility.CreateStreamToSaveTo(System.String)">
            <summary>
            Creates a MemoryStream or a write-only FileStream depending on the [fileDownloadPath] argument. 
            </summary>
            <param name="fileDownloadPath">If null or empty, a MemoryStream is returned, otherwise a write-only FileStream pointing at this path.</param>
            <returns></returns>
        </member>
    </members>
</doc>
